
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 30 23 04 80 	movabs $0x8004233038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 30 23 04 80 	movabs $0x8004233000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 bd 7c 21 04 80 	movabs $0x8004217cbd,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 d0 71 04 80 	movabs $0x800471d010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 a0 a1 4d 04 80 	movabs $0x80044da1a0,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf a0 a1 4d 04 80 	movabs $0x80044da1a0,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 9a 11 20 04 80 	movabs $0x800420119a,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf 20 cd 21 04 80 	movabs $0x800421cd20,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 d0 71 04 80 	movabs $0x800471d010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 53 63 21 04 80 	movabs $0x8004216353,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 a5 6d 04 80 	movabs $0x80046da5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 31 26 20 04 80 	movabs $0x8004202631,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 15 7f 20 04 80 	movabs $0x8004207f15,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 8c 9d 20 04 80 	movabs $0x8004209d8c,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 dd 72 21 04 80 	movabs $0x80042172dd,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 3b 77 21 04 80 	movabs $0x800421773b,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 14 99 20 04 80 	movabs $0x8004209914,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 58 91 21 04 80 	movabs $0x8004219158,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 1c 91 21 04 80 	movabs $0x800421911c,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 fc 01 20 04 80 	movabs $0x80042001fc,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf 48 d3 2b 04 80 	movabs $0x80042bd348,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 66 8f 20 04 80 	movabs $0x8004208f66,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	be 00 00 00 00       	mov    $0x0,%esi
  80042001ce:	48 bf 30 58 4a 04 80 	movabs $0x80044a5830,%rdi
  80042001d5:	00 00 00 
  80042001d8:	48 b8 66 8f 20 04 80 	movabs $0x8004208f66,%rax
  80042001df:	00 00 00 
  80042001e2:	ff d0                	callq  *%rax
  80042001e4:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax

00000080042001fc <boot_aps>:
  80042001fc:	55                   	push   %rbp
  80042001fd:	48 89 e5             	mov    %rsp,%rbp
  8004200200:	48 83 ec 30          	sub    $0x30,%rsp
  8004200204:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  800420020b:	00 
  800420020c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200210:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200214:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200217:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420021a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004200221:	00 00 00 
  8004200224:	48 8b 00             	mov    (%rax),%rax
  8004200227:	48 39 c2             	cmp    %rax,%rdx
  800420022a:	72 32                	jb     800420025e <boot_aps+0x62>
  800420022c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200230:	48 89 c1             	mov    %rax,%rcx
  8004200233:	48 ba 40 cd 21 04 80 	movabs $0x800421cd40,%rdx
  800420023a:	00 00 00 
  800420023d:	be 01 01 00 00       	mov    $0x101,%esi
  8004200242:	48 bf 63 cd 21 04 80 	movabs $0x800421cd63,%rdi
  8004200249:	00 00 00 
  800420024c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200251:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200258:	00 00 00 
  800420025b:	41 ff d0             	callq  *%r8
  800420025e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200265:	00 00 00 
  8004200268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420026c:	48 01 d0             	add    %rdx,%rax
  800420026f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004200273:	48 ba 06 6e 21 04 80 	movabs $0x8004216e06,%rdx
  800420027a:	00 00 00 
  800420027d:	48 b8 20 6d 21 04 80 	movabs $0x8004216d20,%rax
  8004200284:	00 00 00 
  8004200287:	48 29 c2             	sub    %rax,%rdx
  800420028a:	48 89 d0             	mov    %rdx,%rax
  800420028d:	48 89 c2             	mov    %rax,%rdx
  8004200290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200294:	48 be 20 6d 21 04 80 	movabs $0x8004216d20,%rsi
  800420029b:	00 00 00 
  800420029e:	48 89 c7             	mov    %rax,%rdi
  80042002a1:	48 b8 be 09 21 04 80 	movabs $0x80042109be,%rax
  80042002a8:	00 00 00 
  80042002ab:	ff d0                	callq  *%rax
  80042002ad:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042002b4:	00 00 00 
  80042002b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002bb:	e9 0e 01 00 00       	jmpq   80042003ce <boot_aps+0x1d2>
  80042002c0:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042002c7:	00 00 00 
  80042002ca:	ff d0                	callq  *%rax
  80042002cc:	48 98                	cltq   
  80042002ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042002d2:	48 89 c2             	mov    %rax,%rdx
  80042002d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002d9:	48 01 c2             	add    %rax,%rdx
  80042002dc:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042002e3:	00 00 00 
  80042002e6:	48 01 d0             	add    %rdx,%rax
  80042002e9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002ed:	75 05                	jne    80042002f4 <boot_aps+0xf8>
  80042002ef:	e9 d2 00 00 00       	jmpq   80042003c6 <boot_aps+0x1ca>
  80042002f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042002f8:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042002ff:	00 00 00 
  8004200302:	48 29 c2             	sub    %rax,%rdx
  8004200305:	48 89 d0             	mov    %rdx,%rax
  8004200308:	48 c1 f8 03          	sar    $0x3,%rax
  800420030c:	48 89 c2             	mov    %rax,%rdx
  800420030f:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200316:	f0 f0 f0 
  8004200319:	48 0f af c2          	imul   %rdx,%rax
  800420031d:	48 83 c0 01          	add    $0x1,%rax
  8004200321:	48 c1 e0 10          	shl    $0x10,%rax
  8004200325:	48 89 c2             	mov    %rax,%rdx
  8004200328:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  800420032f:	00 00 00 
  8004200332:	48 01 c2             	add    %rax,%rdx
  8004200335:	48 b8 e0 a5 6d 04 80 	movabs $0x80046da5e0,%rax
  800420033c:	00 00 00 
  800420033f:	48 89 10             	mov    %rdx,(%rax)
  8004200342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200346:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420034a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004200351:	00 00 00 
  8004200354:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200358:	77 32                	ja     800420038c <boot_aps+0x190>
  800420035a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420035e:	48 89 c1             	mov    %rax,%rcx
  8004200361:	48 ba 78 cd 21 04 80 	movabs $0x800421cd78,%rdx
  8004200368:	00 00 00 
  800420036b:	be 0b 01 00 00       	mov    $0x10b,%esi
  8004200370:	48 bf 63 cd 21 04 80 	movabs $0x800421cd63,%rdi
  8004200377:	00 00 00 
  800420037a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420037f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200386:	00 00 00 
  8004200389:	41 ff d0             	callq  *%r8
  800420038c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004200393:	ff ff ff 
  8004200396:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420039a:	48 01 d0             	add    %rdx,%rax
  800420039d:	89 c2                	mov    %eax,%edx
  800420039f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003a3:	0f b6 00             	movzbl (%rax),%eax
  80042003a6:	0f b6 c0             	movzbl %al,%eax
  80042003a9:	89 d6                	mov    %edx,%esi
  80042003ab:	89 c7                	mov    %eax,%edi
  80042003ad:	48 b8 a2 79 21 04 80 	movabs $0x80042179a2,%rax
  80042003b4:	00 00 00 
  80042003b7:	ff d0                	callq  *%rax
  80042003b9:	90                   	nop
  80042003ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003be:	8b 40 04             	mov    0x4(%rax),%eax
  80042003c1:	83 f8 01             	cmp    $0x1,%eax
  80042003c4:	75 f4                	jne    80042003ba <boot_aps+0x1be>
  80042003c6:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003cd:	00 
  80042003ce:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042003d5:	00 00 00 
  80042003d8:	8b 00                	mov    (%rax),%eax
  80042003da:	48 98                	cltq   
  80042003dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042003e0:	48 89 c2             	mov    %rax,%rdx
  80042003e3:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003e7:	48 01 c2             	add    %rax,%rdx
  80042003ea:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  80042003f1:	00 00 00 
  80042003f4:	48 01 d0             	add    %rdx,%rax
  80042003f7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042003fb:	0f 87 bf fe ff ff    	ja     80042002c0 <boot_aps+0xc4>
  8004200401:	c9                   	leaveq 
  8004200402:	c3                   	retq   

0000008004200403 <mp_main>:
  8004200403:	55                   	push   %rbp
  8004200404:	48 89 e5             	mov    %rsp,%rbp
  8004200407:	48 83 ec 10          	sub    $0x10,%rsp
  800420040b:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  8004200412:	00 00 00 
  8004200415:	48 8b 00             	mov    (%rax),%rax
  8004200418:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420041c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200420:	0f 22 d8             	mov    %rax,%cr3
  8004200423:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420042a:	00 00 00 
  800420042d:	ff d0                	callq  *%rax
  800420042f:	89 c6                	mov    %eax,%esi
  8004200431:	48 bf 9c cd 21 04 80 	movabs $0x800421cd9c,%rdi
  8004200438:	00 00 00 
  800420043b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200440:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004200447:	00 00 00 
  800420044a:	ff d2                	callq  *%rdx
  800420044c:	48 b8 3b 77 21 04 80 	movabs $0x800421773b,%rax
  8004200453:	00 00 00 
  8004200456:	ff d0                	callq  *%rax
  8004200458:	48 b8 e2 7f 20 04 80 	movabs $0x8004207fe2,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 8f c4 20 04 80 	movabs $0x800420c48f,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 98                	cltq   
  800420047e:	48 c1 e0 03          	shl    $0x3,%rax
  8004200482:	48 89 c2             	mov    %rax,%rdx
  8004200485:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200489:	48 01 d0             	add    %rdx,%rax
  800420048c:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004200493:	00 00 00 
  8004200496:	48 01 d0             	add    %rdx,%rax
  8004200499:	48 83 c0 04          	add    $0x4,%rax
  800420049d:	be 01 00 00 00       	mov    $0x1,%esi
  80042004a2:	48 89 c7             	mov    %rax,%rdi
  80042004a5:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004ac:	00 00 00 
  80042004af:	ff d0                	callq  *%rax
  80042004b1:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax

00000080042004c9 <_panic>:
  80042004c9:	55                   	push   %rbp
  80042004ca:	48 89 e5             	mov    %rsp,%rbp
  80042004cd:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004d4:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004db:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004e1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004e8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004ef:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042004f6:	84 c0                	test   %al,%al
  80042004f8:	74 20                	je     800420051a <_panic+0x51>
  80042004fa:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042004fe:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200502:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200506:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420050a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420050e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200512:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200516:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420051a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200521:	48 b8 d8 a5 6d 04 80 	movabs $0x80046da5d8,%rax
  8004200528:	00 00 00 
  800420052b:	48 8b 00             	mov    (%rax),%rax
  800420052e:	48 85 c0             	test   %rax,%rax
  8004200531:	74 05                	je     8004200538 <_panic+0x6f>
  8004200533:	e9 b5 00 00 00       	jmpq   80042005ed <_panic+0x124>
  8004200538:	48 b8 d8 a5 6d 04 80 	movabs $0x80046da5d8,%rax
  800420053f:	00 00 00 
  8004200542:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200549:	48 89 10             	mov    %rdx,(%rax)
  800420054c:	fa                   	cli    
  800420054d:	fc                   	cld    
  800420054e:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200555:	00 00 00 
  8004200558:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420055f:	00 00 00 
  8004200562:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200566:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420056d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200574:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420057b:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004200582:	00 00 00 
  8004200585:	ff d0                	callq  *%rax
  8004200587:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  800420058d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004200594:	89 c6                	mov    %eax,%esi
  8004200596:	48 bf b8 cd 21 04 80 	movabs $0x800421cdb8,%rdi
  800420059d:	00 00 00 
  80042005a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005a5:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  80042005ac:	00 00 00 
  80042005af:	41 ff d0             	callq  *%r8
  80042005b2:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005b9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005c0:	48 89 d6             	mov    %rdx,%rsi
  80042005c3:	48 89 c7             	mov    %rax,%rdi
  80042005c6:	48 b8 b5 9b 20 04 80 	movabs $0x8004209bb5,%rax
  80042005cd:	00 00 00 
  80042005d0:	ff d0                	callq  *%rax
  80042005d2:	48 bf da cd 21 04 80 	movabs $0x800421cdda,%rdi
  80042005d9:	00 00 00 
  80042005dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005e1:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042005e8:	00 00 00 
  80042005eb:	ff d2                	callq  *%rdx
  80042005ed:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005f2:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  80042005f9:	00 00 00 
  80042005fc:	ff d0                	callq  *%rax
  80042005fe:	eb ed                	jmp    80042005ed <_panic+0x124>

0000008004200600 <_warn>:
  8004200600:	55                   	push   %rbp
  8004200601:	48 89 e5             	mov    %rsp,%rbp
  8004200604:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420060b:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004200612:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200618:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420061f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200626:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420062d:	84 c0                	test   %al,%al
  800420062f:	74 20                	je     8004200651 <_warn+0x51>
  8004200631:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200635:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200639:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420063d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200641:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200645:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200649:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420064d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200651:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200658:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420065f:	00 00 00 
  8004200662:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200669:	00 00 00 
  800420066c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200670:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200677:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420067e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200685:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800420068b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004200692:	48 89 c6             	mov    %rax,%rsi
  8004200695:	48 bf dc cd 21 04 80 	movabs $0x800421cddc,%rdi
  800420069c:	00 00 00 
  800420069f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006a4:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  80042006ab:	00 00 00 
  80042006ae:	ff d1                	callq  *%rcx
  80042006b0:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006b7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006be:	48 89 d6             	mov    %rdx,%rsi
  80042006c1:	48 89 c7             	mov    %rax,%rdi
  80042006c4:	48 b8 b5 9b 20 04 80 	movabs $0x8004209bb5,%rax
  80042006cb:	00 00 00 
  80042006ce:	ff d0                	callq  *%rax
  80042006d0:	48 bf da cd 21 04 80 	movabs $0x800421cdda,%rdi
  80042006d7:	00 00 00 
  80042006da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006df:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042006e6:	00 00 00 
  80042006e9:	ff d2                	callq  *%rdx
  80042006eb:	c9                   	leaveq 
  80042006ec:	c3                   	retq   

00000080042006ed <delay>:
  80042006ed:	55                   	push   %rbp
  80042006ee:	48 89 e5             	mov    %rsp,%rbp
  80042006f1:	48 83 ec 20          	sub    $0x20,%rsp
  80042006f5:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042006fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042006ff:	89 c2                	mov    %eax,%edx
  8004200701:	ec                   	in     (%dx),%al
  8004200702:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200705:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  800420070c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420070f:	89 c2                	mov    %eax,%edx
  8004200711:	ec                   	in     (%dx),%al
  8004200712:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200715:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  800420071c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420071f:	89 c2                	mov    %eax,%edx
  8004200721:	ec                   	in     (%dx),%al
  8004200722:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200725:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  800420072c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420072f:	89 c2                	mov    %eax,%edx
  8004200731:	ec                   	in     (%dx),%al
  8004200732:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200735:	c9                   	leaveq 
  8004200736:	c3                   	retq   

0000008004200737 <serial_proc_data>:
  8004200737:	55                   	push   %rbp
  8004200738:	48 89 e5             	mov    %rsp,%rbp
  800420073b:	48 83 ec 10          	sub    $0x10,%rsp
  800420073f:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200746:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200749:	89 c2                	mov    %eax,%edx
  800420074b:	ec                   	in     (%dx),%al
  800420074c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420074f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200753:	0f b6 c0             	movzbl %al,%eax
  8004200756:	83 e0 01             	and    $0x1,%eax
  8004200759:	85 c0                	test   %eax,%eax
  800420075b:	75 07                	jne    8004200764 <serial_proc_data+0x2d>
  800420075d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200762:	eb 17                	jmp    800420077b <serial_proc_data+0x44>
  8004200764:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420076b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420076e:	89 c2                	mov    %eax,%edx
  8004200770:	ec                   	in     (%dx),%al
  8004200771:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200774:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200778:	0f b6 c0             	movzbl %al,%eax
  800420077b:	c9                   	leaveq 
  800420077c:	c3                   	retq   

000000800420077d <serial_intr>:
  800420077d:	55                   	push   %rbp
  800420077e:	48 89 e5             	mov    %rsp,%rbp
  8004200781:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  8004200788:	00 00 00 
  800420078b:	0f b6 00             	movzbl (%rax),%eax
  800420078e:	84 c0                	test   %al,%al
  8004200790:	74 16                	je     80042007a8 <serial_intr+0x2b>
  8004200792:	48 bf 37 07 20 04 80 	movabs $0x8004200737,%rdi
  8004200799:	00 00 00 
  800420079c:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  80042007a3:	00 00 00 
  80042007a6:	ff d0                	callq  *%rax
  80042007a8:	5d                   	pop    %rbp
  80042007a9:	c3                   	retq   

00000080042007aa <serial_putc>:
  80042007aa:	55                   	push   %rbp
  80042007ab:	48 89 e5             	mov    %rsp,%rbp
  80042007ae:	48 83 ec 28          	sub    $0x28,%rsp
  80042007b2:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007bc:	eb 10                	jmp    80042007ce <serial_putc+0x24>
  80042007be:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  80042007c5:	00 00 00 
  80042007c8:	ff d0                	callq  *%rax
  80042007ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007ce:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007d8:	89 c2                	mov    %eax,%edx
  80042007da:	ec                   	in     (%dx),%al
  80042007db:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007de:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007e2:	0f b6 c0             	movzbl %al,%eax
  80042007e5:	83 e0 20             	and    $0x20,%eax
  80042007e8:	85 c0                	test   %eax,%eax
  80042007ea:	75 09                	jne    80042007f5 <serial_putc+0x4b>
  80042007ec:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007f3:	7e c9                	jle    80042007be <serial_putc+0x14>
  80042007f5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042007f8:	0f b6 c0             	movzbl %al,%eax
  80042007fb:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  8004200802:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200805:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200809:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420080c:	ee                   	out    %al,(%dx)
  800420080d:	c9                   	leaveq 
  800420080e:	c3                   	retq   

000000800420080f <serial_init>:
  800420080f:	55                   	push   %rbp
  8004200810:	48 89 e5             	mov    %rsp,%rbp
  8004200813:	48 83 ec 50          	sub    $0x50,%rsp
  8004200817:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420081e:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  8004200822:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200826:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200829:	ee                   	out    %al,(%dx)
  800420082a:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  8004200831:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200835:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200839:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420083c:	ee                   	out    %al,(%dx)
  800420083d:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200844:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200848:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420084c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420084f:	ee                   	out    %al,(%dx)
  8004200850:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200857:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  800420085b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420085f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200862:	ee                   	out    %al,(%dx)
  8004200863:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  800420086a:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420086e:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200872:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200875:	ee                   	out    %al,(%dx)
  8004200876:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  800420087d:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  8004200881:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200885:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200888:	ee                   	out    %al,(%dx)
  8004200889:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  8004200890:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  8004200894:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004200898:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420089b:	ee                   	out    %al,(%dx)
  800420089c:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008a3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008a6:	89 c2                	mov    %eax,%edx
  80042008a8:	ec                   	in     (%dx),%al
  80042008a9:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008ac:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008b0:	3c ff                	cmp    $0xff,%al
  80042008b2:	0f 95 c2             	setne  %dl
  80042008b5:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  80042008bc:	00 00 00 
  80042008bf:	88 10                	mov    %dl,(%rax)
  80042008c1:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008c8:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008cb:	89 c2                	mov    %eax,%edx
  80042008cd:	ec                   	in     (%dx),%al
  80042008ce:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008d1:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008d8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008db:	89 c2                	mov    %eax,%edx
  80042008dd:	ec                   	in     (%dx),%al
  80042008de:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008e1:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  80042008e8:	00 00 00 
  80042008eb:	0f b6 00             	movzbl (%rax),%eax
  80042008ee:	84 c0                	test   %al,%al
  80042008f0:	74 23                	je     8004200915 <serial_init+0x106>
  80042008f2:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  80042008f9:	00 00 00 
  80042008fc:	0f b7 00             	movzwl (%rax),%eax
  80042008ff:	0f b7 c0             	movzwl %ax,%eax
  8004200902:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200907:	89 c7                	mov    %eax,%edi
  8004200909:	48 b8 66 9a 20 04 80 	movabs $0x8004209a66,%rax
  8004200910:	00 00 00 
  8004200913:	ff d0                	callq  *%rax
  8004200915:	c9                   	leaveq 
  8004200916:	c3                   	retq   

0000008004200917 <lpt_putc>:
  8004200917:	55                   	push   %rbp
  8004200918:	48 89 e5             	mov    %rsp,%rbp
  800420091b:	48 83 ec 38          	sub    $0x38,%rsp
  800420091f:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200922:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200929:	eb 10                	jmp    800420093b <lpt_putc+0x24>
  800420092b:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  8004200932:	00 00 00 
  8004200935:	ff d0                	callq  *%rax
  8004200937:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420093b:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200942:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200945:	89 c2                	mov    %eax,%edx
  8004200947:	ec                   	in     (%dx),%al
  8004200948:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  800420094b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420094f:	84 c0                	test   %al,%al
  8004200951:	78 09                	js     800420095c <lpt_putc+0x45>
  8004200953:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420095a:	7e cf                	jle    800420092b <lpt_putc+0x14>
  800420095c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420095f:	0f b6 c0             	movzbl %al,%eax
  8004200962:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200969:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420096c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200970:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200973:	ee                   	out    %al,(%dx)
  8004200974:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  800420097b:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420097f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200983:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200986:	ee                   	out    %al,(%dx)
  8004200987:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420098e:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200992:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200996:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200999:	ee                   	out    %al,(%dx)
  800420099a:	c9                   	leaveq 
  800420099b:	c3                   	retq   

000000800420099c <cga_init>:
  800420099c:	55                   	push   %rbp
  800420099d:	48 89 e5             	mov    %rsp,%rbp
  80042009a0:	48 83 ec 30          	sub    $0x30,%rsp
  80042009a4:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009ab:	00 00 00 
  80042009ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009b6:	0f b7 00             	movzwl (%rax),%eax
  80042009b9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c1:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009ca:	0f b7 00             	movzwl (%rax),%eax
  80042009cd:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009d1:	74 20                	je     80042009f3 <cga_init+0x57>
  80042009d3:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009da:	00 00 00 
  80042009dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009e1:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  80042009e8:	00 00 00 
  80042009eb:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009f1:	eb 1b                	jmp    8004200a0e <cga_init+0x72>
  80042009f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009f7:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042009fb:	66 89 10             	mov    %dx,(%rax)
  80042009fe:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a05:	00 00 00 
  8004200a08:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a0e:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a15:	00 00 00 
  8004200a18:	8b 00                	mov    (%rax),%eax
  8004200a1a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a1d:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a21:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a25:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a28:	ee                   	out    %al,(%dx)
  8004200a29:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a30:	00 00 00 
  8004200a33:	8b 00                	mov    (%rax),%eax
  8004200a35:	83 c0 01             	add    $0x1,%eax
  8004200a38:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a3e:	89 c2                	mov    %eax,%edx
  8004200a40:	ec                   	in     (%dx),%al
  8004200a41:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a44:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a48:	0f b6 c0             	movzbl %al,%eax
  8004200a4b:	c1 e0 08             	shl    $0x8,%eax
  8004200a4e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a51:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a58:	00 00 00 
  8004200a5b:	8b 00                	mov    (%rax),%eax
  8004200a5d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a60:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a64:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a68:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a6b:	ee                   	out    %al,(%dx)
  8004200a6c:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200a73:	00 00 00 
  8004200a76:	8b 00                	mov    (%rax),%eax
  8004200a78:	83 c0 01             	add    $0x1,%eax
  8004200a7b:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a7e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a81:	89 c2                	mov    %eax,%edx
  8004200a83:	ec                   	in     (%dx),%al
  8004200a84:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a87:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a8b:	0f b6 c0             	movzbl %al,%eax
  8004200a8e:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a91:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200a98:	00 00 00 
  8004200a9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200a9f:	48 89 10             	mov    %rdx,(%rax)
  8004200aa2:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200aa5:	89 c2                	mov    %eax,%edx
  8004200aa7:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200aae:	00 00 00 
  8004200ab1:	66 89 10             	mov    %dx,(%rax)
  8004200ab4:	c9                   	leaveq 
  8004200ab5:	c3                   	retq   

0000008004200ab6 <cga_putc>:
  8004200ab6:	55                   	push   %rbp
  8004200ab7:	48 89 e5             	mov    %rsp,%rbp
  8004200aba:	48 83 ec 40          	sub    $0x40,%rsp
  8004200abe:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200ac1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ac4:	b0 00                	mov    $0x0,%al
  8004200ac6:	85 c0                	test   %eax,%eax
  8004200ac8:	75 07                	jne    8004200ad1 <cga_putc+0x1b>
  8004200aca:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200ad1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad4:	0f b6 c0             	movzbl %al,%eax
  8004200ad7:	83 f8 09             	cmp    $0x9,%eax
  8004200ada:	0f 84 f6 00 00 00    	je     8004200bd6 <cga_putc+0x120>
  8004200ae0:	83 f8 09             	cmp    $0x9,%eax
  8004200ae3:	7f 0a                	jg     8004200aef <cga_putc+0x39>
  8004200ae5:	83 f8 08             	cmp    $0x8,%eax
  8004200ae8:	74 18                	je     8004200b02 <cga_putc+0x4c>
  8004200aea:	e9 3e 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200aef:	83 f8 0a             	cmp    $0xa,%eax
  8004200af2:	74 75                	je     8004200b69 <cga_putc+0xb3>
  8004200af4:	83 f8 0d             	cmp    $0xd,%eax
  8004200af7:	0f 84 89 00 00 00    	je     8004200b86 <cga_putc+0xd0>
  8004200afd:	e9 2b 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200b02:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b09:	00 00 00 
  8004200b0c:	0f b7 00             	movzwl (%rax),%eax
  8004200b0f:	66 85 c0             	test   %ax,%ax
  8004200b12:	74 50                	je     8004200b64 <cga_putc+0xae>
  8004200b14:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b1b:	00 00 00 
  8004200b1e:	0f b7 00             	movzwl (%rax),%eax
  8004200b21:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b24:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b2b:	00 00 00 
  8004200b2e:	66 89 10             	mov    %dx,(%rax)
  8004200b31:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200b38:	00 00 00 
  8004200b3b:	48 8b 10             	mov    (%rax),%rdx
  8004200b3e:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b45:	00 00 00 
  8004200b48:	0f b7 00             	movzwl (%rax),%eax
  8004200b4b:	0f b7 c0             	movzwl %ax,%eax
  8004200b4e:	48 01 c0             	add    %rax,%rax
  8004200b51:	48 01 c2             	add    %rax,%rdx
  8004200b54:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b57:	b0 00                	mov    $0x0,%al
  8004200b59:	83 c8 20             	or     $0x20,%eax
  8004200b5c:	66 89 02             	mov    %ax,(%rdx)
  8004200b5f:	e9 04 01 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b64:	e9 ff 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b69:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b70:	00 00 00 
  8004200b73:	0f b7 00             	movzwl (%rax),%eax
  8004200b76:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b79:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b80:	00 00 00 
  8004200b83:	66 89 10             	mov    %dx,(%rax)
  8004200b86:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b8d:	00 00 00 
  8004200b90:	0f b7 30             	movzwl (%rax),%esi
  8004200b93:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200b9a:	00 00 00 
  8004200b9d:	0f b7 08             	movzwl (%rax),%ecx
  8004200ba0:	0f b7 c1             	movzwl %cx,%eax
  8004200ba3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200ba9:	c1 e8 10             	shr    $0x10,%eax
  8004200bac:	89 c2                	mov    %eax,%edx
  8004200bae:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bb2:	89 d0                	mov    %edx,%eax
  8004200bb4:	c1 e0 02             	shl    $0x2,%eax
  8004200bb7:	01 d0                	add    %edx,%eax
  8004200bb9:	c1 e0 04             	shl    $0x4,%eax
  8004200bbc:	29 c1                	sub    %eax,%ecx
  8004200bbe:	89 ca                	mov    %ecx,%edx
  8004200bc0:	29 d6                	sub    %edx,%esi
  8004200bc2:	89 f2                	mov    %esi,%edx
  8004200bc4:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200bcb:	00 00 00 
  8004200bce:	66 89 10             	mov    %dx,(%rax)
  8004200bd1:	e9 92 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200bd6:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bdb:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200be2:	00 00 00 
  8004200be5:	ff d0                	callq  *%rax
  8004200be7:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bec:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200bf3:	00 00 00 
  8004200bf6:	ff d0                	callq  *%rax
  8004200bf8:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bfd:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c04:	00 00 00 
  8004200c07:	ff d0                	callq  *%rax
  8004200c09:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c0e:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c15:	00 00 00 
  8004200c18:	ff d0                	callq  *%rax
  8004200c1a:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1f:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c26:	00 00 00 
  8004200c29:	ff d0                	callq  *%rax
  8004200c2b:	eb 3b                	jmp    8004200c68 <cga_putc+0x1b2>
  8004200c2d:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200c34:	00 00 00 
  8004200c37:	48 8b 30             	mov    (%rax),%rsi
  8004200c3a:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200c41:	00 00 00 
  8004200c44:	0f b7 00             	movzwl (%rax),%eax
  8004200c47:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c4a:	48 ba 10 b0 4d 04 80 	movabs $0x80044db010,%rdx
  8004200c51:	00 00 00 
  8004200c54:	66 89 0a             	mov    %cx,(%rdx)
  8004200c57:	0f b7 c0             	movzwl %ax,%eax
  8004200c5a:	48 01 c0             	add    %rax,%rax
  8004200c5d:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c61:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c64:	66 89 02             	mov    %ax,(%rdx)
  8004200c67:	90                   	nop
  8004200c68:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200c6f:	00 00 00 
  8004200c72:	0f b7 00             	movzwl (%rax),%eax
  8004200c75:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c79:	0f 86 89 00 00 00    	jbe    8004200d08 <cga_putc+0x252>
  8004200c7f:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200c86:	00 00 00 
  8004200c89:	48 8b 00             	mov    (%rax),%rax
  8004200c8c:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c93:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200c9a:	00 00 00 
  8004200c9d:	48 8b 00             	mov    (%rax),%rax
  8004200ca0:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200ca5:	48 89 ce             	mov    %rcx,%rsi
  8004200ca8:	48 89 c7             	mov    %rax,%rdi
  8004200cab:	48 b8 be 09 21 04 80 	movabs $0x80042109be,%rax
  8004200cb2:	00 00 00 
  8004200cb5:	ff d0                	callq  *%rax
  8004200cb7:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cbe:	eb 22                	jmp    8004200ce2 <cga_putc+0x22c>
  8004200cc0:	48 b8 08 b0 4d 04 80 	movabs $0x80044db008,%rax
  8004200cc7:	00 00 00 
  8004200cca:	48 8b 00             	mov    (%rax),%rax
  8004200ccd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cd0:	48 63 d2             	movslq %edx,%rdx
  8004200cd3:	48 01 d2             	add    %rdx,%rdx
  8004200cd6:	48 01 d0             	add    %rdx,%rax
  8004200cd9:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cde:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200ce2:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200ce9:	7e d5                	jle    8004200cc0 <cga_putc+0x20a>
  8004200ceb:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200cf2:	00 00 00 
  8004200cf5:	0f b7 00             	movzwl (%rax),%eax
  8004200cf8:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200cfb:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200d02:	00 00 00 
  8004200d05:	66 89 10             	mov    %dx,(%rax)
  8004200d08:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200d0f:	00 00 00 
  8004200d12:	8b 00                	mov    (%rax),%eax
  8004200d14:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d17:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d1b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d1f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d22:	ee                   	out    %al,(%dx)
  8004200d23:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200d2a:	00 00 00 
  8004200d2d:	0f b7 00             	movzwl (%rax),%eax
  8004200d30:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d34:	0f b6 c0             	movzbl %al,%eax
  8004200d37:	48 ba 04 b0 4d 04 80 	movabs $0x80044db004,%rdx
  8004200d3e:	00 00 00 
  8004200d41:	8b 12                	mov    (%rdx),%edx
  8004200d43:	83 c2 01             	add    $0x1,%edx
  8004200d46:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d49:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d4c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d50:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d53:	ee                   	out    %al,(%dx)
  8004200d54:	48 b8 04 b0 4d 04 80 	movabs $0x80044db004,%rax
  8004200d5b:	00 00 00 
  8004200d5e:	8b 00                	mov    (%rax),%eax
  8004200d60:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d63:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d67:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d6b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d6e:	ee                   	out    %al,(%dx)
  8004200d6f:	48 b8 10 b0 4d 04 80 	movabs $0x80044db010,%rax
  8004200d76:	00 00 00 
  8004200d79:	0f b7 00             	movzwl (%rax),%eax
  8004200d7c:	0f b6 c0             	movzbl %al,%eax
  8004200d7f:	48 ba 04 b0 4d 04 80 	movabs $0x80044db004,%rdx
  8004200d86:	00 00 00 
  8004200d89:	8b 12                	mov    (%rdx),%edx
  8004200d8b:	83 c2 01             	add    $0x1,%edx
  8004200d8e:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d91:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200d94:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200d98:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200d9b:	ee                   	out    %al,(%dx)
  8004200d9c:	c9                   	leaveq 
  8004200d9d:	c3                   	retq   

0000008004200d9e <kbd_proc_data>:
  8004200d9e:	55                   	push   %rbp
  8004200d9f:	48 89 e5             	mov    %rsp,%rbp
  8004200da2:	48 83 ec 20          	sub    $0x20,%rsp
  8004200da6:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dad:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200db0:	89 c2                	mov    %eax,%edx
  8004200db2:	ec                   	in     (%dx),%al
  8004200db3:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200db6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dba:	0f b6 c0             	movzbl %al,%eax
  8004200dbd:	83 e0 01             	and    $0x1,%eax
  8004200dc0:	85 c0                	test   %eax,%eax
  8004200dc2:	75 0a                	jne    8004200dce <kbd_proc_data+0x30>
  8004200dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dc9:	e9 fc 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200dce:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dd5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200dd8:	89 c2                	mov    %eax,%edx
  8004200dda:	ec                   	in     (%dx),%al
  8004200ddb:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dde:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200de2:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200de5:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200de9:	75 27                	jne    8004200e12 <kbd_proc_data+0x74>
  8004200deb:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200df2:	00 00 00 
  8004200df5:	8b 00                	mov    (%rax),%eax
  8004200df7:	83 c8 40             	or     $0x40,%eax
  8004200dfa:	89 c2                	mov    %eax,%edx
  8004200dfc:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e03:	00 00 00 
  8004200e06:	89 10                	mov    %edx,(%rax)
  8004200e08:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e0d:	e9 b8 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e12:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e16:	84 c0                	test   %al,%al
  8004200e18:	79 65                	jns    8004200e7f <kbd_proc_data+0xe1>
  8004200e1a:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e21:	00 00 00 
  8004200e24:	8b 00                	mov    (%rax),%eax
  8004200e26:	83 e0 40             	and    $0x40,%eax
  8004200e29:	85 c0                	test   %eax,%eax
  8004200e2b:	75 09                	jne    8004200e36 <kbd_proc_data+0x98>
  8004200e2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e31:	83 e0 7f             	and    $0x7f,%eax
  8004200e34:	eb 04                	jmp    8004200e3a <kbd_proc_data+0x9c>
  8004200e36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3a:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e3d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e41:	48 ba 60 30 23 04 80 	movabs $0x8004233060,%rdx
  8004200e48:	00 00 00 
  8004200e4b:	48 98                	cltq   
  8004200e4d:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e51:	83 c8 40             	or     $0x40,%eax
  8004200e54:	0f b6 c0             	movzbl %al,%eax
  8004200e57:	f7 d0                	not    %eax
  8004200e59:	89 c2                	mov    %eax,%edx
  8004200e5b:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e62:	00 00 00 
  8004200e65:	8b 00                	mov    (%rax),%eax
  8004200e67:	21 c2                	and    %eax,%edx
  8004200e69:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e70:	00 00 00 
  8004200e73:	89 10                	mov    %edx,(%rax)
  8004200e75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e7a:	e9 4b 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e7f:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e86:	00 00 00 
  8004200e89:	8b 00                	mov    (%rax),%eax
  8004200e8b:	83 e0 40             	and    $0x40,%eax
  8004200e8e:	85 c0                	test   %eax,%eax
  8004200e90:	74 21                	je     8004200eb3 <kbd_proc_data+0x115>
  8004200e92:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200e96:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200e9d:	00 00 00 
  8004200ea0:	8b 00                	mov    (%rax),%eax
  8004200ea2:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200ea5:	89 c2                	mov    %eax,%edx
  8004200ea7:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200eae:	00 00 00 
  8004200eb1:	89 10                	mov    %edx,(%rax)
  8004200eb3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200eb7:	48 ba 60 30 23 04 80 	movabs $0x8004233060,%rdx
  8004200ebe:	00 00 00 
  8004200ec1:	48 98                	cltq   
  8004200ec3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ec7:	0f b6 d0             	movzbl %al,%edx
  8004200eca:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200ed1:	00 00 00 
  8004200ed4:	8b 00                	mov    (%rax),%eax
  8004200ed6:	09 c2                	or     %eax,%edx
  8004200ed8:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200edf:	00 00 00 
  8004200ee2:	89 10                	mov    %edx,(%rax)
  8004200ee4:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ee8:	48 ba 60 31 23 04 80 	movabs $0x8004233160,%rdx
  8004200eef:	00 00 00 
  8004200ef2:	48 98                	cltq   
  8004200ef4:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ef8:	0f b6 d0             	movzbl %al,%edx
  8004200efb:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f02:	00 00 00 
  8004200f05:	8b 00                	mov    (%rax),%eax
  8004200f07:	31 c2                	xor    %eax,%edx
  8004200f09:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f10:	00 00 00 
  8004200f13:	89 10                	mov    %edx,(%rax)
  8004200f15:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	8b 00                	mov    (%rax),%eax
  8004200f21:	83 e0 03             	and    $0x3,%eax
  8004200f24:	89 c2                	mov    %eax,%edx
  8004200f26:	48 b8 60 35 23 04 80 	movabs $0x8004233560,%rax
  8004200f2d:	00 00 00 
  8004200f30:	89 d2                	mov    %edx,%edx
  8004200f32:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f3a:	48 01 d0             	add    %rdx,%rax
  8004200f3d:	0f b6 00             	movzbl (%rax),%eax
  8004200f40:	0f b6 c0             	movzbl %al,%eax
  8004200f43:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f46:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f4d:	00 00 00 
  8004200f50:	8b 00                	mov    (%rax),%eax
  8004200f52:	83 e0 08             	and    $0x8,%eax
  8004200f55:	85 c0                	test   %eax,%eax
  8004200f57:	74 22                	je     8004200f7b <kbd_proc_data+0x1dd>
  8004200f59:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f5d:	7e 0c                	jle    8004200f6b <kbd_proc_data+0x1cd>
  8004200f5f:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f63:	7f 06                	jg     8004200f6b <kbd_proc_data+0x1cd>
  8004200f65:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f69:	eb 10                	jmp    8004200f7b <kbd_proc_data+0x1dd>
  8004200f6b:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f6f:	7e 0a                	jle    8004200f7b <kbd_proc_data+0x1dd>
  8004200f71:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f75:	7f 04                	jg     8004200f7b <kbd_proc_data+0x1dd>
  8004200f77:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f7b:	48 b8 28 b2 4d 04 80 	movabs $0x80044db228,%rax
  8004200f82:	00 00 00 
  8004200f85:	8b 00                	mov    (%rax),%eax
  8004200f87:	f7 d0                	not    %eax
  8004200f89:	83 e0 06             	and    $0x6,%eax
  8004200f8c:	85 c0                	test   %eax,%eax
  8004200f8e:	75 37                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f90:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200f97:	75 2e                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f99:	48 bf f6 cd 21 04 80 	movabs $0x800421cdf6,%rdi
  8004200fa0:	00 00 00 
  8004200fa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fa8:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004200faf:	00 00 00 
  8004200fb2:	ff d2                	callq  *%rdx
  8004200fb4:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fbb:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fbf:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fc3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fc6:	ee                   	out    %al,(%dx)
  8004200fc7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fca:	c9                   	leaveq 
  8004200fcb:	c3                   	retq   

0000008004200fcc <kbd_intr>:
  8004200fcc:	55                   	push   %rbp
  8004200fcd:	48 89 e5             	mov    %rsp,%rbp
  8004200fd0:	48 bf 9e 0d 20 04 80 	movabs $0x8004200d9e,%rdi
  8004200fd7:	00 00 00 
  8004200fda:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  8004200fe1:	00 00 00 
  8004200fe4:	ff d0                	callq  *%rax
  8004200fe6:	5d                   	pop    %rbp
  8004200fe7:	c3                   	retq   

0000008004200fe8 <kbd_init>:
  8004200fe8:	55                   	push   %rbp
  8004200fe9:	48 89 e5             	mov    %rsp,%rbp
  8004200fec:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  8004200ff3:	00 00 00 
  8004200ff6:	ff d0                	callq  *%rax
  8004200ff8:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004200fff:	00 00 00 
  8004201002:	0f b7 00             	movzwl (%rax),%eax
  8004201005:	0f b7 c0             	movzwl %ax,%eax
  8004201008:	25 fd ff 00 00       	and    $0xfffd,%eax
  800420100d:	89 c7                	mov    %eax,%edi
  800420100f:	48 b8 66 9a 20 04 80 	movabs $0x8004209a66,%rax
  8004201016:	00 00 00 
  8004201019:	ff d0                	callq  *%rax
  800420101b:	5d                   	pop    %rbp
  800420101c:	c3                   	retq   

000000800420101d <cons_intr>:
  800420101d:	55                   	push   %rbp
  800420101e:	48 89 e5             	mov    %rsp,%rbp
  8004201021:	48 83 ec 20          	sub    $0x20,%rsp
  8004201025:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201029:	eb 6a                	jmp    8004201095 <cons_intr+0x78>
  800420102b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420102f:	75 02                	jne    8004201033 <cons_intr+0x16>
  8004201031:	eb 62                	jmp    8004201095 <cons_intr+0x78>
  8004201033:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  800420103a:	00 00 00 
  800420103d:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201043:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201046:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  800420104d:	00 00 00 
  8004201050:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201056:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201059:	89 d1                	mov    %edx,%ecx
  800420105b:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  8004201062:	00 00 00 
  8004201065:	89 c0                	mov    %eax,%eax
  8004201067:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420106a:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  8004201071:	00 00 00 
  8004201074:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420107a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420107f:	75 14                	jne    8004201095 <cons_intr+0x78>
  8004201081:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  8004201088:	00 00 00 
  800420108b:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  8004201092:	00 00 00 
  8004201095:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201099:	ff d0                	callq  *%rax
  800420109b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420109e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010a2:	75 87                	jne    800420102b <cons_intr+0xe>
  80042010a4:	c9                   	leaveq 
  80042010a5:	c3                   	retq   

00000080042010a6 <cons_getc>:
  80042010a6:	55                   	push   %rbp
  80042010a7:	48 89 e5             	mov    %rsp,%rbp
  80042010aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ae:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  80042010b5:	00 00 00 
  80042010b8:	ff d0                	callq  *%rax
  80042010ba:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  80042010cd:	00 00 00 
  80042010d0:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010d6:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  80042010dd:	00 00 00 
  80042010e0:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010e6:	39 c2                	cmp    %eax,%edx
  80042010e8:	74 69                	je     8004201153 <cons_getc+0xad>
  80042010ea:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  80042010f1:	00 00 00 
  80042010f4:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  80042010fa:	8d 48 01             	lea    0x1(%rax),%ecx
  80042010fd:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  8004201104:	00 00 00 
  8004201107:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  800420110d:	48 ba 20 b0 4d 04 80 	movabs $0x80044db020,%rdx
  8004201114:	00 00 00 
  8004201117:	89 c0                	mov    %eax,%eax
  8004201119:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420111d:	0f b6 c0             	movzbl %al,%eax
  8004201120:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201123:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  800420112a:	00 00 00 
  800420112d:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201133:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201138:	75 14                	jne    800420114e <cons_getc+0xa8>
  800420113a:	48 b8 20 b0 4d 04 80 	movabs $0x80044db020,%rax
  8004201141:	00 00 00 
  8004201144:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  800420114b:	00 00 00 
  800420114e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201151:	eb 05                	jmp    8004201158 <cons_getc+0xb2>
  8004201153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201158:	c9                   	leaveq 
  8004201159:	c3                   	retq   

000000800420115a <cons_putc>:
  800420115a:	55                   	push   %rbp
  800420115b:	48 89 e5             	mov    %rsp,%rbp
  800420115e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201162:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201165:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201168:	89 c7                	mov    %eax,%edi
  800420116a:	48 b8 aa 07 20 04 80 	movabs $0x80042007aa,%rax
  8004201171:	00 00 00 
  8004201174:	ff d0                	callq  *%rax
  8004201176:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201179:	89 c7                	mov    %eax,%edi
  800420117b:	48 b8 17 09 20 04 80 	movabs $0x8004200917,%rax
  8004201182:	00 00 00 
  8004201185:	ff d0                	callq  *%rax
  8004201187:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420118a:	89 c7                	mov    %eax,%edi
  800420118c:	48 b8 b6 0a 20 04 80 	movabs $0x8004200ab6,%rax
  8004201193:	00 00 00 
  8004201196:	ff d0                	callq  *%rax
  8004201198:	c9                   	leaveq 
  8004201199:	c3                   	retq   

000000800420119a <cons_init>:
  800420119a:	55                   	push   %rbp
  800420119b:	48 89 e5             	mov    %rsp,%rbp
  800420119e:	48 b8 9c 09 20 04 80 	movabs $0x800420099c,%rax
  80042011a5:	00 00 00 
  80042011a8:	ff d0                	callq  *%rax
  80042011aa:	48 b8 e8 0f 20 04 80 	movabs $0x8004200fe8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 0f 08 20 04 80 	movabs $0x800420080f,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 00 b0 4d 04 80 	movabs $0x80044db000,%rax
  80042011c9:	00 00 00 
  80042011cc:	0f b6 00             	movzbl (%rax),%eax
  80042011cf:	83 f0 01             	xor    $0x1,%eax
  80042011d2:	84 c0                	test   %al,%al
  80042011d4:	74 1b                	je     80042011f1 <cons_init+0x57>
  80042011d6:	48 bf 02 ce 21 04 80 	movabs $0x800421ce02,%rdi
  80042011dd:	00 00 00 
  80042011e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011e5:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042011ec:	00 00 00 
  80042011ef:	ff d2                	callq  *%rdx
  80042011f1:	5d                   	pop    %rbp
  80042011f2:	c3                   	retq   

00000080042011f3 <cputchar>:
  80042011f3:	55                   	push   %rbp
  80042011f4:	48 89 e5             	mov    %rsp,%rbp
  80042011f7:	48 83 ec 10          	sub    $0x10,%rsp
  80042011fb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042011fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201201:	89 c7                	mov    %eax,%edi
  8004201203:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  800420120a:	00 00 00 
  800420120d:	ff d0                	callq  *%rax
  800420120f:	c9                   	leaveq 
  8004201210:	c3                   	retq   

0000008004201211 <getchar>:
  8004201211:	55                   	push   %rbp
  8004201212:	48 89 e5             	mov    %rsp,%rbp
  8004201215:	48 83 ec 10          	sub    $0x10,%rsp
  8004201219:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  8004201220:	00 00 00 
  8004201223:	ff d0                	callq  *%rax
  8004201225:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201228:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420122c:	74 eb                	je     8004201219 <getchar+0x8>
  800420122e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201231:	c9                   	leaveq 
  8004201232:	c3                   	retq   

0000008004201233 <iscons>:
  8004201233:	55                   	push   %rbp
  8004201234:	48 89 e5             	mov    %rsp,%rbp
  8004201237:	48 83 ec 04          	sub    $0x4,%rsp
  800420123b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420123e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201243:	c9                   	leaveq 
  8004201244:	c3                   	retq   

0000008004201245 <mon_help>:
  8004201245:	55                   	push   %rbp
  8004201246:	48 89 e5             	mov    %rsp,%rbp
  8004201249:	48 83 ec 30          	sub    $0x30,%rsp
  800420124d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201250:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201254:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201258:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420125f:	eb 6c                	jmp    80042012cd <mon_help+0x88>
  8004201261:	48 b9 80 35 23 04 80 	movabs $0x8004233580,%rcx
  8004201268:	00 00 00 
  800420126b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420126e:	48 63 d0             	movslq %eax,%rdx
  8004201271:	48 89 d0             	mov    %rdx,%rax
  8004201274:	48 01 c0             	add    %rax,%rax
  8004201277:	48 01 d0             	add    %rdx,%rax
  800420127a:	48 c1 e0 03          	shl    $0x3,%rax
  800420127e:	48 01 c8             	add    %rcx,%rax
  8004201281:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201285:	48 be 80 35 23 04 80 	movabs $0x8004233580,%rsi
  800420128c:	00 00 00 
  800420128f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201292:	48 63 d0             	movslq %eax,%rdx
  8004201295:	48 89 d0             	mov    %rdx,%rax
  8004201298:	48 01 c0             	add    %rax,%rax
  800420129b:	48 01 d0             	add    %rdx,%rax
  800420129e:	48 c1 e0 03          	shl    $0x3,%rax
  80042012a2:	48 01 f0             	add    %rsi,%rax
  80042012a5:	48 8b 00             	mov    (%rax),%rax
  80042012a8:	48 89 ca             	mov    %rcx,%rdx
  80042012ab:	48 89 c6             	mov    %rax,%rsi
  80042012ae:	48 bf b6 ce 21 04 80 	movabs $0x800421ceb6,%rdi
  80042012b5:	00 00 00 
  80042012b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012bd:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  80042012c4:	00 00 00 
  80042012c7:	ff d1                	callq  *%rcx
  80042012c9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d0:	83 f8 03             	cmp    $0x3,%eax
  80042012d3:	76 8c                	jbe    8004201261 <mon_help+0x1c>
  80042012d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012da:	c9                   	leaveq 
  80042012db:	c3                   	retq   

00000080042012dc <mon_kerninfo>:
  80042012dc:	55                   	push   %rbp
  80042012dd:	48 89 e5             	mov    %rsp,%rbp
  80042012e0:	48 83 ec 30          	sub    $0x30,%rsp
  80042012e4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012ef:	48 bf bf ce 21 04 80 	movabs $0x800421cebf,%rdi
  80042012f6:	00 00 00 
  80042012f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012fe:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201305:	00 00 00 
  8004201308:	ff d2                	callq  *%rdx
  800420130a:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201311:	00 00 00 
  8004201314:	48 bf d8 ce 21 04 80 	movabs $0x800421ced8,%rdi
  800420131b:	00 00 00 
  800420131e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201323:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420132a:	00 00 00 
  800420132d:	ff d2                	callq  *%rdx
  800420132f:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201336:	00 00 00 
  8004201339:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201340:	00 00 00 
  8004201343:	48 bf 00 cf 21 04 80 	movabs $0x800421cf00,%rdi
  800420134a:	00 00 00 
  800420134d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201352:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  8004201359:	00 00 00 
  800420135c:	ff d1                	callq  *%rcx
  800420135e:	48 ba 03 cd 21 00 00 	movabs $0x21cd03,%rdx
  8004201365:	00 00 00 
  8004201368:	48 be 03 cd 21 04 80 	movabs $0x800421cd03,%rsi
  800420136f:	00 00 00 
  8004201372:	48 bf 28 cf 21 04 80 	movabs $0x800421cf28,%rdi
  8004201379:	00 00 00 
  800420137c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201381:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  8004201388:	00 00 00 
  800420138b:	ff d1                	callq  *%rcx
  800420138d:	48 ba a0 a1 4d 00 00 	movabs $0x4da1a0,%rdx
  8004201394:	00 00 00 
  8004201397:	48 be a0 a1 4d 04 80 	movabs $0x80044da1a0,%rsi
  800420139e:	00 00 00 
  80042013a1:	48 bf 50 cf 21 04 80 	movabs $0x800421cf50,%rdi
  80042013a8:	00 00 00 
  80042013ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013b0:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  80042013b7:	00 00 00 
  80042013ba:	ff d1                	callq  *%rcx
  80042013bc:	48 ba 10 d0 71 00 00 	movabs $0x71d010,%rdx
  80042013c3:	00 00 00 
  80042013c6:	48 be 10 d0 71 04 80 	movabs $0x800471d010,%rsi
  80042013cd:	00 00 00 
  80042013d0:	48 bf 78 cf 21 04 80 	movabs $0x800421cf78,%rdi
  80042013d7:	00 00 00 
  80042013da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013df:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  80042013e6:	00 00 00 
  80042013e9:	ff d1                	callq  *%rcx
  80042013eb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013f2:	00 
  80042013f3:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  80042013fa:	00 00 00 
  80042013fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201401:	48 29 c2             	sub    %rax,%rdx
  8004201404:	48 b8 10 d0 71 04 80 	movabs $0x800471d010,%rax
  800420140b:	00 00 00 
  800420140e:	48 83 e8 01          	sub    $0x1,%rax
  8004201412:	48 01 d0             	add    %rdx,%rax
  8004201415:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420141d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201422:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201426:	48 89 d0             	mov    %rdx,%rax
  8004201429:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420142d:	48 29 c2             	sub    %rax,%rdx
  8004201430:	48 89 d0             	mov    %rdx,%rax
  8004201433:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800420143a:	48 85 c0             	test   %rax,%rax
  800420143d:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201441:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201445:	48 89 c6             	mov    %rax,%rsi
  8004201448:	48 bf a0 cf 21 04 80 	movabs $0x800421cfa0,%rdi
  800420144f:	00 00 00 
  8004201452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201457:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420145e:	00 00 00 
  8004201461:	ff d2                	callq  *%rdx
  8004201463:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201468:	c9                   	leaveq 
  8004201469:	c3                   	retq   

000000800420146a <mon_backtrace>:
  800420146a:	55                   	push   %rbp
  800420146b:	48 89 e5             	mov    %rsp,%rbp
  800420146e:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201475:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  800420147b:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  8004201482:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201489:	48 89 e8             	mov    %rbp,%rax
  800420148c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  8004201490:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201494:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  8004201498:	48 89 e0             	mov    %rsp,%rax
  800420149b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  800420149f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014a7:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ae:	00 
  80042014af:	74 21                	je     80042014d2 <mon_backtrace+0x68>
  80042014b1:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014b8:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014c0:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c7:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014d9 <mon_backtrace+0x6f>
  80042014d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014dd:	48 bf ca cf 21 04 80 	movabs $0x800421cfca,%rdi
  80042014e4:	00 00 00 
  80042014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ec:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042014f3:	00 00 00 
  80042014f6:	ff d2                	callq  *%rdx
  80042014f8:	e9 17 03 00 00       	jmpq   8004201814 <mon_backtrace+0x3aa>
  80042014fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201505:	48 89 c6             	mov    %rax,%rsi
  8004201508:	48 bf dc cf 21 04 80 	movabs $0x800421cfdc,%rdi
  800420150f:	00 00 00 
  8004201512:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201517:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800420151e:	00 00 00 
  8004201521:	ff d1                	callq  *%rcx
  8004201523:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  800420152a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420152e:	48 89 d6             	mov    %rdx,%rsi
  8004201531:	48 89 c7             	mov    %rax,%rdi
  8004201534:	48 b8 9f f5 20 04 80 	movabs $0x800420f59f,%rax
  800420153b:	00 00 00 
  800420153e:	ff d0                	callq  *%rax
  8004201540:	85 c0                	test   %eax,%eax
  8004201542:	0f 88 9a 02 00 00    	js     80042017e2 <mon_backtrace+0x378>
  8004201548:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420154f:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201555:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201559:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  8004201560:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201564:	48 89 d7             	mov    %rdx,%rdi
  8004201567:	48 29 c7             	sub    %rax,%rdi
  800420156a:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  8004201571:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201577:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  800420157d:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201584:	49 89 f9             	mov    %rdi,%r9
  8004201587:	49 89 f0             	mov    %rsi,%r8
  800420158a:	48 89 c6             	mov    %rax,%rsi
  800420158d:	48 bf f8 cf 21 04 80 	movabs $0x800421cff8,%rdi
  8004201594:	00 00 00 
  8004201597:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159c:	49 ba 14 9c 20 04 80 	movabs $0x8004209c14,%r10
  80042015a3:	00 00 00 
  80042015a6:	41 ff d2             	callq  *%r10
  80042015a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ad:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015b1:	66 83 f8 06          	cmp    $0x6,%ax
  80042015b5:	75 15                	jne    80042015cc <mon_backtrace+0x162>
  80042015b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015bb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015c3:	48 01 d0             	add    %rdx,%rax
  80042015c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ca:	eb 28                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015d0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015d4:	66 83 f8 07          	cmp    $0x7,%ax
  80042015d8:	75 15                	jne    80042015ef <mon_backtrace+0x185>
  80042015da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015de:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015e6:	48 01 d0             	add    %rdx,%rax
  80042015e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ed:	eb 05                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015ef:	e9 ee 01 00 00       	jmpq   80042017e2 <mon_backtrace+0x378>
  80042015f4:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  80042015fa:	89 c6                	mov    %eax,%esi
  80042015fc:	48 bf 13 d0 21 04 80 	movabs $0x800421d013,%rdi
  8004201603:	00 00 00 
  8004201606:	b8 00 00 00 00       	mov    $0x0,%eax
  800420160b:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201612:	00 00 00 
  8004201615:	ff d2                	callq  *%rdx
  8004201617:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420161e:	e9 f2 00 00 00       	jmpq   8004201715 <mon_backtrace+0x2ab>
  8004201623:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201626:	48 98                	cltq   
  8004201628:	48 83 c0 0a          	add    $0xa,%rax
  800420162c:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  8004201633:	ff 
  8004201634:	48 85 c0             	test   %rax,%rax
  8004201637:	75 35                	jne    800420166e <mon_backtrace+0x204>
  8004201639:	48 b9 1e d0 21 04 80 	movabs $0x800421d01e,%rcx
  8004201640:	00 00 00 
  8004201643:	48 ba 34 d0 21 04 80 	movabs $0x800421d034,%rdx
  800420164a:	00 00 00 
  800420164d:	be 78 00 00 00       	mov    $0x78,%esi
  8004201652:	48 bf 49 d0 21 04 80 	movabs $0x800421d049,%rdi
  8004201659:	00 00 00 
  800420165c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201661:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201668:	00 00 00 
  800420166b:	41 ff d0             	callq  *%r8
  800420166e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201671:	48 98                	cltq   
  8004201673:	48 83 c0 0a          	add    $0xa,%rax
  8004201677:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420167e:	ff 
  800420167f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201683:	48 01 d0             	add    %rdx,%rax
  8004201686:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420168a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420168d:	48 98                	cltq   
  800420168f:	48 83 c0 08          	add    $0x8,%rax
  8004201693:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  800420169a:	83 f8 02             	cmp    $0x2,%eax
  800420169d:	74 31                	je     80042016d0 <mon_backtrace+0x266>
  800420169f:	83 f8 02             	cmp    $0x2,%eax
  80042016a2:	7f 07                	jg     80042016ab <mon_backtrace+0x241>
  80042016a4:	83 f8 01             	cmp    $0x1,%eax
  80042016a7:	74 37                	je     80042016e0 <mon_backtrace+0x276>
  80042016a9:	eb 44                	jmp    80042016ef <mon_backtrace+0x285>
  80042016ab:	83 f8 04             	cmp    $0x4,%eax
  80042016ae:	74 12                	je     80042016c2 <mon_backtrace+0x258>
  80042016b0:	83 f8 08             	cmp    $0x8,%eax
  80042016b3:	75 3a                	jne    80042016ef <mon_backtrace+0x285>
  80042016b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016b9:	48 8b 00             	mov    (%rax),%rax
  80042016bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016c0:	eb 2d                	jmp    80042016ef <mon_backtrace+0x285>
  80042016c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c6:	8b 00                	mov    (%rax),%eax
  80042016c8:	89 c0                	mov    %eax,%eax
  80042016ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ce:	eb 1f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d4:	0f b7 00             	movzwl (%rax),%eax
  80042016d7:	0f b7 c0             	movzwl %ax,%eax
  80042016da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016de:	eb 0f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e4:	0f b6 00             	movzbl (%rax),%eax
  80042016e7:	0f b6 c0             	movzbl %al,%eax
  80042016ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ee:	90                   	nop
  80042016ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016f3:	48 89 c6             	mov    %rax,%rsi
  80042016f6:	48 bf 5b d0 21 04 80 	movabs $0x800421d05b,%rdi
  80042016fd:	00 00 00 
  8004201700:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201705:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420170c:	00 00 00 
  800420170f:	ff d2                	callq  *%rdx
  8004201711:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201715:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  800420171b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420171e:	0f 8f ff fe ff ff    	jg     8004201623 <mon_backtrace+0x1b9>
  8004201724:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  800420172b:	0f b7 c0             	movzwl %ax,%eax
  800420172e:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201733:	74 48                	je     800420177d <mon_backtrace+0x313>
  8004201735:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  800420173a:	75 17                	jne    8004201753 <mon_backtrace+0x2e9>
  800420173c:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  8004201743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201747:	48 01 d0             	add    %rdx,%rax
  800420174a:	48 8b 00             	mov    (%rax),%rax
  800420174d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201751:	eb 2b                	jmp    800420177e <mon_backtrace+0x314>
  8004201753:	48 ba 62 d0 21 04 80 	movabs $0x800421d062,%rdx
  800420175a:	00 00 00 
  800420175d:	be 92 00 00 00       	mov    $0x92,%esi
  8004201762:	48 bf 49 d0 21 04 80 	movabs $0x800421d049,%rdi
  8004201769:	00 00 00 
  800420176c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201771:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201778:	00 00 00 
  800420177b:	ff d1                	callq  *%rcx
  800420177d:	90                   	nop
  800420177e:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201785:	0f b7 c0             	movzwl %ax,%eax
  8004201788:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420178d:	74 48                	je     80042017d7 <mon_backtrace+0x36d>
  800420178f:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201794:	75 17                	jne    80042017ad <mon_backtrace+0x343>
  8004201796:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  800420179d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017a1:	48 01 d0             	add    %rdx,%rax
  80042017a4:	48 8b 00             	mov    (%rax),%rax
  80042017a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ab:	eb 2b                	jmp    80042017d8 <mon_backtrace+0x36e>
  80042017ad:	48 ba 62 d0 21 04 80 	movabs $0x800421d062,%rdx
  80042017b4:	00 00 00 
  80042017b7:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017bc:	48 bf 49 d0 21 04 80 	movabs $0x800421d049,%rdi
  80042017c3:	00 00 00 
  80042017c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017cb:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042017d2:	00 00 00 
  80042017d5:	ff d1                	callq  *%rcx
  80042017d7:	90                   	nop
  80042017d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017e0:	eb 17                	jmp    80042017f9 <mon_backtrace+0x38f>
  80042017e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 00             	mov    (%rax),%rax
  80042017f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042017f9:	48 bf 73 d0 21 04 80 	movabs $0x800421d073,%rdi
  8004201800:	00 00 00 
  8004201803:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201808:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420180f:	00 00 00 
  8004201812:	ff d2                	callq  *%rdx
  8004201814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201819:	0f 85 de fc ff ff    	jne    80042014fd <mon_backtrace+0x93>
  800420181f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201824:	c9                   	leaveq 
  8004201825:	c3                   	retq   

0000008004201826 <mon_exit>:
  8004201826:	55                   	push   %rbp
  8004201827:	48 89 e5             	mov    %rsp,%rbp
  800420182a:	48 83 ec 18          	sub    $0x18,%rsp
  800420182e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201831:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201835:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201839:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420183e:	c9                   	leaveq 
  800420183f:	c3                   	retq   

0000008004201840 <runcmd>:
  8004201840:	55                   	push   %rbp
  8004201841:	48 89 e5             	mov    %rsp,%rbp
  8004201844:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420184b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004201852:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201859:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201860:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201863:	48 98                	cltq   
  8004201865:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  800420186c:	ff 00 00 00 00 
  8004201871:	eb 15                	jmp    8004201888 <runcmd+0x48>
  8004201873:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420187a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420187e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201885:	c6 00 00             	movb   $0x0,(%rax)
  8004201888:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420188f:	0f b6 00             	movzbl (%rax),%eax
  8004201892:	84 c0                	test   %al,%al
  8004201894:	74 2a                	je     80042018c0 <runcmd+0x80>
  8004201896:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189d:	0f b6 00             	movzbl (%rax),%eax
  80042018a0:	0f be c0             	movsbl %al,%eax
  80042018a3:	89 c6                	mov    %eax,%esi
  80042018a5:	48 bf 75 d0 21 04 80 	movabs $0x800421d075,%rdi
  80042018ac:	00 00 00 
  80042018af:	48 b8 c0 08 21 04 80 	movabs $0x80042108c0,%rax
  80042018b6:	00 00 00 
  80042018b9:	ff d0                	callq  *%rax
  80042018bb:	48 85 c0             	test   %rax,%rax
  80042018be:	75 b3                	jne    8004201873 <runcmd+0x33>
  80042018c0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018c7:	0f b6 00             	movzbl (%rax),%eax
  80042018ca:	84 c0                	test   %al,%al
  80042018cc:	75 21                	jne    80042018ef <runcmd+0xaf>
  80042018ce:	90                   	nop
  80042018cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018d2:	48 98                	cltq   
  80042018d4:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018db:	ff 00 00 00 00 
  80042018e0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018e4:	0f 85 a1 00 00 00    	jne    800420198b <runcmd+0x14b>
  80042018ea:	e9 92 00 00 00       	jmpq   8004201981 <runcmd+0x141>
  80042018ef:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018f3:	75 2a                	jne    800420191f <runcmd+0xdf>
  80042018f5:	be 10 00 00 00       	mov    $0x10,%esi
  80042018fa:	48 bf 7a d0 21 04 80 	movabs $0x800421d07a,%rdi
  8004201901:	00 00 00 
  8004201904:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201909:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201910:	00 00 00 
  8004201913:	ff d2                	callq  *%rdx
  8004201915:	b8 00 00 00 00       	mov    $0x0,%eax
  800420191a:	e9 30 01 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420191f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201922:	8d 50 01             	lea    0x1(%rax),%edx
  8004201925:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201928:	48 98                	cltq   
  800420192a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201931:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201938:	ff 
  8004201939:	eb 08                	jmp    8004201943 <runcmd+0x103>
  800420193b:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201942:	01 
  8004201943:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420194a:	0f b6 00             	movzbl (%rax),%eax
  800420194d:	84 c0                	test   %al,%al
  800420194f:	74 2a                	je     800420197b <runcmd+0x13b>
  8004201951:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201958:	0f b6 00             	movzbl (%rax),%eax
  800420195b:	0f be c0             	movsbl %al,%eax
  800420195e:	89 c6                	mov    %eax,%esi
  8004201960:	48 bf 75 d0 21 04 80 	movabs $0x800421d075,%rdi
  8004201967:	00 00 00 
  800420196a:	48 b8 c0 08 21 04 80 	movabs $0x80042108c0,%rax
  8004201971:	00 00 00 
  8004201974:	ff d0                	callq  *%rax
  8004201976:	48 85 c0             	test   %rax,%rax
  8004201979:	74 c0                	je     800420193b <runcmd+0xfb>
  800420197b:	90                   	nop
  800420197c:	e9 07 ff ff ff       	jmpq   8004201888 <runcmd+0x48>
  8004201981:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201986:	e9 c4 00 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420198b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201992:	e9 82 00 00 00       	jmpq   8004201a19 <runcmd+0x1d9>
  8004201997:	48 b9 80 35 23 04 80 	movabs $0x8004233580,%rcx
  800420199e:	00 00 00 
  80042019a1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019a4:	48 63 d0             	movslq %eax,%rdx
  80042019a7:	48 89 d0             	mov    %rdx,%rax
  80042019aa:	48 01 c0             	add    %rax,%rax
  80042019ad:	48 01 d0             	add    %rdx,%rax
  80042019b0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019b4:	48 01 c8             	add    %rcx,%rax
  80042019b7:	48 8b 10             	mov    (%rax),%rdx
  80042019ba:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019c1:	48 89 d6             	mov    %rdx,%rsi
  80042019c4:	48 89 c7             	mov    %rax,%rdi
  80042019c7:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  80042019ce:	00 00 00 
  80042019d1:	ff d0                	callq  *%rax
  80042019d3:	85 c0                	test   %eax,%eax
  80042019d5:	75 3e                	jne    8004201a15 <runcmd+0x1d5>
  80042019d7:	48 b9 80 35 23 04 80 	movabs $0x8004233580,%rcx
  80042019de:	00 00 00 
  80042019e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019e4:	48 63 d0             	movslq %eax,%rdx
  80042019e7:	48 89 d0             	mov    %rdx,%rax
  80042019ea:	48 01 c0             	add    %rax,%rax
  80042019ed:	48 01 d0             	add    %rdx,%rax
  80042019f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019f4:	48 01 c8             	add    %rcx,%rax
  80042019f7:	48 83 c0 10          	add    $0x10,%rax
  80042019fb:	48 8b 00             	mov    (%rax),%rax
  80042019fe:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a05:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a0c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a0f:	89 cf                	mov    %ecx,%edi
  8004201a11:	ff d0                	callq  *%rax
  8004201a13:	eb 3a                	jmp    8004201a4f <runcmd+0x20f>
  8004201a15:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a1c:	83 f8 03             	cmp    $0x3,%eax
  8004201a1f:	0f 86 72 ff ff ff    	jbe    8004201997 <runcmd+0x157>
  8004201a25:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a2c:	48 89 c6             	mov    %rax,%rsi
  8004201a2f:	48 bf 97 d0 21 04 80 	movabs $0x800421d097,%rdi
  8004201a36:	00 00 00 
  8004201a39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a3e:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201a45:	00 00 00 
  8004201a48:	ff d2                	callq  *%rdx
  8004201a4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4f:	c9                   	leaveq 
  8004201a50:	c3                   	retq   

0000008004201a51 <monitor>:
  8004201a51:	55                   	push   %rbp
  8004201a52:	48 89 e5             	mov    %rsp,%rbp
  8004201a55:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a5d:	48 bf b0 d0 21 04 80 	movabs $0x800421d0b0,%rdi
  8004201a64:	00 00 00 
  8004201a67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a6c:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201a73:	00 00 00 
  8004201a76:	ff d2                	callq  *%rdx
  8004201a78:	48 bf d8 d0 21 04 80 	movabs $0x800421d0d8,%rdi
  8004201a7f:	00 00 00 
  8004201a82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a87:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201a8e:	00 00 00 
  8004201a91:	ff d2                	callq  *%rdx
  8004201a93:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201a98:	74 13                	je     8004201aad <monitor+0x5c>
  8004201a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201a9e:	48 89 c7             	mov    %rax,%rdi
  8004201aa1:	48 b8 0b c9 20 04 80 	movabs $0x800420c90b,%rax
  8004201aa8:	00 00 00 
  8004201aab:	ff d0                	callq  *%rax
  8004201aad:	48 bf fd d0 21 04 80 	movabs $0x800421d0fd,%rdi
  8004201ab4:	00 00 00 
  8004201ab7:	48 b8 d9 04 21 04 80 	movabs $0x80042104d9,%rax
  8004201abe:	00 00 00 
  8004201ac1:	ff d0                	callq  *%rax
  8004201ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ac7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201acc:	74 20                	je     8004201aee <monitor+0x9d>
  8004201ace:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ad6:	48 89 d6             	mov    %rdx,%rsi
  8004201ad9:	48 89 c7             	mov    %rax,%rdi
  8004201adc:	48 b8 40 18 20 04 80 	movabs $0x8004201840,%rax
  8004201ae3:	00 00 00 
  8004201ae6:	ff d0                	callq  *%rax
  8004201ae8:	85 c0                	test   %eax,%eax
  8004201aea:	79 02                	jns    8004201aee <monitor+0x9d>
  8004201aec:	eb 02                	jmp    8004201af0 <monitor+0x9f>
  8004201aee:	eb bd                	jmp    8004201aad <monitor+0x5c>
  8004201af0:	c9                   	leaveq 
  8004201af1:	c3                   	retq   

0000008004201af2 <page2ppn>:
  8004201af2:	55                   	push   %rbp
  8004201af3:	48 89 e5             	mov    %rsp,%rbp
  8004201af6:	48 83 ec 08          	sub    $0x8,%rsp
  8004201afa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201afe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b02:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004201b09:	00 00 00 
  8004201b0c:	48 8b 00             	mov    (%rax),%rax
  8004201b0f:	48 29 c2             	sub    %rax,%rdx
  8004201b12:	48 89 d0             	mov    %rdx,%rax
  8004201b15:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b19:	c9                   	leaveq 
  8004201b1a:	c3                   	retq   

0000008004201b1b <page2pa>:
  8004201b1b:	55                   	push   %rbp
  8004201b1c:	48 89 e5             	mov    %rsp,%rbp
  8004201b1f:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b2b:	48 89 c7             	mov    %rax,%rdi
  8004201b2e:	48 b8 f2 1a 20 04 80 	movabs $0x8004201af2,%rax
  8004201b35:	00 00 00 
  8004201b38:	ff d0                	callq  *%rax
  8004201b3a:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b3e:	c9                   	leaveq 
  8004201b3f:	c3                   	retq   

0000008004201b40 <pa2page>:
  8004201b40:	55                   	push   %rbp
  8004201b41:	48 89 e5             	mov    %rsp,%rbp
  8004201b44:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b54:	48 89 c2             	mov    %rax,%rdx
  8004201b57:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004201b5e:	00 00 00 
  8004201b61:	48 8b 00             	mov    (%rax),%rax
  8004201b64:	48 39 c2             	cmp    %rax,%rdx
  8004201b67:	72 2a                	jb     8004201b93 <pa2page+0x53>
  8004201b69:	48 ba 08 d1 21 04 80 	movabs $0x800421d108,%rdx
  8004201b70:	00 00 00 
  8004201b73:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b78:	48 bf 27 d1 21 04 80 	movabs $0x800421d127,%rdi
  8004201b7f:	00 00 00 
  8004201b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b87:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201b8e:	00 00 00 
  8004201b91:	ff d1                	callq  *%rcx
  8004201b93:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004201b9a:	00 00 00 
  8004201b9d:	48 8b 00             	mov    (%rax),%rax
  8004201ba0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201ba4:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201ba8:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bac:	48 01 d0             	add    %rdx,%rax
  8004201baf:	c9                   	leaveq 
  8004201bb0:	c3                   	retq   

0000008004201bb1 <page2kva>:
  8004201bb1:	55                   	push   %rbp
  8004201bb2:	48 89 e5             	mov    %rsp,%rbp
  8004201bb5:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bc1:	48 89 c7             	mov    %rax,%rdi
  8004201bc4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004201bcb:	00 00 00 
  8004201bce:	ff d0                	callq  *%rax
  8004201bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bd8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201bdc:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201bdf:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201be2:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004201be9:	00 00 00 
  8004201bec:	48 8b 00             	mov    (%rax),%rax
  8004201bef:	48 39 c2             	cmp    %rax,%rdx
  8004201bf2:	72 32                	jb     8004201c26 <page2kva+0x75>
  8004201bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bf8:	48 89 c1             	mov    %rax,%rcx
  8004201bfb:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004201c02:	00 00 00 
  8004201c05:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c0a:	48 bf 27 d1 21 04 80 	movabs $0x800421d127,%rdi
  8004201c11:	00 00 00 
  8004201c14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c19:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201c20:	00 00 00 
  8004201c23:	41 ff d0             	callq  *%r8
  8004201c26:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c2d:	00 00 00 
  8004201c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c34:	48 01 d0             	add    %rdx,%rax
  8004201c37:	c9                   	leaveq 
  8004201c38:	c3                   	retq   

0000008004201c39 <restrictive_type>:
  8004201c39:	55                   	push   %rbp
  8004201c3a:	48 89 e5             	mov    %rsp,%rbp
  8004201c3d:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c44:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c47:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c4b:	74 06                	je     8004201c53 <restrictive_type+0x1a>
  8004201c4d:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c51:	75 07                	jne    8004201c5a <restrictive_type+0x21>
  8004201c53:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c58:	eb 3e                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c5a:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c5e:	74 06                	je     8004201c66 <restrictive_type+0x2d>
  8004201c60:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c64:	75 07                	jne    8004201c6d <restrictive_type+0x34>
  8004201c66:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c6b:	eb 2b                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c6d:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c71:	74 06                	je     8004201c79 <restrictive_type+0x40>
  8004201c73:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c77:	75 07                	jne    8004201c80 <restrictive_type+0x47>
  8004201c79:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c7e:	eb 18                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c80:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c84:	74 06                	je     8004201c8c <restrictive_type+0x53>
  8004201c86:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c8a:	75 07                	jne    8004201c93 <restrictive_type+0x5a>
  8004201c8c:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c91:	eb 05                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c93:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201c98:	c9                   	leaveq 
  8004201c99:	c3                   	retq   

0000008004201c9a <nvram_read>:
  8004201c9a:	55                   	push   %rbp
  8004201c9b:	48 89 e5             	mov    %rsp,%rbp
  8004201c9e:	53                   	push   %rbx
  8004201c9f:	48 83 ec 18          	sub    $0x18,%rsp
  8004201ca3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201ca6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ca9:	89 c7                	mov    %eax,%edi
  8004201cab:	48 b8 98 98 20 04 80 	movabs $0x8004209898,%rax
  8004201cb2:	00 00 00 
  8004201cb5:	ff d0                	callq  *%rax
  8004201cb7:	89 c3                	mov    %eax,%ebx
  8004201cb9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cbc:	83 c0 01             	add    $0x1,%eax
  8004201cbf:	89 c7                	mov    %eax,%edi
  8004201cc1:	48 b8 98 98 20 04 80 	movabs $0x8004209898,%rax
  8004201cc8:	00 00 00 
  8004201ccb:	ff d0                	callq  *%rax
  8004201ccd:	c1 e0 08             	shl    $0x8,%eax
  8004201cd0:	09 d8                	or     %ebx,%eax
  8004201cd2:	48 83 c4 18          	add    $0x18,%rsp
  8004201cd6:	5b                   	pop    %rbx
  8004201cd7:	5d                   	pop    %rbp
  8004201cd8:	c3                   	retq   

0000008004201cd9 <multiboot_read>:
  8004201cd9:	55                   	push   %rbp
  8004201cda:	48 89 e5             	mov    %rsp,%rbp
  8004201cdd:	41 54                	push   %r12
  8004201cdf:	53                   	push   %rbx
  8004201ce0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201ce7:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cee:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201cf5:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201cfc:	48 89 e0             	mov    %rsp,%rax
  8004201cff:	49 89 c4             	mov    %rax,%r12
  8004201d02:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d09:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d0c:	89 c0                	mov    %eax,%eax
  8004201d0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d12:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d19:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d1c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d21:	f7 e2                	mul    %edx
  8004201d23:	89 d0                	mov    %edx,%eax
  8004201d25:	c1 e8 04             	shr    $0x4,%eax
  8004201d28:	89 c0                	mov    %eax,%eax
  8004201d2a:	48 89 c2             	mov    %rax,%rdx
  8004201d2d:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d31:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d35:	49 89 c0             	mov    %rax,%r8
  8004201d38:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d3e:	48 89 c1             	mov    %rax,%rcx
  8004201d41:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d46:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d4a:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d4e:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d53:	48 83 e8 01          	sub    $0x1,%rax
  8004201d57:	48 01 d0             	add    %rdx,%rax
  8004201d5a:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d5f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d64:	48 f7 f3             	div    %rbx
  8004201d67:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d6b:	48 29 c4             	sub    %rax,%rsp
  8004201d6e:	48 89 e0             	mov    %rsp,%rax
  8004201d71:	48 83 c0 07          	add    $0x7,%rax
  8004201d75:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d79:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d7d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d81:	48 bf 5b d1 21 04 80 	movabs $0x800421d15b,%rdi
  8004201d88:	00 00 00 
  8004201d8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d90:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201d97:	00 00 00 
  8004201d9a:	ff d2                	callq  *%rdx
  8004201d9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201da3:	e9 6c 01 00 00       	jmpq   8004201f14 <multiboot_read+0x23b>
  8004201da8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201dab:	48 63 d0             	movslq %eax,%rdx
  8004201dae:	48 89 d0             	mov    %rdx,%rax
  8004201db1:	48 01 c0             	add    %rax,%rax
  8004201db4:	48 01 d0             	add    %rdx,%rax
  8004201db7:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dbb:	48 89 c2             	mov    %rax,%rdx
  8004201dbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dc2:	48 01 d0             	add    %rdx,%rax
  8004201dc5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dcd:	8b 40 08             	mov    0x8(%rax),%eax
  8004201dd0:	89 c0                	mov    %eax,%eax
  8004201dd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201dd6:	48 89 c2             	mov    %rax,%rdx
  8004201dd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ddd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201de0:	89 c0                	mov    %eax,%eax
  8004201de2:	48 01 d0             	add    %rdx,%rax
  8004201de5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201de9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ded:	8b 40 10             	mov    0x10(%rax),%eax
  8004201df0:	89 c0                	mov    %eax,%eax
  8004201df2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201df6:	48 89 c2             	mov    %rax,%rdx
  8004201df9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dfd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e00:	89 c0                	mov    %eax,%eax
  8004201e02:	48 01 d0             	add    %rdx,%rax
  8004201e05:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e0d:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e14:	8b 00                	mov    (%rax),%eax
  8004201e16:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e1a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e1e:	41 89 f0             	mov    %esi,%r8d
  8004201e21:	89 c6                	mov    %eax,%esi
  8004201e23:	48 bf 70 d1 21 04 80 	movabs $0x800421d170,%rdi
  8004201e2a:	00 00 00 
  8004201e2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e32:	49 b9 14 9c 20 04 80 	movabs $0x8004209c14,%r9
  8004201e39:	00 00 00 
  8004201e3c:	41 ff d1             	callq  *%r9
  8004201e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e43:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e46:	83 f8 05             	cmp    $0x5,%eax
  8004201e49:	77 0b                	ja     8004201e56 <multiboot_read+0x17d>
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	85 c0                	test   %eax,%eax
  8004201e54:	75 0b                	jne    8004201e61 <multiboot_read+0x188>
  8004201e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5a:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e61:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e68:	e9 85 00 00 00       	jmpq   8004201ef2 <multiboot_read+0x219>
  8004201e6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e71:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e74:	48 63 d2             	movslq %edx,%rdx
  8004201e77:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e7b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e83:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e86:	89 c0                	mov    %eax,%eax
  8004201e88:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e8c:	48 89 c2             	mov    %rax,%rdx
  8004201e8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e93:	8b 40 04             	mov    0x4(%rax),%eax
  8004201e96:	89 c0                	mov    %eax,%eax
  8004201e98:	48 01 d0             	add    %rdx,%rax
  8004201e9b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201e9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201ea3:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201ea7:	76 45                	jbe    8004201eee <multiboot_read+0x215>
  8004201ea9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eac:	83 c0 01             	add    $0x1,%eax
  8004201eaf:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201eb2:	eb 30                	jmp    8004201ee4 <multiboot_read+0x20b>
  8004201eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201eb8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ebb:	48 63 d2             	movslq %edx,%rdx
  8004201ebe:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ec2:	48 01 c2             	add    %rax,%rdx
  8004201ec5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec9:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ecc:	48 63 c9             	movslq %ecx,%rcx
  8004201ecf:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201ed3:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ed7:	48 01 c8             	add    %rcx,%rax
  8004201eda:	48 8b 00             	mov    (%rax),%rax
  8004201edd:	48 89 02             	mov    %rax,(%rdx)
  8004201ee0:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ee4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ee7:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201eea:	75 c8                	jne    8004201eb4 <multiboot_read+0x1db>
  8004201eec:	eb 10                	jmp    8004201efe <multiboot_read+0x225>
  8004201eee:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201ef2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201ef5:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201ef8:	0f 8c 6f ff ff ff    	jl     8004201e6d <multiboot_read+0x194>
  8004201efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f02:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f05:	48 63 d2             	movslq %edx,%rdx
  8004201f08:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f0c:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f10:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f14:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f17:	48 63 c8             	movslq %eax,%rcx
  8004201f1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f21:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f24:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f29:	f7 e2                	mul    %edx
  8004201f2b:	89 d0                	mov    %edx,%eax
  8004201f2d:	c1 e8 04             	shr    $0x4,%eax
  8004201f30:	89 c0                	mov    %eax,%eax
  8004201f32:	48 39 c1             	cmp    %rax,%rcx
  8004201f35:	0f 82 6d fe ff ff    	jb     8004201da8 <multiboot_read+0xcf>
  8004201f3b:	48 bf a7 d1 21 04 80 	movabs $0x800421d1a7,%rdi
  8004201f42:	00 00 00 
  8004201f45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f4a:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004201f51:	00 00 00 
  8004201f54:	ff d2                	callq  *%rdx
  8004201f56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f5d:	e9 93 01 00 00       	jmpq   80042020f5 <multiboot_read+0x41c>
  8004201f62:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f65:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f6c:	48 63 d2             	movslq %edx,%rdx
  8004201f6f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f73:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f7b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f7e:	48 63 d2             	movslq %edx,%rdx
  8004201f81:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f85:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f8d:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f90:	89 c0                	mov    %eax,%eax
  8004201f92:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f96:	48 89 c2             	mov    %rax,%rdx
  8004201f99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f9d:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fa0:	89 c0                	mov    %eax,%eax
  8004201fa2:	48 01 d0             	add    %rdx,%rax
  8004201fa5:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fa9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fad:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fb0:	89 c0                	mov    %eax,%eax
  8004201fb2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fb6:	48 89 c2             	mov    %rax,%rdx
  8004201fb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fbd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fc0:	89 c0                	mov    %eax,%eax
  8004201fc2:	48 01 d0             	add    %rdx,%rax
  8004201fc5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fc9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fcd:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fd0:	89 c0                	mov    %eax,%eax
  8004201fd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd6:	48 89 c2             	mov    %rax,%rdx
  8004201fd9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fdd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fe0:	89 c0                	mov    %eax,%eax
  8004201fe2:	48 01 d0             	add    %rdx,%rax
  8004201fe5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201fec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ff0:	8b 40 10             	mov    0x10(%rax),%eax
  8004201ff3:	89 c0                	mov    %eax,%eax
  8004201ff5:	48 c1 e0 20          	shl    $0x20,%rax
  8004201ff9:	48 89 c2             	mov    %rax,%rdx
  8004201ffc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202000:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202003:	89 c0                	mov    %eax,%eax
  8004202005:	48 01 d0             	add    %rdx,%rax
  8004202008:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420200f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202016:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420201a:	48 01 d0             	add    %rdx,%rax
  800420201d:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202021:	75 7c                	jne    800420209f <multiboot_read+0x3c6>
  8004202023:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202027:	8b 50 14             	mov    0x14(%rax),%edx
  800420202a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420202e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202031:	39 c2                	cmp    %eax,%edx
  8004202033:	75 6a                	jne    800420209f <multiboot_read+0x3c6>
  8004202035:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420203c:	89 c2                	mov    %eax,%edx
  800420203e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202045:	01 c2                	add    %eax,%edx
  8004202047:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420204b:	89 50 0c             	mov    %edx,0xc(%rax)
  800420204e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202055:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420205c:	48 01 d0             	add    %rdx,%rax
  800420205f:	48 c1 e8 20          	shr    $0x20,%rax
  8004202063:	89 c2                	mov    %eax,%edx
  8004202065:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202069:	89 50 10             	mov    %edx,0x10(%rax)
  800420206c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202070:	8b 50 04             	mov    0x4(%rax),%edx
  8004202073:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202077:	89 50 04             	mov    %edx,0x4(%rax)
  800420207a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207e:	8b 50 08             	mov    0x8(%rax),%edx
  8004202081:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202085:	89 50 08             	mov    %edx,0x8(%rax)
  8004202088:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420208b:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420208e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202092:	48 63 d2             	movslq %edx,%rdx
  8004202095:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  800420209c:	00 
  800420209d:	eb 52                	jmp    80042020f1 <multiboot_read+0x418>
  800420209f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020a6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020aa:	48 01 d0             	add    %rdx,%rax
  80042020ad:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020b1:	76 3e                	jbe    80042020f1 <multiboot_read+0x418>
  80042020b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020b7:	8b 50 14             	mov    0x14(%rax),%edx
  80042020ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020be:	8b 40 14             	mov    0x14(%rax),%eax
  80042020c1:	89 d6                	mov    %edx,%esi
  80042020c3:	89 c7                	mov    %eax,%edi
  80042020c5:	48 b8 39 1c 20 04 80 	movabs $0x8004201c39,%rax
  80042020cc:	00 00 00 
  80042020cf:	ff d0                	callq  *%rax
  80042020d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020db:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020e1:	89 50 14             	mov    %edx,0x14(%rax)
  80042020e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ee:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042020f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020f8:	48 63 c8             	movslq %eax,%rcx
  80042020fb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202102:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202105:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  800420210a:	f7 e2                	mul    %edx
  800420210c:	89 d0                	mov    %edx,%eax
  800420210e:	c1 e8 04             	shr    $0x4,%eax
  8004202111:	89 c0                	mov    %eax,%eax
  8004202113:	48 39 c1             	cmp    %rax,%rcx
  8004202116:	0f 82 46 fe ff ff    	jb     8004201f62 <multiboot_read+0x289>
  800420211c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004202123:	e9 dc 00 00 00       	jmpq   8004202204 <multiboot_read+0x52b>
  8004202128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420212c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420212f:	48 63 d2             	movslq %edx,%rdx
  8004202132:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202136:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  800420213d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202144:	00 
  8004202145:	0f 84 b5 00 00 00    	je     8004202200 <multiboot_read+0x527>
  800420214b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202152:	8b 40 14             	mov    0x14(%rax),%eax
  8004202155:	83 f8 01             	cmp    $0x1,%eax
  8004202158:	74 13                	je     800420216d <multiboot_read+0x494>
  800420215a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202161:	8b 40 14             	mov    0x14(%rax),%eax
  8004202164:	83 f8 03             	cmp    $0x3,%eax
  8004202167:	0f 85 93 00 00 00    	jne    8004202200 <multiboot_read+0x527>
  800420216d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202174:	8b 40 04             	mov    0x4(%rax),%eax
  8004202177:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  800420217c:	77 49                	ja     80042021c7 <multiboot_read+0x4ee>
  800420217e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202185:	8b 40 08             	mov    0x8(%rax),%eax
  8004202188:	85 c0                	test   %eax,%eax
  800420218a:	75 3b                	jne    80042021c7 <multiboot_read+0x4ee>
  800420218c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004202193:	48 8b 10             	mov    (%rax),%rdx
  8004202196:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420219d:	8b 40 10             	mov    0x10(%rax),%eax
  80042021a0:	89 c0                	mov    %eax,%eax
  80042021a2:	48 c1 e0 20          	shl    $0x20,%rax
  80042021a6:	48 89 c1             	mov    %rax,%rcx
  80042021a9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021b0:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021b3:	89 c0                	mov    %eax,%eax
  80042021b5:	48 01 c8             	add    %rcx,%rax
  80042021b8:	48 01 c2             	add    %rax,%rdx
  80042021bb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021c2:	48 89 10             	mov    %rdx,(%rax)
  80042021c5:	eb 39                	jmp    8004202200 <multiboot_read+0x527>
  80042021c7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021ce:	48 8b 10             	mov    (%rax),%rdx
  80042021d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042021db:	89 c0                	mov    %eax,%eax
  80042021dd:	48 c1 e0 20          	shl    $0x20,%rax
  80042021e1:	48 89 c1             	mov    %rax,%rcx
  80042021e4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021eb:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021ee:	89 c0                	mov    %eax,%eax
  80042021f0:	48 01 c8             	add    %rcx,%rax
  80042021f3:	48 01 c2             	add    %rax,%rdx
  80042021f6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021fd:	48 89 10             	mov    %rdx,(%rax)
  8004202200:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202204:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202207:	48 63 c8             	movslq %eax,%rcx
  800420220a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202211:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202214:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202219:	f7 e2                	mul    %edx
  800420221b:	89 d0                	mov    %edx,%eax
  800420221d:	c1 e8 04             	shr    $0x4,%eax
  8004202220:	89 c0                	mov    %eax,%eax
  8004202222:	48 39 c1             	cmp    %rax,%rcx
  8004202225:	0f 82 fd fe ff ff    	jb     8004202128 <multiboot_read+0x44f>
  800420222b:	4c 89 e4             	mov    %r12,%rsp
  800420222e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  8004202232:	5b                   	pop    %rbx
  8004202233:	41 5c                	pop    %r12
  8004202235:	5d                   	pop    %rbp
  8004202236:	c3                   	retq   

0000008004202237 <i386_detect_memory>:
  8004202237:	55                   	push   %rbp
  8004202238:	48 89 e5             	mov    %rsp,%rbp
  800420223b:	48 83 ec 50          	sub    $0x50,%rsp
  800420223f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202246:	00 
  8004202247:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420224e:	00 
  800420224f:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202256:	00 00 00 
  8004202259:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420225d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202261:	48 8b 00             	mov    (%rax),%rax
  8004202264:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202268:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420226d:	74 2d                	je     800420229c <i386_detect_memory+0x65>
  800420226f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202273:	8b 00                	mov    (%rax),%eax
  8004202275:	83 e0 40             	and    $0x40,%eax
  8004202278:	85 c0                	test   %eax,%eax
  800420227a:	74 20                	je     800420229c <i386_detect_memory+0x65>
  800420227c:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  8004202280:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202284:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202288:	48 89 ce             	mov    %rcx,%rsi
  800420228b:	48 89 c7             	mov    %rax,%rdi
  800420228e:	48 b8 d9 1c 20 04 80 	movabs $0x8004201cd9,%rax
  8004202295:	00 00 00 
  8004202298:	ff d0                	callq  *%rax
  800420229a:	eb 34                	jmp    80042022d0 <i386_detect_memory+0x99>
  800420229c:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022a1:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022a8:	00 00 00 
  80042022ab:	ff d0                	callq  *%rax
  80042022ad:	c1 e0 0a             	shl    $0xa,%eax
  80042022b0:	48 98                	cltq   
  80042022b2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022b6:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022bb:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022c2:	00 00 00 
  80042022c5:	ff d0                	callq  *%rax
  80042022c7:	c1 e0 0a             	shl    $0xa,%eax
  80042022ca:	48 98                	cltq   
  80042022cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022d4:	48 85 c0             	test   %rax,%rax
  80042022d7:	75 35                	jne    800420230e <i386_detect_memory+0xd7>
  80042022d9:	48 b9 a9 d1 21 04 80 	movabs $0x800421d1a9,%rcx
  80042022e0:	00 00 00 
  80042022e3:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042022ea:	00 00 00 
  80042022ed:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022f2:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042022f9:	00 00 00 
  80042022fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202301:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202308:	00 00 00 
  800420230b:	41 ff d0             	callq  *%r8
  800420230e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202312:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202316:	48 89 c2             	mov    %rax,%rdx
  8004202319:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  8004202320:	00 00 00 
  8004202323:	48 89 10             	mov    %rdx,(%rax)
  8004202326:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420232a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420232e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202332:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202337:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  800420233e:	00 00 00 
  8004202341:	ff d0                	callq  *%rax
  8004202343:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202348:	75 2c                	jne    8004202376 <i386_detect_memory+0x13f>
  800420234a:	bf 34 00 00 00       	mov    $0x34,%edi
  800420234f:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  8004202356:	00 00 00 
  8004202359:	ff d0                	callq  *%rax
  800420235b:	c1 e0 10             	shl    $0x10,%eax
  800420235e:	48 98                	cltq   
  8004202360:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202368:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420236e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202372:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202376:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420237b:	74 1a                	je     8004202397 <i386_detect_memory+0x160>
  800420237d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202381:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202388:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420238f:	00 00 00 
  8004202392:	48 89 10             	mov    %rdx,(%rax)
  8004202395:	eb 1a                	jmp    80042023b1 <i386_detect_memory+0x17a>
  8004202397:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  800420239e:	00 00 00 
  80042023a1:	48 8b 10             	mov    (%rax),%rdx
  80042023a4:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042023ab:	00 00 00 
  80042023ae:	48 89 10             	mov    %rdx,(%rax)
  80042023b1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042023b8:	00 00 00 
  80042023bb:	48 8b 30             	mov    (%rax),%rsi
  80042023be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023c2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023c6:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ca:	48 89 c1             	mov    %rax,%rcx
  80042023cd:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  80042023d4:	00 00 00 
  80042023d7:	48 8b 00             	mov    (%rax),%rax
  80042023da:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023de:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023e2:	48 89 c2             	mov    %rax,%rdx
  80042023e5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042023ec:	00 00 00 
  80042023ef:	48 8b 00             	mov    (%rax),%rax
  80042023f2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023f6:	48 c1 e8 14          	shr    $0x14,%rax
  80042023fa:	49 89 f0             	mov    %rsi,%r8
  80042023fd:	48 89 c6             	mov    %rax,%rsi
  8004202400:	48 bf d8 d1 21 04 80 	movabs $0x800421d1d8,%rdi
  8004202407:	00 00 00 
  800420240a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420240f:	49 b9 14 9c 20 04 80 	movabs $0x8004209c14,%r9
  8004202416:	00 00 00 
  8004202419:	41 ff d1             	callq  *%r9
  800420241c:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004202423:	00 
  8004202424:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  800420242b:	07 
  800420242c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202430:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202434:	48 c1 e8 14          	shr    $0x14,%rax
  8004202438:	48 89 c1             	mov    %rax,%rcx
  800420243b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420243f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202443:	48 c1 e8 14          	shr    $0x14,%rax
  8004202447:	48 89 c6             	mov    %rax,%rsi
  800420244a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420244e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202452:	49 89 c8             	mov    %rcx,%r8
  8004202455:	48 89 d1             	mov    %rdx,%rcx
  8004202458:	48 89 f2             	mov    %rsi,%rdx
  800420245b:	48 89 c6             	mov    %rax,%rsi
  800420245e:	48 bf 28 d2 21 04 80 	movabs $0x800421d228,%rdi
  8004202465:	00 00 00 
  8004202468:	b8 00 00 00 00       	mov    $0x0,%eax
  800420246d:	49 b9 14 9c 20 04 80 	movabs $0x8004209c14,%r9
  8004202474:	00 00 00 
  8004202477:	41 ff d1             	callq  *%r9
  800420247a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420247e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004202482:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202487:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420248b:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202492:	00 00 00 
  8004202495:	48 8b 00             	mov    (%rax),%rax
  8004202498:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420249c:	76 3a                	jbe    80042024d8 <i386_detect_memory+0x2a1>
  800420249e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024a2:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024a9:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042024b0:	00 00 00 
  80042024b3:	48 89 10             	mov    %rdx,(%rax)
  80042024b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ba:	48 89 c6             	mov    %rax,%rsi
  80042024bd:	48 bf 90 d2 21 04 80 	movabs $0x800421d290,%rdi
  80042024c4:	00 00 00 
  80042024c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024cc:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042024d3:	00 00 00 
  80042024d6:	ff d2                	callq  *%rdx
  80042024d8:	c9                   	leaveq 
  80042024d9:	c3                   	retq   

00000080042024da <boot_alloc>:
  80042024da:	55                   	push   %rbp
  80042024db:	48 89 e5             	mov    %rsp,%rbp
  80042024de:	48 83 ec 40          	sub    $0x40,%rsp
  80042024e2:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024e5:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  80042024ec:	00 00 00 
  80042024ef:	48 8b 00             	mov    (%rax),%rax
  80042024f2:	48 85 c0             	test   %rax,%rax
  80042024f5:	75 4e                	jne    8004202545 <boot_alloc+0x6b>
  80042024f7:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  80042024fe:	00 
  80042024ff:	48 b8 d0 a5 6d 04 80 	movabs $0x80046da5d0,%rax
  8004202506:	00 00 00 
  8004202509:	48 8b 10             	mov    (%rax),%rdx
  800420250c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202510:	48 01 d0             	add    %rdx,%rax
  8004202513:	48 83 e8 01          	sub    $0x1,%rax
  8004202517:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420251b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420251f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202524:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202528:	48 89 d0             	mov    %rdx,%rax
  800420252b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420252f:	48 29 c2             	sub    %rax,%rdx
  8004202532:	48 89 d0             	mov    %rdx,%rax
  8004202535:	48 89 c2             	mov    %rax,%rdx
  8004202538:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  800420253f:	00 00 00 
  8004202542:	48 89 10             	mov    %rdx,(%rax)
  8004202545:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202548:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  800420254f:	00 00 00 
  8004202552:	48 8b 00             	mov    (%rax),%rax
  8004202555:	48 01 c2             	add    %rax,%rdx
  8004202558:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  800420255f:	00 00 00 
  8004202562:	48 8b 00             	mov    (%rax),%rax
  8004202565:	48 39 c2             	cmp    %rax,%rdx
  8004202568:	72 2f                	jb     8004202599 <boot_alloc+0xbf>
  800420256a:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  8004202571:	00 00 00 
  8004202574:	48 8b 10             	mov    (%rax),%rdx
  8004202577:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420257a:	48 01 c2             	add    %rax,%rdx
  800420257d:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202584:	00 00 00 
  8004202587:	48 8b 00             	mov    (%rax),%rax
  800420258a:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202590:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202594:	48 39 c2             	cmp    %rax,%rdx
  8004202597:	76 2a                	jbe    80042025c3 <boot_alloc+0xe9>
  8004202599:	48 ba c0 d2 21 04 80 	movabs $0x800421d2c0,%rdx
  80042025a0:	00 00 00 
  80042025a3:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025a8:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042025af:	00 00 00 
  80042025b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042025be:	00 00 00 
  80042025c1:	ff d1                	callq  *%rcx
  80042025c3:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  80042025ca:	00 00 00 
  80042025cd:	48 8b 00             	mov    (%rax),%rax
  80042025d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025d4:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025db:	00 
  80042025dc:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  80042025e3:	00 00 00 
  80042025e6:	48 8b 10             	mov    (%rax),%rdx
  80042025e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025ec:	48 01 d0             	add    %rdx,%rax
  80042025ef:	48 89 c2             	mov    %rax,%rdx
  80042025f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042025f6:	48 01 d0             	add    %rdx,%rax
  80042025f9:	48 83 e8 01          	sub    $0x1,%rax
  80042025fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202601:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202605:	ba 00 00 00 00       	mov    $0x0,%edx
  800420260a:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420260e:	48 89 d0             	mov    %rdx,%rax
  8004202611:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202615:	48 29 c2             	sub    %rax,%rdx
  8004202618:	48 89 d0             	mov    %rdx,%rax
  800420261b:	48 89 c2             	mov    %rax,%rdx
  800420261e:	48 b8 48 b2 4d 04 80 	movabs $0x80044db248,%rax
  8004202625:	00 00 00 
  8004202628:	48 89 10             	mov    %rdx,(%rax)
  800420262b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420262f:	c9                   	leaveq 
  8004202630:	c3                   	retq   

0000008004202631 <x64_vm_init>:
  8004202631:	55                   	push   %rbp
  8004202632:	48 89 e5             	mov    %rsp,%rbp
  8004202635:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202639:	48 b8 37 22 20 04 80 	movabs $0x8004202237,%rax
  8004202640:	00 00 00 
  8004202643:	ff d0                	callq  *%rax
  8004202645:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420264a:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202651:	00 00 00 
  8004202654:	ff d0                	callq  *%rax
  8004202656:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420265a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420265e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202663:	be 00 00 00 00       	mov    $0x0,%esi
  8004202668:	48 89 c7             	mov    %rax,%rdi
  800420266b:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004202672:	00 00 00 
  8004202675:	ff d0                	callq  *%rax
  8004202677:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420267e:	00 00 00 
  8004202681:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202685:	48 89 10             	mov    %rdx,(%rax)
  8004202688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420268c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202690:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202697:	00 00 00 
  800420269a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420269e:	77 32                	ja     80042026d2 <x64_vm_init+0xa1>
  80042026a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026a4:	48 89 c1             	mov    %rax,%rcx
  80042026a7:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  80042026ae:	00 00 00 
  80042026b1:	be 18 01 00 00       	mov    $0x118,%esi
  80042026b6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042026bd:	00 00 00 
  80042026c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042026cc:	00 00 00 
  80042026cf:	41 ff d0             	callq  *%r8
  80042026d2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026d9:	ff ff ff 
  80042026dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026e0:	48 01 c2             	add    %rax,%rdx
  80042026e3:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  80042026ea:	00 00 00 
  80042026ed:	48 89 10             	mov    %rdx,(%rax)
  80042026f0:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042026f7:	00 00 00 
  80042026fa:	48 8b 00             	mov    (%rax),%rax
  80042026fd:	48 c1 e0 04          	shl    $0x4,%rax
  8004202701:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202709:	89 c7                	mov    %eax,%edi
  800420270b:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202712:	00 00 00 
  8004202715:	ff d0                	callq  *%rax
  8004202717:	48 ba 00 a6 6d 04 80 	movabs $0x80046da600,%rdx
  800420271e:	00 00 00 
  8004202721:	48 89 02             	mov    %rax,(%rdx)
  8004202724:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  800420272b:	00 00 00 
  800420272e:	48 8b 00             	mov    (%rax),%rax
  8004202731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202735:	be 00 00 00 00       	mov    $0x0,%esi
  800420273a:	48 89 c7             	mov    %rax,%rdi
  800420273d:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004202744:	00 00 00 
  8004202747:	ff d0                	callq  *%rax
  8004202749:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420274e:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202755:	00 00 00 
  8004202758:	ff d0                	callq  *%rax
  800420275a:	48 ba 58 b2 4d 04 80 	movabs $0x80044db258,%rdx
  8004202761:	00 00 00 
  8004202764:	48 89 02             	mov    %rax,(%rdx)
  8004202767:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420276e:	00 00 00 
  8004202771:	48 8b 00             	mov    (%rax),%rax
  8004202774:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202779:	be 00 00 00 00       	mov    $0x0,%esi
  800420277e:	48 89 c7             	mov    %rax,%rdi
  8004202781:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004202788:	00 00 00 
  800420278b:	ff d0                	callq  *%rax
  800420278d:	48 b8 eb 2b 20 04 80 	movabs $0x8004202beb,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042027a0:	00 00 00 
  80042027a3:	48 8b 00             	mov    (%rax),%rax
  80042027a6:	48 c1 e0 04          	shl    $0x4,%rax
  80042027aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ae:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042027b5:	00 00 00 
  80042027b8:	48 8b 00             	mov    (%rax),%rax
  80042027bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027bf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027c6:	00 00 00 
  80042027c9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027cd:	77 32                	ja     8004202801 <x64_vm_init+0x1d0>
  80042027cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027d3:	48 89 c1             	mov    %rax,%rcx
  80042027d6:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  80042027dd:	00 00 00 
  80042027e0:	be 43 01 00 00       	mov    $0x143,%esi
  80042027e5:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042027ec:	00 00 00 
  80042027ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027f4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042027fb:	00 00 00 
  80042027fe:	41 ff d0             	callq  *%r8
  8004202801:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202808:	ff ff ff 
  800420280b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420280f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202813:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420281a:	00 00 00 
  800420281d:	48 8b 00             	mov    (%rax),%rax
  8004202820:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202824:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420282a:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202831:	00 00 00 
  8004202834:	48 89 c7             	mov    %rax,%rdi
  8004202837:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420283e:	00 00 00 
  8004202841:	ff d0                	callq  *%rax
  8004202843:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420284a:	00 
  800420284b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420284f:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202855:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420285d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202862:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202866:	48 89 d0             	mov    %rdx,%rax
  8004202869:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420286d:	48 29 c2             	sub    %rax,%rdx
  8004202870:	48 89 d0             	mov    %rdx,%rax
  8004202873:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202877:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420287e:	00 00 00 
  8004202881:	48 8b 00             	mov    (%rax),%rax
  8004202884:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202888:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420288f:	00 00 00 
  8004202892:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004202896:	77 32                	ja     80042028ca <x64_vm_init+0x299>
  8004202898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420289c:	48 89 c1             	mov    %rax,%rcx
  800420289f:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  80042028a6:	00 00 00 
  80042028a9:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ae:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042028b5:	00 00 00 
  80042028b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042028c4:	00 00 00 
  80042028c7:	41 ff d0             	callq  *%r8
  80042028ca:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028d1:	ff ff ff 
  80042028d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028d8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028dc:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042028e3:	00 00 00 
  80042028e6:	48 8b 00             	mov    (%rax),%rax
  80042028e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028ed:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028f3:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  80042028fa:	00 00 00 
  80042028fd:	48 89 c7             	mov    %rax,%rdi
  8004202900:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202907:	00 00 00 
  800420290a:	ff d0                	callq  *%rax
  800420290c:	48 b8 00 30 22 04 80 	movabs $0x8004223000,%rax
  8004202913:	00 00 00 
  8004202916:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420291a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202921:	00 00 00 
  8004202924:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202928:	77 32                	ja     800420295c <x64_vm_init+0x32b>
  800420292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420292e:	48 89 c1             	mov    %rax,%rcx
  8004202931:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  8004202938:	00 00 00 
  800420293b:	be 62 01 00 00       	mov    $0x162,%esi
  8004202940:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202947:	00 00 00 
  800420294a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420294f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202956:	00 00 00 
  8004202959:	41 ff d0             	callq  *%r8
  800420295c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202963:	ff ff ff 
  8004202966:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420296a:	48 01 c2             	add    %rax,%rdx
  800420296d:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004202974:	00 00 00 
  8004202977:	48 8b 00             	mov    (%rax),%rax
  800420297a:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202980:	48 89 d1             	mov    %rdx,%rcx
  8004202983:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202988:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420298f:	00 00 00 
  8004202992:	48 89 c7             	mov    %rax,%rdi
  8004202995:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420299c:	00 00 00 
  800420299f:	ff d0                	callq  *%rax
  80042029a1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042029a8:	00 00 00 
  80042029ab:	48 8b 00             	mov    (%rax),%rax
  80042029ae:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029b2:	48 89 c2             	mov    %rax,%rdx
  80042029b5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042029bc:	00 00 00 
  80042029bf:	48 8b 00             	mov    (%rax),%rax
  80042029c2:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029c8:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029cd:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029d4:	00 00 00 
  80042029d7:	48 89 c7             	mov    %rax,%rdi
  80042029da:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  80042029e1:	00 00 00 
  80042029e4:	ff d0                	callq  *%rax
  80042029e6:	48 b8 00 2b 20 04 80 	movabs $0x8004202b00,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042029f6:	48 83 c0 08          	add    $0x8,%rax
  80042029fa:	48 8b 00             	mov    (%rax),%rax
  80042029fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a0b:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a0f:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a12:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a15:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202a1c:	00 00 00 
  8004202a1f:	48 8b 00             	mov    (%rax),%rax
  8004202a22:	48 39 c2             	cmp    %rax,%rdx
  8004202a25:	72 32                	jb     8004202a59 <x64_vm_init+0x428>
  8004202a27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a2b:	48 89 c1             	mov    %rax,%rcx
  8004202a2e:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004202a35:	00 00 00 
  8004202a38:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a3d:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202a44:	00 00 00 
  8004202a47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a4c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202a53:	00 00 00 
  8004202a56:	41 ff d0             	callq  *%r8
  8004202a59:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a60:	00 00 00 
  8004202a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a67:	48 01 d0             	add    %rdx,%rax
  8004202a6a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a72:	48 8b 00             	mov    (%rax),%rax
  8004202a75:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a7b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a83:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a87:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a8a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a8d:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202a94:	00 00 00 
  8004202a97:	48 8b 00             	mov    (%rax),%rax
  8004202a9a:	48 39 c2             	cmp    %rax,%rdx
  8004202a9d:	72 32                	jb     8004202ad1 <x64_vm_init+0x4a0>
  8004202a9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aa3:	48 89 c1             	mov    %rax,%rcx
  8004202aa6:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004202aad:	00 00 00 
  8004202ab0:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ab5:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202abc:	00 00 00 
  8004202abf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ac4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202acb:	00 00 00 
  8004202ace:	41 ff d0             	callq  *%r8
  8004202ad1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ad8:	00 00 00 
  8004202adb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202adf:	48 01 d0             	add    %rdx,%rax
  8004202ae2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202ae6:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202af7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202afb:	0f 22 d8             	mov    %rax,%cr3
  8004202afe:	c9                   	leaveq 
  8004202aff:	c3                   	retq   

0000008004202b00 <mem_init_mp>:
  8004202b00:	55                   	push   %rbp
  8004202b01:	48 89 e5             	mov    %rsp,%rbp
  8004202b04:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b08:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b0f:	e9 cb 00 00 00       	jmpq   8004202bdf <mem_init_mp+0xdf>
  8004202b14:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b17:	89 d0                	mov    %edx,%eax
  8004202b19:	01 c0                	add    %eax,%eax
  8004202b1b:	01 d0                	add    %edx,%eax
  8004202b1d:	c1 e0 0f             	shl    $0xf,%eax
  8004202b20:	48 98                	cltq   
  8004202b22:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b29:	00 00 00 
  8004202b2c:	48 29 c2             	sub    %rax,%rdx
  8004202b2f:	48 89 d0             	mov    %rdx,%rax
  8004202b32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b39:	48 98                	cltq   
  8004202b3b:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b3f:	48 89 c2             	mov    %rax,%rdx
  8004202b42:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  8004202b49:	00 00 00 
  8004202b4c:	48 01 d0             	add    %rdx,%rax
  8004202b4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b53:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b5a:	00 00 00 
  8004202b5d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b61:	77 32                	ja     8004202b95 <mem_init_mp+0x95>
  8004202b63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b67:	48 89 c1             	mov    %rax,%rcx
  8004202b6a:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  8004202b71:	00 00 00 
  8004202b74:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b79:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202b80:	00 00 00 
  8004202b83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b88:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202b8f:	00 00 00 
  8004202b92:	41 ff d0             	callq  *%r8
  8004202b95:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202b9c:	ff ff ff 
  8004202b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ba3:	48 01 c2             	add    %rax,%rdx
  8004202ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202baa:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bb1:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004202bb8:	00 00 00 
  8004202bbb:	48 8b 00             	mov    (%rax),%rax
  8004202bbe:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bc4:	48 89 d1             	mov    %rdx,%rcx
  8004202bc7:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bcc:	48 89 c7             	mov    %rax,%rdi
  8004202bcf:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202bd6:	00 00 00 
  8004202bd9:	ff d0                	callq  *%rax
  8004202bdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202bdf:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202be3:	0f 8e 2b ff ff ff    	jle    8004202b14 <mem_init_mp+0x14>
  8004202be9:	c9                   	leaveq 
  8004202bea:	c3                   	retq   

0000008004202beb <page_init>:
  8004202beb:	55                   	push   %rbp
  8004202bec:	48 89 e5             	mov    %rsp,%rbp
  8004202bef:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bf3:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202bf8:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202bff:	00 00 00 
  8004202c02:	ff d0                	callq  *%rax
  8004202c04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c08:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c0f:	00 
  8004202c10:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c17:	00 
  8004202c18:	e9 65 02 00 00       	jmpq   8004202e82 <page_init+0x297>
  8004202c1d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c29:	74 1a                	je     8004202c45 <page_init+0x5a>
  8004202c2b:	48 b8 30 b2 4d 04 80 	movabs $0x80044db230,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c3c:	73 07                	jae    8004202c45 <page_init+0x5a>
  8004202c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c45:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c4a:	75 07                	jne    8004202c53 <page_init+0x68>
  8004202c4c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c5b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c62:	00 00 00 
  8004202c65:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c69:	77 32                	ja     8004202c9d <page_init+0xb2>
  8004202c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c6f:	48 89 c1             	mov    %rax,%rcx
  8004202c72:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  8004202c79:	00 00 00 
  8004202c7c:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c81:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202c88:	00 00 00 
  8004202c8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202c97:	00 00 00 
  8004202c9a:	41 ff d0             	callq  *%r8
  8004202c9d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ca4:	ff ff ff 
  8004202ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cab:	48 01 d0             	add    %rdx,%rax
  8004202cae:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cb2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cb6:	77 07                	ja     8004202cbf <page_init+0xd4>
  8004202cb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202cc3:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cc9:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202ccd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cd1:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202cd8:	00 00 00 
  8004202cdb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202cdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202ce3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ce7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cea:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202ced:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202cf4:	00 00 00 
  8004202cf7:	48 8b 00             	mov    (%rax),%rax
  8004202cfa:	48 39 c2             	cmp    %rax,%rdx
  8004202cfd:	72 32                	jb     8004202d31 <page_init+0x146>
  8004202cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d03:	48 89 c1             	mov    %rax,%rcx
  8004202d06:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004202d0d:	00 00 00 
  8004202d10:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d15:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202d1c:	00 00 00 
  8004202d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202d2b:	00 00 00 
  8004202d2e:	41 ff d0             	callq  *%r8
  8004202d31:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d38:	00 00 00 
  8004202d3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d3f:	48 01 d0             	add    %rdx,%rax
  8004202d42:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d46:	0f 87 84 00 00 00    	ja     8004202dd0 <page_init+0x1e5>
  8004202d4c:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d53:	00 00 00 
  8004202d56:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d5c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d64:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d68:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d6b:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d6e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202d75:	00 00 00 
  8004202d78:	48 8b 00             	mov    (%rax),%rax
  8004202d7b:	48 39 c2             	cmp    %rax,%rdx
  8004202d7e:	72 32                	jb     8004202db2 <page_init+0x1c7>
  8004202d80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d84:	48 89 c1             	mov    %rax,%rcx
  8004202d87:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004202d8e:	00 00 00 
  8004202d91:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d96:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202d9d:	00 00 00 
  8004202da0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202da5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202dac:	00 00 00 
  8004202daf:	41 ff d0             	callq  *%r8
  8004202db2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202db9:	00 00 00 
  8004202dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dc0:	48 01 d0             	add    %rdx,%rax
  8004202dc3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dc7:	76 07                	jbe    8004202dd0 <page_init+0x1e5>
  8004202dc9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202dd0:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202dd7:	00 00 00 
  8004202dda:	48 8b 00             	mov    (%rax),%rax
  8004202ddd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202de1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202de5:	48 01 c2             	add    %rax,%rdx
  8004202de8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202deb:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202def:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202df6:	00 00 00 
  8004202df9:	48 8b 00             	mov    (%rax),%rax
  8004202dfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e00:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e04:	48 01 d0             	add    %rdx,%rax
  8004202e07:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e12:	75 69                	jne    8004202e7d <page_init+0x292>
  8004202e14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e19:	74 21                	je     8004202e3c <page_init+0x251>
  8004202e1b:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202e22:	00 00 00 
  8004202e25:	48 8b 00             	mov    (%rax),%rax
  8004202e28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e2c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e30:	48 01 c2             	add    %rax,%rdx
  8004202e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e37:	48 89 10             	mov    %rdx,(%rax)
  8004202e3a:	eb 25                	jmp    8004202e61 <page_init+0x276>
  8004202e3c:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202e43:	00 00 00 
  8004202e46:	48 8b 00             	mov    (%rax),%rax
  8004202e49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e4d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e51:	48 01 c2             	add    %rax,%rdx
  8004202e54:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202e5b:	00 00 00 
  8004202e5e:	48 89 10             	mov    %rdx,(%rax)
  8004202e61:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004202e68:	00 00 00 
  8004202e6b:	48 8b 00             	mov    (%rax),%rax
  8004202e6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e72:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e76:	48 01 d0             	add    %rdx,%rax
  8004202e79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e7d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e82:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004202e89:	00 00 00 
  8004202e8c:	48 8b 00             	mov    (%rax),%rax
  8004202e8f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e93:	0f 82 84 fd ff ff    	jb     8004202c1d <page_init+0x32>
  8004202e99:	c9                   	leaveq 
  8004202e9a:	c3                   	retq   

0000008004202e9b <page_alloc>:
  8004202e9b:	55                   	push   %rbp
  8004202e9c:	48 89 e5             	mov    %rsp,%rbp
  8004202e9f:	48 83 ec 20          	sub    $0x20,%rsp
  8004202ea3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202ea6:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202ead:	00 00 00 
  8004202eb0:	48 8b 00             	mov    (%rax),%rax
  8004202eb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202eb7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ebc:	74 5e                	je     8004202f1c <page_alloc+0x81>
  8004202ebe:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202ec5:	00 00 00 
  8004202ec8:	48 8b 00             	mov    (%rax),%rax
  8004202ecb:	48 8b 10             	mov    (%rax),%rdx
  8004202ece:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202ed5:	00 00 00 
  8004202ed8:	48 89 10             	mov    %rdx,(%rax)
  8004202edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202edf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ee6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ee9:	83 e0 01             	and    $0x1,%eax
  8004202eec:	85 c0                	test   %eax,%eax
  8004202eee:	74 2c                	je     8004202f1c <page_alloc+0x81>
  8004202ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ef4:	48 89 c7             	mov    %rax,%rdi
  8004202ef7:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004202efe:	00 00 00 
  8004202f01:	ff d0                	callq  *%rax
  8004202f03:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f08:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f0d:	48 89 c7             	mov    %rax,%rdi
  8004202f10:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004202f17:	00 00 00 
  8004202f1a:	ff d0                	callq  *%rax
  8004202f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f20:	c9                   	leaveq 
  8004202f21:	c3                   	retq   

0000008004202f22 <page_initpp>:
  8004202f22:	55                   	push   %rbp
  8004202f23:	48 89 e5             	mov    %rsp,%rbp
  8004202f26:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f32:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f37:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f3c:	48 89 c7             	mov    %rax,%rdi
  8004202f3f:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004202f46:	00 00 00 
  8004202f49:	ff d0                	callq  *%rax
  8004202f4b:	c9                   	leaveq 
  8004202f4c:	c3                   	retq   

0000008004202f4d <page_free>:
  8004202f4d:	55                   	push   %rbp
  8004202f4e:	48 89 e5             	mov    %rsp,%rbp
  8004202f51:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f61:	66 85 c0             	test   %ax,%ax
  8004202f64:	75 0c                	jne    8004202f72 <page_free+0x25>
  8004202f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 85 c0             	test   %rax,%rax
  8004202f70:	74 2c                	je     8004202f9e <page_free+0x51>
  8004202f72:	48 ba 10 d3 21 04 80 	movabs $0x800421d310,%rdx
  8004202f79:	00 00 00 
  8004202f7c:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f81:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004202f88:	00 00 00 
  8004202f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f90:	48 b9 00 06 20 04 80 	movabs $0x8004200600,%rcx
  8004202f97:	00 00 00 
  8004202f9a:	ff d1                	callq  *%rcx
  8004202f9c:	eb 2f                	jmp    8004202fcd <page_free+0x80>
  8004202f9e:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202fa5:	00 00 00 
  8004202fa8:	48 8b 10             	mov    (%rax),%rdx
  8004202fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202faf:	48 89 10             	mov    %rdx,(%rax)
  8004202fb2:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004202fb9:	00 00 00 
  8004202fbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fc0:	48 89 10             	mov    %rdx,(%rax)
  8004202fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fc7:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fcd:	c9                   	leaveq 
  8004202fce:	c3                   	retq   

0000008004202fcf <page_decref>:
  8004202fcf:	55                   	push   %rbp
  8004202fd0:	48 89 e5             	mov    %rsp,%rbp
  8004202fd3:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fdf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fe3:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fea:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202ff6:	66 85 c0             	test   %ax,%ax
  8004202ff9:	75 13                	jne    800420300e <page_decref+0x3f>
  8004202ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fff:	48 89 c7             	mov    %rax,%rdi
  8004203002:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004203009:	00 00 00 
  800420300c:	ff d0                	callq  *%rax
  800420300e:	c9                   	leaveq 
  800420300f:	c3                   	retq   

0000008004203010 <pml4e_walk>:
  8004203010:	55                   	push   %rbp
  8004203011:	48 89 e5             	mov    %rsp,%rbp
  8004203014:	53                   	push   %rbx
  8004203015:	48 83 ec 68          	sub    $0x68,%rsp
  8004203019:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420301d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203021:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203024:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203029:	0f 84 4e 02 00 00    	je     800420327d <pml4e_walk+0x26d>
  800420302f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203033:	48 c1 e8 27          	shr    $0x27,%rax
  8004203037:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420303c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203043:	00 
  8004203044:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203048:	48 01 d0             	add    %rdx,%rax
  800420304b:	48 8b 00             	mov    (%rax),%rax
  800420304e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203056:	83 e0 01             	and    $0x1,%eax
  8004203059:	48 85 c0             	test   %rax,%rax
  800420305c:	0f 85 7f 01 00 00    	jne    80042031e1 <pml4e_walk+0x1d1>
  8004203062:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203066:	0f 84 75 01 00 00    	je     80042031e1 <pml4e_walk+0x1d1>
  800420306c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203073:	00 
  8004203074:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203079:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203080:	00 00 00 
  8004203083:	ff d0                	callq  *%rax
  8004203085:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203089:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420308e:	0f 84 43 01 00 00    	je     80042031d7 <pml4e_walk+0x1c7>
  8004203094:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203098:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420309c:	8d 50 01             	lea    0x1(%rax),%edx
  800420309f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030a7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ab:	48 c1 e8 27          	shr    $0x27,%rax
  80042030af:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030bb:	00 
  80042030bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030c0:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030c8:	48 89 c7             	mov    %rax,%rdi
  80042030cb:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042030d2:	00 00 00 
  80042030d5:	ff d0                	callq  *%rax
  80042030d7:	48 83 c8 07          	or     $0x7,%rax
  80042030db:	48 89 03             	mov    %rax,(%rbx)
  80042030de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030e2:	48 c1 e8 27          	shr    $0x27,%rax
  80042030e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030f2:	00 
  80042030f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030f7:	48 01 d0             	add    %rdx,%rax
  80042030fa:	48 8b 00             	mov    (%rax),%rax
  80042030fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203103:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420310b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420310f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203112:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203115:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420311c:	00 00 00 
  800420311f:	48 8b 00             	mov    (%rax),%rax
  8004203122:	48 39 c2             	cmp    %rax,%rdx
  8004203125:	72 32                	jb     8004203159 <pml4e_walk+0x149>
  8004203127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420312b:	48 89 c1             	mov    %rax,%rcx
  800420312e:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004203135:	00 00 00 
  8004203138:	be 79 02 00 00       	mov    $0x279,%esi
  800420313d:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004203144:	00 00 00 
  8004203147:	b8 00 00 00 00       	mov    $0x0,%eax
  800420314c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203153:	00 00 00 
  8004203156:	41 ff d0             	callq  *%r8
  8004203159:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203160:	00 00 00 
  8004203163:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203167:	48 01 d0             	add    %rdx,%rax
  800420316a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420316d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203171:	48 89 ce             	mov    %rcx,%rsi
  8004203174:	48 89 c7             	mov    %rax,%rdi
  8004203177:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  800420317e:	00 00 00 
  8004203181:	ff d0                	callq  *%rax
  8004203183:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203187:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420318c:	74 09                	je     8004203197 <pml4e_walk+0x187>
  800420318e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203192:	e9 eb 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  8004203197:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420319b:	48 c1 e8 27          	shr    $0x27,%rax
  800420319f:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031ab:	00 
  80042031ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031b0:	48 01 d0             	add    %rdx,%rax
  80042031b3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031be:	48 89 c7             	mov    %rax,%rdi
  80042031c1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042031c8:	00 00 00 
  80042031cb:	ff d0                	callq  *%rax
  80042031cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031d2:	e9 ab 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031dc:	e9 a1 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031e5:	83 e0 01             	and    $0x1,%eax
  80042031e8:	48 85 c0             	test   %rax,%rax
  80042031eb:	0f 84 8c 00 00 00    	je     800420327d <pml4e_walk+0x26d>
  80042031f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042031fb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042031ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203203:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203207:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420320a:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420320d:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203214:	00 00 00 
  8004203217:	48 8b 00             	mov    (%rax),%rax
  800420321a:	48 39 c2             	cmp    %rax,%rdx
  800420321d:	72 32                	jb     8004203251 <pml4e_walk+0x241>
  800420321f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203223:	48 89 c1             	mov    %rax,%rcx
  8004203226:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  800420322d:	00 00 00 
  8004203230:	be 83 02 00 00       	mov    $0x283,%esi
  8004203235:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420323c:	00 00 00 
  800420323f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203244:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420324b:	00 00 00 
  800420324e:	41 ff d0             	callq  *%r8
  8004203251:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203258:	00 00 00 
  800420325b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420325f:	48 01 d0             	add    %rdx,%rax
  8004203262:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203265:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203269:	48 89 ce             	mov    %rcx,%rsi
  800420326c:	48 89 c7             	mov    %rax,%rdi
  800420326f:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  8004203276:	00 00 00 
  8004203279:	ff d0                	callq  *%rax
  800420327b:	eb 05                	jmp    8004203282 <pml4e_walk+0x272>
  800420327d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203282:	48 83 c4 68          	add    $0x68,%rsp
  8004203286:	5b                   	pop    %rbx
  8004203287:	5d                   	pop    %rbp
  8004203288:	c3                   	retq   

0000008004203289 <pdpe_walk>:
  8004203289:	55                   	push   %rbp
  800420328a:	48 89 e5             	mov    %rsp,%rbp
  800420328d:	53                   	push   %rbx
  800420328e:	48 83 ec 68          	sub    $0x68,%rsp
  8004203292:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203296:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420329a:	89 55 9c             	mov    %edx,-0x64(%rbp)
  800420329d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032a2:	0f 84 4e 02 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  80042032a8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032ac:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032b0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032bc:	00 
  80042032bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032c1:	48 01 d0             	add    %rdx,%rax
  80042032c4:	48 8b 00             	mov    (%rax),%rax
  80042032c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032cf:	83 e0 01             	and    $0x1,%eax
  80042032d2:	48 85 c0             	test   %rax,%rax
  80042032d5:	0f 85 7f 01 00 00    	jne    800420345a <pdpe_walk+0x1d1>
  80042032db:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032df:	0f 84 75 01 00 00    	je     800420345a <pdpe_walk+0x1d1>
  80042032e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032ec:	00 
  80042032ed:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032f2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042032f9:	00 00 00 
  80042032fc:	ff d0                	callq  *%rax
  80042032fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203302:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203307:	0f 84 43 01 00 00    	je     8004203450 <pdpe_walk+0x1c7>
  800420330d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203311:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203315:	8d 50 01             	lea    0x1(%rax),%edx
  8004203318:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203320:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203324:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203328:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420332d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203334:	00 
  8004203335:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203339:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420333d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203341:	48 89 c7             	mov    %rax,%rdi
  8004203344:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420334b:	00 00 00 
  800420334e:	ff d0                	callq  *%rax
  8004203350:	48 83 c8 07          	or     $0x7,%rax
  8004203354:	48 89 03             	mov    %rax,(%rbx)
  8004203357:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420335b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420335f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203364:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420336b:	00 
  800420336c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203370:	48 01 d0             	add    %rdx,%rax
  8004203373:	48 8b 00             	mov    (%rax),%rax
  8004203376:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420337c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203384:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203388:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420338b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420338e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203395:	00 00 00 
  8004203398:	48 8b 00             	mov    (%rax),%rax
  800420339b:	48 39 c2             	cmp    %rax,%rdx
  800420339e:	72 32                	jb     80042033d2 <pdpe_walk+0x149>
  80042033a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033a4:	48 89 c1             	mov    %rax,%rcx
  80042033a7:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  80042033ae:	00 00 00 
  80042033b1:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033b6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042033bd:	00 00 00 
  80042033c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042033cc:	00 00 00 
  80042033cf:	41 ff d0             	callq  *%r8
  80042033d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033d9:	00 00 00 
  80042033dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033e0:	48 01 d0             	add    %rdx,%rax
  80042033e3:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033e6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ea:	48 89 ce             	mov    %rcx,%rsi
  80042033ed:	48 89 c7             	mov    %rax,%rdi
  80042033f0:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042033f7:	00 00 00 
  80042033fa:	ff d0                	callq  *%rax
  80042033fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203400:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203405:	74 09                	je     8004203410 <pdpe_walk+0x187>
  8004203407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420340b:	e9 eb 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203410:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203414:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203418:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420341d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203424:	00 
  8004203425:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203429:	48 01 d0             	add    %rdx,%rax
  800420342c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203433:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203437:	48 89 c7             	mov    %rax,%rdi
  800420343a:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203441:	00 00 00 
  8004203444:	ff d0                	callq  *%rax
  8004203446:	b8 00 00 00 00       	mov    $0x0,%eax
  800420344b:	e9 ab 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203450:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203455:	e9 a1 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  800420345a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420345e:	83 e0 01             	and    $0x1,%eax
  8004203461:	48 85 c0             	test   %rax,%rax
  8004203464:	0f 84 8c 00 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  800420346a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203474:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420347c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203480:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203483:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203486:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420348d:	00 00 00 
  8004203490:	48 8b 00             	mov    (%rax),%rax
  8004203493:	48 39 c2             	cmp    %rax,%rdx
  8004203496:	72 32                	jb     80042034ca <pdpe_walk+0x241>
  8004203498:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420349c:	48 89 c1             	mov    %rax,%rcx
  800420349f:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  80042034a6:	00 00 00 
  80042034a9:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ae:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042034b5:	00 00 00 
  80042034b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042034c4:	00 00 00 
  80042034c7:	41 ff d0             	callq  *%r8
  80042034ca:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034d1:	00 00 00 
  80042034d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034d8:	48 01 d0             	add    %rdx,%rax
  80042034db:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034de:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034e2:	48 89 ce             	mov    %rcx,%rsi
  80042034e5:	48 89 c7             	mov    %rax,%rdi
  80042034e8:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042034ef:	00 00 00 
  80042034f2:	ff d0                	callq  *%rax
  80042034f4:	eb 05                	jmp    80042034fb <pdpe_walk+0x272>
  80042034f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034fb:	48 83 c4 68          	add    $0x68,%rsp
  80042034ff:	5b                   	pop    %rbx
  8004203500:	5d                   	pop    %rbp
  8004203501:	c3                   	retq   

0000008004203502 <pgdir_walk>:
  8004203502:	55                   	push   %rbp
  8004203503:	48 89 e5             	mov    %rsp,%rbp
  8004203506:	53                   	push   %rbx
  8004203507:	48 83 ec 58          	sub    $0x58,%rsp
  800420350b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420350f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203513:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203516:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800420351b:	0f 84 fd 01 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203521:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203525:	48 c1 e8 15          	shr    $0x15,%rax
  8004203529:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420352e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203535:	00 
  8004203536:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420353a:	48 01 d0             	add    %rdx,%rax
  800420353d:	48 8b 00             	mov    (%rax),%rax
  8004203540:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203548:	83 e0 01             	and    $0x1,%eax
  800420354b:	48 85 c0             	test   %rax,%rax
  800420354e:	0f 85 2f 01 00 00    	jne    8004203683 <pgdir_walk+0x181>
  8004203554:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203558:	0f 84 25 01 00 00    	je     8004203683 <pgdir_walk+0x181>
  800420355e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203565:	00 
  8004203566:	bf 01 00 00 00       	mov    $0x1,%edi
  800420356b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203572:	00 00 00 
  8004203575:	ff d0                	callq  *%rax
  8004203577:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420357b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203580:	0f 84 f3 00 00 00    	je     8004203679 <pgdir_walk+0x177>
  8004203586:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420358a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420358e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203591:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203595:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203599:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420359d:	48 c1 e8 15          	shr    $0x15,%rax
  80042035a1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035ad:	00 
  80042035ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035b2:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035ba:	48 89 c7             	mov    %rax,%rdi
  80042035bd:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042035c4:	00 00 00 
  80042035c7:	ff d0                	callq  *%rax
  80042035c9:	48 83 c8 07          	or     $0x7,%rax
  80042035cd:	48 89 03             	mov    %rax,(%rbx)
  80042035d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035d4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035d8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035e4:	00 
  80042035e5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ed:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035f2:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  80042035f9:	00 
  80042035fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035fe:	48 01 c8             	add    %rcx,%rax
  8004203601:	48 8b 00             	mov    (%rax),%rax
  8004203604:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420360a:	48 01 d0             	add    %rdx,%rax
  800420360d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203615:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203619:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420361c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420361f:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203626:	00 00 00 
  8004203629:	48 8b 00             	mov    (%rax),%rax
  800420362c:	48 39 c2             	cmp    %rax,%rdx
  800420362f:	72 32                	jb     8004203663 <pgdir_walk+0x161>
  8004203631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203635:	48 89 c1             	mov    %rax,%rcx
  8004203638:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  800420363f:	00 00 00 
  8004203642:	be be 02 00 00       	mov    $0x2be,%esi
  8004203647:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420364e:	00 00 00 
  8004203651:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203656:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420365d:	00 00 00 
  8004203660:	41 ff d0             	callq  *%r8
  8004203663:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420366a:	00 00 00 
  800420366d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203671:	48 01 d0             	add    %rdx,%rax
  8004203674:	e9 aa 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203679:	b8 00 00 00 00       	mov    $0x0,%eax
  800420367e:	e9 a0 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203687:	83 e0 01             	and    $0x1,%eax
  800420368a:	48 85 c0             	test   %rax,%rax
  800420368d:	0f 84 8b 00 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203693:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203697:	48 c1 e8 0c          	shr    $0xc,%rax
  800420369b:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036a7:	00 
  80042036a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036b2:	48 01 d0             	add    %rdx,%rax
  80042036b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036c1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036c4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036c7:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042036ce:	00 00 00 
  80042036d1:	48 8b 00             	mov    (%rax),%rax
  80042036d4:	48 39 c2             	cmp    %rax,%rdx
  80042036d7:	72 32                	jb     800420370b <pgdir_walk+0x209>
  80042036d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036dd:	48 89 c1             	mov    %rax,%rcx
  80042036e0:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  80042036e7:	00 00 00 
  80042036ea:	be c3 02 00 00       	mov    $0x2c3,%esi
  80042036ef:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042036f6:	00 00 00 
  80042036f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042036fe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203705:	00 00 00 
  8004203708:	41 ff d0             	callq  *%r8
  800420370b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203712:	00 00 00 
  8004203715:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203719:	48 01 d0             	add    %rdx,%rax
  800420371c:	eb 05                	jmp    8004203723 <pgdir_walk+0x221>
  800420371e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203723:	48 83 c4 58          	add    $0x58,%rsp
  8004203727:	5b                   	pop    %rbx
  8004203728:	5d                   	pop    %rbp
  8004203729:	c3                   	retq   

000000800420372a <boot_map_region>:
  800420372a:	55                   	push   %rbp
  800420372b:	48 89 e5             	mov    %rsp,%rbp
  800420372e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203732:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203736:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420373a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420373e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203742:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203746:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420374d:	00 
  800420374e:	e9 aa 02 00 00       	jmpq   80042039fd <boot_map_region+0x2d3>
  8004203753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203757:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420375b:	48 01 d0             	add    %rdx,%rax
  800420375e:	48 89 c1             	mov    %rax,%rcx
  8004203761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203765:	ba 01 00 00 00       	mov    $0x1,%edx
  800420376a:	48 89 ce             	mov    %rcx,%rsi
  800420376d:	48 89 c7             	mov    %rax,%rdi
  8004203770:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203777:	00 00 00 
  800420377a:	ff d0                	callq  *%rax
  800420377c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203784:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203788:	48 01 d0             	add    %rdx,%rax
  800420378b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420378f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004203794:	74 23                	je     80042037b9 <boot_map_region+0x8f>
  8004203796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420379a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037a0:	48 89 c2             	mov    %rax,%rdx
  80042037a3:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037a6:	48 98                	cltq   
  80042037a8:	48 09 d0             	or     %rdx,%rax
  80042037ab:	48 83 c8 01          	or     $0x1,%rax
  80042037af:	48 89 c2             	mov    %rax,%rdx
  80042037b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037b6:	48 89 10             	mov    %rdx,(%rax)
  80042037b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037c1:	48 01 d0             	add    %rdx,%rax
  80042037c4:	48 c1 e8 27          	shr    $0x27,%rax
  80042037c8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037d4:	00 
  80042037d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037d9:	48 01 d0             	add    %rdx,%rax
  80042037dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037e0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037e4:	48 01 ca             	add    %rcx,%rdx
  80042037e7:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037eb:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037f1:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042037f8:	00 
  80042037f9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042037fd:	48 01 ca             	add    %rcx,%rdx
  8004203800:	48 8b 0a             	mov    (%rdx),%rcx
  8004203803:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203806:	48 63 d2             	movslq %edx,%rdx
  8004203809:	48 09 ca             	or     %rcx,%rdx
  800420380c:	48 83 ca 01          	or     $0x1,%rdx
  8004203810:	48 89 10             	mov    %rdx,(%rax)
  8004203813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203817:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420381b:	48 01 d0             	add    %rdx,%rax
  800420381e:	48 c1 e8 27          	shr    $0x27,%rax
  8004203822:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203827:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420382e:	00 
  800420382f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203833:	48 01 d0             	add    %rdx,%rax
  8004203836:	48 8b 00             	mov    (%rax),%rax
  8004203839:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420383f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203847:	48 c1 e8 0c          	shr    $0xc,%rax
  800420384b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420384e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203851:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203858:	00 00 00 
  800420385b:	48 8b 00             	mov    (%rax),%rax
  800420385e:	48 39 c2             	cmp    %rax,%rdx
  8004203861:	72 32                	jb     8004203895 <boot_map_region+0x16b>
  8004203863:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203867:	48 89 c1             	mov    %rax,%rcx
  800420386a:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004203871:	00 00 00 
  8004203874:	be e6 02 00 00       	mov    $0x2e6,%esi
  8004203879:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004203880:	00 00 00 
  8004203883:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203888:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420388f:	00 00 00 
  8004203892:	41 ff d0             	callq  *%r8
  8004203895:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420389c:	00 00 00 
  800420389f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038a3:	48 01 d0             	add    %rdx,%rax
  80042038a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ae:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038b2:	48 01 d0             	add    %rdx,%rax
  80042038b5:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038be:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038c5:	00 
  80042038c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038ca:	48 01 d0             	add    %rdx,%rax
  80042038cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038d1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038d5:	48 01 ca             	add    %rcx,%rdx
  80042038d8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038dc:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038e2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038e9:	00 
  80042038ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038ee:	48 01 ca             	add    %rcx,%rdx
  80042038f1:	48 8b 0a             	mov    (%rdx),%rcx
  80042038f4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042038f7:	48 63 d2             	movslq %edx,%rdx
  80042038fa:	48 09 ca             	or     %rcx,%rdx
  80042038fd:	48 83 ca 01          	or     $0x1,%rdx
  8004203901:	48 89 10             	mov    %rdx,(%rax)
  8004203904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203908:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420390c:	48 01 d0             	add    %rdx,%rax
  800420390f:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203913:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203918:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420391f:	00 
  8004203920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203924:	48 01 d0             	add    %rdx,%rax
  8004203927:	48 8b 00             	mov    (%rax),%rax
  800420392a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203930:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203934:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203938:	48 c1 e8 0c          	shr    $0xc,%rax
  800420393c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420393f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203942:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203949:	00 00 00 
  800420394c:	48 8b 00             	mov    (%rax),%rax
  800420394f:	48 39 c2             	cmp    %rax,%rdx
  8004203952:	72 32                	jb     8004203986 <boot_map_region+0x25c>
  8004203954:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203958:	48 89 c1             	mov    %rax,%rcx
  800420395b:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004203962:	00 00 00 
  8004203965:	be e8 02 00 00       	mov    $0x2e8,%esi
  800420396a:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004203971:	00 00 00 
  8004203974:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203979:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203980:	00 00 00 
  8004203983:	41 ff d0             	callq  *%r8
  8004203986:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420398d:	00 00 00 
  8004203990:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203994:	48 01 d0             	add    %rdx,%rax
  8004203997:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420399b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420399f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039a3:	48 01 d0             	add    %rdx,%rax
  80042039a6:	48 c1 e8 15          	shr    $0x15,%rax
  80042039aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039b6:	00 
  80042039b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039bb:	48 01 d0             	add    %rdx,%rax
  80042039be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039c2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039c6:	48 01 ca             	add    %rcx,%rdx
  80042039c9:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039cd:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039d3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039da:	00 
  80042039db:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039df:	48 01 ca             	add    %rcx,%rdx
  80042039e2:	48 8b 0a             	mov    (%rdx),%rcx
  80042039e5:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039e8:	48 63 d2             	movslq %edx,%rdx
  80042039eb:	48 09 ca             	or     %rcx,%rdx
  80042039ee:	48 83 ca 01          	or     $0x1,%rdx
  80042039f2:	48 89 10             	mov    %rdx,(%rax)
  80042039f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042039fc:	00 
  80042039fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a01:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a05:	0f 82 48 fd ff ff    	jb     8004203753 <boot_map_region+0x29>
  8004203a0b:	c9                   	leaveq 
  8004203a0c:	c3                   	retq   

0000008004203a0d <page_insert>:
  8004203a0d:	55                   	push   %rbp
  8004203a0e:	48 89 e5             	mov    %rsp,%rbp
  8004203a11:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a19:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a1d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a21:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a29:	0f 84 47 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a2f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a34:	0f 84 3c 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a3a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a42:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a47:	48 89 ce             	mov    %rcx,%rsi
  8004203a4a:	48 89 c7             	mov    %rax,%rdi
  8004203a4d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203a54:	00 00 00 
  8004203a57:	ff d0                	callq  *%rax
  8004203a59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a62:	0f 84 07 03 00 00    	je     8004203d6f <page_insert+0x362>
  8004203a68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a6c:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a70:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a75:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a7c:	00 
  8004203a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a81:	48 01 d0             	add    %rdx,%rax
  8004203a84:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a88:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a8c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a92:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a99:	00 
  8004203a9a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203a9e:	48 01 ca             	add    %rcx,%rdx
  8004203aa1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203aa4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203aa7:	80 e6 f1             	and    $0xf1,%dh
  8004203aaa:	48 63 d2             	movslq %edx,%rdx
  8004203aad:	48 09 ca             	or     %rcx,%rdx
  8004203ab0:	48 89 10             	mov    %rdx,(%rax)
  8004203ab3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ab7:	48 c1 e8 27          	shr    $0x27,%rax
  8004203abb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ac0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ac7:	00 
  8004203ac8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203acc:	48 01 d0             	add    %rdx,%rax
  8004203acf:	48 8b 00             	mov    (%rax),%rax
  8004203ad2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ad8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203ae0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203ae4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203ae7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203aea:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203af1:	00 00 00 
  8004203af4:	48 8b 00             	mov    (%rax),%rax
  8004203af7:	48 39 c2             	cmp    %rax,%rdx
  8004203afa:	72 32                	jb     8004203b2e <page_insert+0x121>
  8004203afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b00:	48 89 c1             	mov    %rax,%rcx
  8004203b03:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004203b0a:	00 00 00 
  8004203b0d:	be 13 03 00 00       	mov    $0x313,%esi
  8004203b12:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004203b19:	00 00 00 
  8004203b1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203b28:	00 00 00 
  8004203b2b:	41 ff d0             	callq  *%r8
  8004203b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b35:	00 00 00 
  8004203b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b3c:	48 01 d0             	add    %rdx,%rax
  8004203b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b47:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b4b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b50:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b57:	00 
  8004203b58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b5c:	48 01 d0             	add    %rdx,%rax
  8004203b5f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b63:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b67:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b6d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b74:	00 
  8004203b75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b79:	48 01 ca             	add    %rcx,%rdx
  8004203b7c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b7f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b82:	80 e6 f1             	and    $0xf1,%dh
  8004203b85:	48 63 d2             	movslq %edx,%rdx
  8004203b88:	48 09 ca             	or     %rcx,%rdx
  8004203b8b:	48 89 10             	mov    %rdx,(%rax)
  8004203b8e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b92:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b96:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b9b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ba2:	00 
  8004203ba3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ba7:	48 01 d0             	add    %rdx,%rax
  8004203baa:	48 8b 00             	mov    (%rax),%rax
  8004203bad:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bb3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bbb:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bbf:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bc2:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bc5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004203bcc:	00 00 00 
  8004203bcf:	48 8b 00             	mov    (%rax),%rax
  8004203bd2:	48 39 c2             	cmp    %rax,%rdx
  8004203bd5:	72 32                	jb     8004203c09 <page_insert+0x1fc>
  8004203bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bdb:	48 89 c1             	mov    %rax,%rcx
  8004203bde:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004203be5:	00 00 00 
  8004203be8:	be 15 03 00 00       	mov    $0x315,%esi
  8004203bed:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004203bf4:	00 00 00 
  8004203bf7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203bfc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203c03:	00 00 00 
  8004203c06:	41 ff d0             	callq  *%r8
  8004203c09:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c10:	00 00 00 
  8004203c13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c17:	48 01 d0             	add    %rdx,%rax
  8004203c1a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c22:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c26:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c32:	00 
  8004203c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c37:	48 01 d0             	add    %rdx,%rax
  8004203c3a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c3e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c42:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c48:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c4f:	00 
  8004203c50:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c54:	48 01 ca             	add    %rcx,%rdx
  8004203c57:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c5a:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c5d:	80 e6 f1             	and    $0xf1,%dh
  8004203c60:	48 63 d2             	movslq %edx,%rdx
  8004203c63:	48 09 ca             	or     %rcx,%rdx
  8004203c66:	48 89 10             	mov    %rdx,(%rax)
  8004203c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c6d:	48 8b 00             	mov    (%rax),%rax
  8004203c70:	83 e0 01             	and    $0x1,%eax
  8004203c73:	48 85 c0             	test   %rax,%rax
  8004203c76:	74 70                	je     8004203ce8 <page_insert+0x2db>
  8004203c78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c7c:	48 89 c7             	mov    %rax,%rdi
  8004203c7f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203c86:	00 00 00 
  8004203c89:	ff d0                	callq  *%rax
  8004203c8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c8f:	48 8b 12             	mov    (%rdx),%rdx
  8004203c92:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203c99:	48 39 d0             	cmp    %rdx,%rax
  8004203c9c:	75 4a                	jne    8004203ce8 <page_insert+0x2db>
  8004203c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ca2:	48 8b 00             	mov    (%rax),%rax
  8004203ca5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cab:	48 89 c2             	mov    %rax,%rdx
  8004203cae:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cb1:	48 98                	cltq   
  8004203cb3:	48 09 d0             	or     %rdx,%rax
  8004203cb6:	48 83 c8 01          	or     $0x1,%rax
  8004203cba:	48 89 c2             	mov    %rax,%rdx
  8004203cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cc1:	48 89 10             	mov    %rdx,(%rax)
  8004203cc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ccc:	48 89 d6             	mov    %rdx,%rsi
  8004203ccf:	48 89 c7             	mov    %rax,%rdi
  8004203cd2:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203cd9:	00 00 00 
  8004203cdc:	ff d0                	callq  *%rax
  8004203cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ce3:	e9 93 00 00 00       	jmpq   8004203d7b <page_insert+0x36e>
  8004203ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cec:	48 8b 00             	mov    (%rax),%rax
  8004203cef:	83 e0 01             	and    $0x1,%eax
  8004203cf2:	48 85 c0             	test   %rax,%rax
  8004203cf5:	74 1a                	je     8004203d11 <page_insert+0x304>
  8004203cf7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cff:	48 89 d6             	mov    %rdx,%rsi
  8004203d02:	48 89 c7             	mov    %rax,%rdi
  8004203d05:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004203d0c:	00 00 00 
  8004203d0f:	ff d0                	callq  *%rax
  8004203d11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d15:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d19:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d1c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d20:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d28:	48 89 c7             	mov    %rax,%rdi
  8004203d2b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203d32:	00 00 00 
  8004203d35:	ff d0                	callq  *%rax
  8004203d37:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d3a:	48 63 d2             	movslq %edx,%rdx
  8004203d3d:	48 09 d0             	or     %rdx,%rax
  8004203d40:	48 83 c8 01          	or     $0x1,%rax
  8004203d44:	48 89 c2             	mov    %rax,%rdx
  8004203d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d4b:	48 89 10             	mov    %rdx,(%rax)
  8004203d4e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d56:	48 89 d6             	mov    %rdx,%rsi
  8004203d59:	48 89 c7             	mov    %rax,%rdi
  8004203d5c:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203d63:	00 00 00 
  8004203d66:	ff d0                	callq  *%rax
  8004203d68:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d6d:	eb 0c                	jmp    8004203d7b <page_insert+0x36e>
  8004203d6f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d74:	eb 05                	jmp    8004203d7b <page_insert+0x36e>
  8004203d76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d7b:	c9                   	leaveq 
  8004203d7c:	c3                   	retq   

0000008004203d7d <page_lookup>:
  8004203d7d:	55                   	push   %rbp
  8004203d7e:	48 89 e5             	mov    %rsp,%rbp
  8004203d81:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d89:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d8d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d91:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203d96:	74 69                	je     8004203e01 <page_lookup+0x84>
  8004203d98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203da0:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203da5:	48 89 ce             	mov    %rcx,%rsi
  8004203da8:	48 89 c7             	mov    %rax,%rdi
  8004203dab:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203db2:	00 00 00 
  8004203db5:	ff d0                	callq  *%rax
  8004203db7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dbb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dc0:	74 3f                	je     8004203e01 <page_lookup+0x84>
  8004203dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dc6:	48 8b 00             	mov    (%rax),%rax
  8004203dc9:	83 e0 01             	and    $0x1,%eax
  8004203dcc:	48 85 c0             	test   %rax,%rax
  8004203dcf:	74 30                	je     8004203e01 <page_lookup+0x84>
  8004203dd1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203dd6:	74 0b                	je     8004203de3 <page_lookup+0x66>
  8004203dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203ddc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203de0:	48 89 10             	mov    %rdx,(%rax)
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c7             	mov    %rax,%rdi
  8004203df3:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004203dfa:	00 00 00 
  8004203dfd:	ff d0                	callq  *%rax
  8004203dff:	eb 05                	jmp    8004203e06 <page_lookup+0x89>
  8004203e01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e06:	c9                   	leaveq 
  8004203e07:	c3                   	retq   

0000008004203e08 <page_remove>:
  8004203e08:	55                   	push   %rbp
  8004203e09:	48 89 e5             	mov    %rsp,%rbp
  8004203e0c:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e18:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e24:	48 89 ce             	mov    %rcx,%rsi
  8004203e27:	48 89 c7             	mov    %rax,%rdi
  8004203e2a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004203e31:	00 00 00 
  8004203e34:	ff d0                	callq  *%rax
  8004203e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e3f:	74 38                	je     8004203e79 <page_remove+0x71>
  8004203e41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e49:	48 89 d6             	mov    %rdx,%rsi
  8004203e4c:	48 89 c7             	mov    %rax,%rdi
  8004203e4f:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203e56:	00 00 00 
  8004203e59:	ff d0                	callq  *%rax
  8004203e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e5f:	48 89 c7             	mov    %rax,%rdi
  8004203e62:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203e69:	00 00 00 
  8004203e6c:	ff d0                	callq  *%rax
  8004203e6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e79:	c9                   	leaveq 
  8004203e7a:	c3                   	retq   

0000008004203e7b <tlb_invalidate>:
  8004203e7b:	55                   	push   %rbp
  8004203e7c:	48 89 e5             	mov    %rsp,%rbp
  8004203e7f:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e90:	75 35                	jne    8004203ec7 <tlb_invalidate+0x4c>
  8004203e92:	48 b9 37 d3 21 04 80 	movabs $0x800421d337,%rcx
  8004203e99:	00 00 00 
  8004203e9c:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004203ea3:	00 00 00 
  8004203ea6:	be 72 03 00 00       	mov    $0x372,%esi
  8004203eab:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004203eb2:	00 00 00 
  8004203eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203ec1:	00 00 00 
  8004203ec4:	41 ff d0             	callq  *%r8
  8004203ec7:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004203ece:	00 00 00 
  8004203ed1:	ff d0                	callq  *%rax
  8004203ed3:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004203eda:	00 00 00 
  8004203edd:	48 98                	cltq   
  8004203edf:	48 c1 e0 03          	shl    $0x3,%rax
  8004203ee3:	48 89 c1             	mov    %rax,%rcx
  8004203ee6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203eea:	48 01 c8             	add    %rcx,%rax
  8004203eed:	48 01 d0             	add    %rdx,%rax
  8004203ef0:	48 83 c0 08          	add    $0x8,%rax
  8004203ef4:	48 8b 00             	mov    (%rax),%rax
  8004203ef7:	48 85 c0             	test   %rax,%rax
  8004203efa:	74 3d                	je     8004203f39 <tlb_invalidate+0xbe>
  8004203efc:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004203f03:	00 00 00 
  8004203f06:	ff d0                	callq  *%rax
  8004203f08:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004203f0f:	00 00 00 
  8004203f12:	48 98                	cltq   
  8004203f14:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f18:	48 89 c1             	mov    %rax,%rcx
  8004203f1b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f1f:	48 01 c8             	add    %rcx,%rax
  8004203f22:	48 01 d0             	add    %rdx,%rax
  8004203f25:	48 83 c0 08          	add    $0x8,%rax
  8004203f29:	48 8b 00             	mov    (%rax),%rax
  8004203f2c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f33:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f37:	75 0f                	jne    8004203f48 <tlb_invalidate+0xcd>
  8004203f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f45:	0f 01 38             	invlpg (%rax)
  8004203f48:	c9                   	leaveq 
  8004203f49:	c3                   	retq   

0000008004203f4a <mmio_map_region>:
  8004203f4a:	55                   	push   %rbp
  8004203f4b:	48 89 e5             	mov    %rsp,%rbp
  8004203f4e:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f56:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f5a:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203f61:	00 00 00 
  8004203f64:	48 8b 00             	mov    (%rax),%rax
  8004203f67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f6b:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f72:	00 
  8004203f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f7b:	48 01 d0             	add    %rdx,%rax
  8004203f7e:	48 83 e8 01          	sub    $0x1,%rax
  8004203f82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f8f:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f93:	48 89 d0             	mov    %rdx,%rax
  8004203f96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203f9a:	48 29 c2             	sub    %rax,%rdx
  8004203f9d:	48 89 d0             	mov    %rdx,%rax
  8004203fa0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fa4:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203fab:	00 00 00 
  8004203fae:	48 8b 10             	mov    (%rax),%rdx
  8004203fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fb5:	48 01 c2             	add    %rax,%rdx
  8004203fb8:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203fbf:	00 00 00 
  8004203fc2:	48 89 10             	mov    %rdx,(%rax)
  8004203fc5:	48 b8 e0 35 23 04 80 	movabs $0x80042335e0,%rax
  8004203fcc:	00 00 00 
  8004203fcf:	48 8b 10             	mov    (%rax),%rdx
  8004203fd2:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fd9:	00 00 00 
  8004203fdc:	48 39 c2             	cmp    %rax,%rdx
  8004203fdf:	76 2a                	jbe    800420400b <mmio_map_region+0xc1>
  8004203fe1:	48 ba 48 d3 21 04 80 	movabs $0x800421d348,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004203ff0:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004204006:	00 00 00 
  8004204009:	ff d1                	callq  *%rcx
  800420400b:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004204012:	00 00 00 
  8004204015:	48 8b 00             	mov    (%rax),%rax
  8004204018:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420401c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204020:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204024:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420402a:	48 89 c7             	mov    %rax,%rdi
  800420402d:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004204034:	00 00 00 
  8004204037:	ff d0                	callq  *%rax
  8004204039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420403d:	c9                   	leaveq 
  800420403e:	c3                   	retq   

000000800420403f <user_mem_check>:
  800420403f:	55                   	push   %rbp
  8004204040:	48 89 e5             	mov    %rsp,%rbp
  8004204043:	48 83 ec 40          	sub    $0x40,%rsp
  8004204047:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420404b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420404f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204053:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204056:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420405a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420405e:	48 01 d0             	add    %rdx,%rax
  8004204061:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204065:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204069:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004204070:	00 00 00 
  8004204073:	48 39 c2             	cmp    %rax,%rdx
  8004204076:	77 0a                	ja     8004204082 <user_mem_check+0x43>
  8004204078:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420407c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204080:	76 1b                	jbe    800420409d <user_mem_check+0x5e>
  8004204082:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204086:	48 b8 40 b2 4d 04 80 	movabs $0x80044db240,%rax
  800420408d:	00 00 00 
  8004204090:	48 89 10             	mov    %rdx,(%rax)
  8004204093:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204098:	e9 c0 00 00 00       	jmpq   800420415d <user_mem_check+0x11e>
  800420409d:	e9 a8 00 00 00       	jmpq   800420414a <user_mem_check+0x10b>
  80042040a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040a6:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040b1:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040b6:	48 89 ce             	mov    %rcx,%rsi
  80042040b9:	48 89 c7             	mov    %rax,%rdi
  80042040bc:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042040c3:	00 00 00 
  80042040c6:	ff d0                	callq  *%rax
  80042040c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040d1:	74 1f                	je     80042040f2 <user_mem_check+0xb3>
  80042040d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040d7:	48 8b 10             	mov    (%rax),%rdx
  80042040da:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040dd:	83 c8 01             	or     $0x1,%eax
  80042040e0:	48 98                	cltq   
  80042040e2:	48 21 c2             	and    %rax,%rdx
  80042040e5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e8:	83 c8 01             	or     $0x1,%eax
  80042040eb:	48 98                	cltq   
  80042040ed:	48 39 c2             	cmp    %rax,%rdx
  80042040f0:	74 18                	je     800420410a <user_mem_check+0xcb>
  80042040f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040f6:	48 b8 40 b2 4d 04 80 	movabs $0x80044db240,%rax
  80042040fd:	00 00 00 
  8004204100:	48 89 10             	mov    %rdx,(%rax)
  8004204103:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204108:	eb 53                	jmp    800420415d <user_mem_check+0x11e>
  800420410a:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204111:	00 
  8004204112:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204116:	48 83 c0 01          	add    $0x1,%rax
  800420411a:	48 89 c2             	mov    %rax,%rdx
  800420411d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204121:	48 01 d0             	add    %rdx,%rax
  8004204124:	48 83 e8 01          	sub    $0x1,%rax
  8004204128:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420412c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204130:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204135:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204139:	48 89 d0             	mov    %rdx,%rax
  800420413c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204140:	48 29 c2             	sub    %rax,%rdx
  8004204143:	48 89 d0             	mov    %rdx,%rax
  8004204146:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420414a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420414e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204152:	0f 82 4a ff ff ff    	jb     80042040a2 <user_mem_check+0x63>
  8004204158:	b8 00 00 00 00       	mov    $0x0,%eax
  800420415d:	c9                   	leaveq 
  800420415e:	c3                   	retq   

000000800420415f <user_mem_assert>:
  800420415f:	55                   	push   %rbp
  8004204160:	48 89 e5             	mov    %rsp,%rbp
  8004204163:	48 83 ec 20          	sub    $0x20,%rsp
  8004204167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420416b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420416f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004204173:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204176:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204179:	83 c8 04             	or     $0x4,%eax
  800420417c:	89 c1                	mov    %eax,%ecx
  800420417e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004204182:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420418a:	48 89 c7             	mov    %rax,%rdi
  800420418d:	48 b8 3f 40 20 04 80 	movabs $0x800420403f,%rax
  8004204194:	00 00 00 
  8004204197:	ff d0                	callq  *%rax
  8004204199:	85 c0                	test   %eax,%eax
  800420419b:	79 47                	jns    80042041e4 <user_mem_assert+0x85>
  800420419d:	48 b8 40 b2 4d 04 80 	movabs $0x80044db240,%rax
  80042041a4:	00 00 00 
  80042041a7:	48 8b 10             	mov    (%rax),%rdx
  80042041aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ae:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041b4:	89 c6                	mov    %eax,%esi
  80042041b6:	48 bf 68 d3 21 04 80 	movabs $0x800421d368,%rdi
  80042041bd:	00 00 00 
  80042041c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041c5:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  80042041cc:	00 00 00 
  80042041cf:	ff d1                	callq  *%rcx
  80042041d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041d5:	48 89 c7             	mov    %rax,%rdi
  80042041d8:	48 b8 c7 94 20 04 80 	movabs $0x80042094c7,%rax
  80042041df:	00 00 00 
  80042041e2:	ff d0                	callq  *%rax
  80042041e4:	c9                   	leaveq 
  80042041e5:	c3                   	retq   

00000080042041e6 <check_page_free_list>:
  80042041e6:	55                   	push   %rbp
  80042041e7:	48 89 e5             	mov    %rsp,%rbp
  80042041ea:	48 83 ec 60          	sub    $0x60,%rsp
  80042041ee:	89 f8                	mov    %edi,%eax
  80042041f0:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041f3:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  80042041f7:	74 07                	je     8004204200 <check_page_free_list+0x1a>
  80042041f9:	b8 01 00 00 00       	mov    $0x1,%eax
  80042041fe:	eb 05                	jmp    8004204205 <check_page_free_list+0x1f>
  8004204200:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204205:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204208:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420420f:	00 
  8004204210:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204217:	00 
  8004204218:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420421f:	00 00 00 
  8004204222:	48 8b 00             	mov    (%rax),%rax
  8004204225:	48 85 c0             	test   %rax,%rax
  8004204228:	75 2a                	jne    8004204254 <check_page_free_list+0x6e>
  800420422a:	48 ba a0 d3 21 04 80 	movabs $0x800421d3a0,%rdx
  8004204231:	00 00 00 
  8004204234:	be fd 03 00 00       	mov    $0x3fd,%esi
  8004204239:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204240:	00 00 00 
  8004204243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204248:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420424f:	00 00 00 
  8004204252:	ff d1                	callq  *%rcx
  8004204254:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204258:	0f 84 a9 00 00 00    	je     8004204307 <check_page_free_list+0x121>
  800420425e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004204262:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204266:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  800420426a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420426e:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204275:	00 00 00 
  8004204278:	48 8b 00             	mov    (%rax),%rax
  800420427b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420427f:	eb 58                	jmp    80042042d9 <check_page_free_list+0xf3>
  8004204281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204285:	48 89 c7             	mov    %rax,%rdi
  8004204288:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420428f:	00 00 00 
  8004204292:	ff d0                	callq  *%rax
  8004204294:	48 c1 e8 15          	shr    $0x15,%rax
  8004204298:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420429d:	48 89 c2             	mov    %rax,%rdx
  80042042a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042a3:	48 39 c2             	cmp    %rax,%rdx
  80042042a6:	0f 93 c0             	setae  %al
  80042042a9:	0f b6 c0             	movzbl %al,%eax
  80042042ac:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042af:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042b2:	48 98                	cltq   
  80042042b4:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042bd:	48 89 10             	mov    %rdx,(%rax)
  80042042c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042c7:	48 98                	cltq   
  80042042c9:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042d2:	48 8b 00             	mov    (%rax),%rax
  80042042d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042d9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042de:	75 a1                	jne    8004204281 <check_page_free_list+0x9b>
  80042042e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042e4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042f3:	48 89 10             	mov    %rdx,(%rax)
  80042042f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042042fa:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204301:	00 00 00 
  8004204304:	48 89 10             	mov    %rdx,(%rax)
  8004204307:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420430e:	00 00 00 
  8004204311:	48 8b 00             	mov    (%rax),%rax
  8004204314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204318:	eb 5e                	jmp    8004204378 <check_page_free_list+0x192>
  800420431a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431e:	48 89 c7             	mov    %rax,%rdi
  8004204321:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204328:	00 00 00 
  800420432b:	ff d0                	callq  *%rax
  800420432d:	48 c1 e8 15          	shr    $0x15,%rax
  8004204331:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204336:	48 89 c2             	mov    %rax,%rdx
  8004204339:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420433c:	48 39 c2             	cmp    %rax,%rdx
  800420433f:	73 2c                	jae    800420436d <check_page_free_list+0x187>
  8004204341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204345:	48 89 c7             	mov    %rax,%rdi
  8004204348:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  800420434f:	00 00 00 
  8004204352:	ff d0                	callq  *%rax
  8004204354:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204359:	be 97 00 00 00       	mov    $0x97,%esi
  800420435e:	48 89 c7             	mov    %rax,%rdi
  8004204361:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004204368:	00 00 00 
  800420436b:	ff d0                	callq  *%rax
  800420436d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204371:	48 8b 00             	mov    (%rax),%rax
  8004204374:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204378:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420437d:	75 9b                	jne    800420431a <check_page_free_list+0x134>
  800420437f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204384:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  800420438b:	00 00 00 
  800420438e:	ff d0                	callq  *%rax
  8004204390:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204394:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420439b:	00 00 00 
  800420439e:	48 8b 00             	mov    (%rax),%rax
  80042043a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043a5:	e9 20 03 00 00       	jmpq   80042046ca <check_page_free_list+0x4e4>
  80042043aa:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042043b1:	00 00 00 
  80042043b4:	48 8b 00             	mov    (%rax),%rax
  80042043b7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043bb:	73 35                	jae    80042043f2 <check_page_free_list+0x20c>
  80042043bd:	48 b9 c4 d3 21 04 80 	movabs $0x800421d3c4,%rcx
  80042043c4:	00 00 00 
  80042043c7:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042043ce:	00 00 00 
  80042043d1:	be 17 04 00 00       	mov    $0x417,%esi
  80042043d6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042043dd:	00 00 00 
  80042043e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042043ec:	00 00 00 
  80042043ef:	41 ff d0             	callq  *%r8
  80042043f2:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042043f9:	00 00 00 
  80042043fc:	48 8b 10             	mov    (%rax),%rdx
  80042043ff:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004204406:	00 00 00 
  8004204409:	48 8b 00             	mov    (%rax),%rax
  800420440c:	48 c1 e0 04          	shl    $0x4,%rax
  8004204410:	48 01 d0             	add    %rdx,%rax
  8004204413:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204417:	77 35                	ja     800420444e <check_page_free_list+0x268>
  8004204419:	48 b9 d0 d3 21 04 80 	movabs $0x800421d3d0,%rcx
  8004204420:	00 00 00 
  8004204423:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420442a:	00 00 00 
  800420442d:	be 18 04 00 00       	mov    $0x418,%esi
  8004204432:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204439:	00 00 00 
  800420443c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204441:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204448:	00 00 00 
  800420444b:	41 ff d0             	callq  *%r8
  800420444e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204452:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004204459:	00 00 00 
  800420445c:	48 8b 00             	mov    (%rax),%rax
  800420445f:	48 29 c2             	sub    %rax,%rdx
  8004204462:	48 89 d0             	mov    %rdx,%rax
  8004204465:	83 e0 0f             	and    $0xf,%eax
  8004204468:	48 85 c0             	test   %rax,%rax
  800420446b:	74 35                	je     80042044a2 <check_page_free_list+0x2bc>
  800420446d:	48 b9 e8 d3 21 04 80 	movabs $0x800421d3e8,%rcx
  8004204474:	00 00 00 
  8004204477:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420447e:	00 00 00 
  8004204481:	be 19 04 00 00       	mov    $0x419,%esi
  8004204486:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420448d:	00 00 00 
  8004204490:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204495:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420449c:	00 00 00 
  800420449f:	41 ff d0             	callq  *%r8
  80042044a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044a6:	48 89 c7             	mov    %rax,%rdi
  80042044a9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044b0:	00 00 00 
  80042044b3:	ff d0                	callq  *%rax
  80042044b5:	48 85 c0             	test   %rax,%rax
  80042044b8:	75 35                	jne    80042044ef <check_page_free_list+0x309>
  80042044ba:	48 b9 1a d4 21 04 80 	movabs $0x800421d41a,%rcx
  80042044c1:	00 00 00 
  80042044c4:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042044cb:	00 00 00 
  80042044ce:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042044d3:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042044da:	00 00 00 
  80042044dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042044e9:	00 00 00 
  80042044ec:	41 ff d0             	callq  *%r8
  80042044ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044f3:	48 89 c7             	mov    %rax,%rdi
  80042044f6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044fd:	00 00 00 
  8004204500:	ff d0                	callq  *%rax
  8004204502:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204508:	75 35                	jne    800420453f <check_page_free_list+0x359>
  800420450a:	48 b9 2b d4 21 04 80 	movabs $0x800421d42b,%rcx
  8004204511:	00 00 00 
  8004204514:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420451b:	00 00 00 
  800420451e:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204523:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420452a:	00 00 00 
  800420452d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204532:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204539:	00 00 00 
  800420453c:	41 ff d0             	callq  *%r8
  800420453f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204543:	48 89 c7             	mov    %rax,%rdi
  8004204546:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420454d:	00 00 00 
  8004204550:	ff d0                	callq  *%rax
  8004204552:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204558:	75 35                	jne    800420458f <check_page_free_list+0x3a9>
  800420455a:	48 b9 48 d4 21 04 80 	movabs $0x800421d448,%rcx
  8004204561:	00 00 00 
  8004204564:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420456b:	00 00 00 
  800420456e:	be 1e 04 00 00       	mov    $0x41e,%esi
  8004204573:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420457a:	00 00 00 
  800420457d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204582:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204589:	00 00 00 
  800420458c:	41 ff d0             	callq  *%r8
  800420458f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204593:	48 89 c7             	mov    %rax,%rdi
  8004204596:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420459d:	00 00 00 
  80042045a0:	ff d0                	callq  *%rax
  80042045a2:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045a8:	75 35                	jne    80042045df <check_page_free_list+0x3f9>
  80042045aa:	48 b9 6b d4 21 04 80 	movabs $0x800421d46b,%rcx
  80042045b1:	00 00 00 
  80042045b4:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042045bb:	00 00 00 
  80042045be:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042045c3:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042045ca:	00 00 00 
  80042045cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045d2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042045d9:	00 00 00 
  80042045dc:	41 ff d0             	callq  *%r8
  80042045df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045e3:	48 89 c7             	mov    %rax,%rdi
  80042045e6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042045ed:	00 00 00 
  80042045f0:	ff d0                	callq  *%rax
  80042045f2:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042045f8:	76 4e                	jbe    8004204648 <check_page_free_list+0x462>
  80042045fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045fe:	48 89 c7             	mov    %rax,%rdi
  8004204601:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204608:	00 00 00 
  800420460b:	ff d0                	callq  *%rax
  800420460d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204611:	73 35                	jae    8004204648 <check_page_free_list+0x462>
  8004204613:	48 b9 88 d4 21 04 80 	movabs $0x800421d488,%rcx
  800420461a:	00 00 00 
  800420461d:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204624:	00 00 00 
  8004204627:	be 20 04 00 00       	mov    $0x420,%esi
  800420462c:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204633:	00 00 00 
  8004204636:	b8 00 00 00 00       	mov    $0x0,%eax
  800420463b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204642:	00 00 00 
  8004204645:	41 ff d0             	callq  *%r8
  8004204648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420464c:	48 89 c7             	mov    %rax,%rdi
  800420464f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204656:	00 00 00 
  8004204659:	ff d0                	callq  *%rax
  800420465b:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  8004204661:	75 35                	jne    8004204698 <check_page_free_list+0x4b2>
  8004204663:	48 b9 cd d4 21 04 80 	movabs $0x800421d4cd,%rcx
  800420466a:	00 00 00 
  800420466d:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204674:	00 00 00 
  8004204677:	be 23 04 00 00       	mov    $0x423,%esi
  800420467c:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204683:	00 00 00 
  8004204686:	b8 00 00 00 00       	mov    $0x0,%eax
  800420468b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204692:	00 00 00 
  8004204695:	41 ff d0             	callq  *%r8
  8004204698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420469c:	48 89 c7             	mov    %rax,%rdi
  800420469f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042046a6:	00 00 00 
  80042046a9:	ff d0                	callq  *%rax
  80042046ab:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046b1:	77 07                	ja     80042046ba <check_page_free_list+0x4d4>
  80042046b3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046b8:	eb 05                	jmp    80042046bf <check_page_free_list+0x4d9>
  80042046ba:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046c3:	48 8b 00             	mov    (%rax),%rax
  80042046c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046ca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046cf:	0f 85 d5 fc ff ff    	jne    80042043aa <check_page_free_list+0x1c4>
  80042046d5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046da:	75 35                	jne    8004204711 <check_page_free_list+0x52b>
  80042046dc:	48 b9 ea d4 21 04 80 	movabs $0x800421d4ea,%rcx
  80042046e3:	00 00 00 
  80042046e6:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042046ed:	00 00 00 
  80042046f0:	be 2c 04 00 00       	mov    $0x42c,%esi
  80042046f5:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042046fc:	00 00 00 
  80042046ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204704:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420470b:	00 00 00 
  800420470e:	41 ff d0             	callq  *%r8
  8004204711:	c9                   	leaveq 
  8004204712:	c3                   	retq   

0000008004204713 <check_page_alloc>:
  8004204713:	55                   	push   %rbp
  8004204714:	48 89 e5             	mov    %rsp,%rbp
  8004204717:	48 83 ec 40          	sub    $0x40,%rsp
  800420471b:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204722:	00 00 00 
  8004204725:	48 8b 00             	mov    (%rax),%rax
  8004204728:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420472c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204733:	eb 37                	jmp    800420476c <check_page_alloc+0x59>
  8004204735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204739:	48 89 c7             	mov    %rax,%rdi
  800420473c:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204743:	00 00 00 
  8004204746:	ff d0                	callq  *%rax
  8004204748:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420474d:	be 97 00 00 00       	mov    $0x97,%esi
  8004204752:	48 89 c7             	mov    %rax,%rdi
  8004204755:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  800420475c:	00 00 00 
  800420475f:	ff d0                	callq  *%rax
  8004204761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204765:	48 8b 00             	mov    (%rax),%rax
  8004204768:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420476c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204771:	75 c2                	jne    8004204735 <check_page_alloc+0x22>
  8004204773:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420477a:	00 00 00 
  800420477d:	48 8b 00             	mov    (%rax),%rax
  8004204780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204784:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420478b:	e9 ec 01 00 00       	jmpq   800420497c <check_page_alloc+0x269>
  8004204790:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004204797:	00 00 00 
  800420479a:	48 8b 00             	mov    (%rax),%rax
  800420479d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047a1:	73 35                	jae    80042047d8 <check_page_alloc+0xc5>
  80042047a3:	48 b9 fb d4 21 04 80 	movabs $0x800421d4fb,%rcx
  80042047aa:	00 00 00 
  80042047ad:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042047b4:	00 00 00 
  80042047b7:	be 46 04 00 00       	mov    $0x446,%esi
  80042047bc:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042047c3:	00 00 00 
  80042047c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047cb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042047d2:	00 00 00 
  80042047d5:	41 ff d0             	callq  *%r8
  80042047d8:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042047df:	00 00 00 
  80042047e2:	48 8b 10             	mov    (%rax),%rdx
  80042047e5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042047ec:	00 00 00 
  80042047ef:	48 8b 00             	mov    (%rax),%rax
  80042047f2:	48 c1 e0 04          	shl    $0x4,%rax
  80042047f6:	48 01 d0             	add    %rdx,%rax
  80042047f9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042047fd:	77 35                	ja     8004204834 <check_page_alloc+0x121>
  80042047ff:	48 b9 08 d5 21 04 80 	movabs $0x800421d508,%rcx
  8004204806:	00 00 00 
  8004204809:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204810:	00 00 00 
  8004204813:	be 47 04 00 00       	mov    $0x447,%esi
  8004204818:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420481f:	00 00 00 
  8004204822:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204827:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420482e:	00 00 00 
  8004204831:	41 ff d0             	callq  *%r8
  8004204834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204838:	48 89 c7             	mov    %rax,%rdi
  800420483b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204842:	00 00 00 
  8004204845:	ff d0                	callq  *%rax
  8004204847:	48 85 c0             	test   %rax,%rax
  800420484a:	75 35                	jne    8004204881 <check_page_alloc+0x16e>
  800420484c:	48 b9 1d d5 21 04 80 	movabs $0x800421d51d,%rcx
  8004204853:	00 00 00 
  8004204856:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420485d:	00 00 00 
  8004204860:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204865:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420486c:	00 00 00 
  800420486f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204874:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420487b:	00 00 00 
  800420487e:	41 ff d0             	callq  *%r8
  8004204881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204885:	48 89 c7             	mov    %rax,%rdi
  8004204888:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420488f:	00 00 00 
  8004204892:	ff d0                	callq  *%rax
  8004204894:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420489a:	75 35                	jne    80042048d1 <check_page_alloc+0x1be>
  800420489c:	48 b9 2f d5 21 04 80 	movabs $0x800421d52f,%rcx
  80042048a3:	00 00 00 
  80042048a6:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042048ad:	00 00 00 
  80042048b0:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042048b5:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042048bc:	00 00 00 
  80042048bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042048cb:	00 00 00 
  80042048ce:	41 ff d0             	callq  *%r8
  80042048d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048d5:	48 89 c7             	mov    %rax,%rdi
  80042048d8:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042048df:	00 00 00 
  80042048e2:	ff d0                	callq  *%rax
  80042048e4:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048ea:	75 35                	jne    8004204921 <check_page_alloc+0x20e>
  80042048ec:	48 b9 50 d5 21 04 80 	movabs $0x800421d550,%rcx
  80042048f3:	00 00 00 
  80042048f6:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042048fd:	00 00 00 
  8004204900:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204905:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420490c:	00 00 00 
  800420490f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204914:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420491b:	00 00 00 
  800420491e:	41 ff d0             	callq  *%r8
  8004204921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204925:	48 89 c7             	mov    %rax,%rdi
  8004204928:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420492f:	00 00 00 
  8004204932:	ff d0                	callq  *%rax
  8004204934:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  800420493a:	75 35                	jne    8004204971 <check_page_alloc+0x25e>
  800420493c:	48 b9 74 d5 21 04 80 	movabs $0x800421d574,%rcx
  8004204943:	00 00 00 
  8004204946:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420494d:	00 00 00 
  8004204950:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204955:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420495c:	00 00 00 
  800420495f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204964:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420496b:	00 00 00 
  800420496e:	41 ff d0             	callq  *%r8
  8004204971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204975:	48 8b 00             	mov    (%rax),%rax
  8004204978:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420497c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204981:	0f 85 09 fe ff ff    	jne    8004204790 <check_page_alloc+0x7d>
  8004204987:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420498e:	00 
  800420498f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204993:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204997:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420499b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420499f:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049a4:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049ab:	00 00 00 
  80042049ae:	ff d0                	callq  *%rax
  80042049b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049b4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049b9:	75 35                	jne    80042049f0 <check_page_alloc+0x2dd>
  80042049bb:	48 b9 8f d5 21 04 80 	movabs $0x800421d58f,%rcx
  80042049c2:	00 00 00 
  80042049c5:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042049cc:	00 00 00 
  80042049cf:	be 51 04 00 00       	mov    $0x451,%esi
  80042049d4:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042049db:	00 00 00 
  80042049de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042049ea:	00 00 00 
  80042049ed:	41 ff d0             	callq  *%r8
  80042049f0:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049fc:	00 00 00 
  80042049ff:	ff d0                	callq  *%rax
  8004204a01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a05:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a0a:	75 35                	jne    8004204a41 <check_page_alloc+0x32e>
  8004204a0c:	48 b9 a5 d5 21 04 80 	movabs $0x800421d5a5,%rcx
  8004204a13:	00 00 00 
  8004204a16:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204a1d:	00 00 00 
  8004204a20:	be 52 04 00 00       	mov    $0x452,%esi
  8004204a25:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204a2c:	00 00 00 
  8004204a2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a34:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a3b:	00 00 00 
  8004204a3e:	41 ff d0             	callq  *%r8
  8004204a41:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a46:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204a4d:	00 00 00 
  8004204a50:	ff d0                	callq  *%rax
  8004204a52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a56:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a5b:	75 35                	jne    8004204a92 <check_page_alloc+0x37f>
  8004204a5d:	48 b9 bb d5 21 04 80 	movabs $0x800421d5bb,%rcx
  8004204a64:	00 00 00 
  8004204a67:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204a6e:	00 00 00 
  8004204a71:	be 53 04 00 00       	mov    $0x453,%esi
  8004204a76:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204a7d:	00 00 00 
  8004204a80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a85:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a8c:	00 00 00 
  8004204a8f:	41 ff d0             	callq  *%r8
  8004204a92:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204a97:	75 35                	jne    8004204ace <check_page_alloc+0x3bb>
  8004204a99:	48 b9 d1 d5 21 04 80 	movabs $0x800421d5d1,%rcx
  8004204aa0:	00 00 00 
  8004204aa3:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204aaa:	00 00 00 
  8004204aad:	be 54 04 00 00       	mov    $0x454,%esi
  8004204ab2:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204ab9:	00 00 00 
  8004204abc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ac8:	00 00 00 
  8004204acb:	41 ff d0             	callq  *%r8
  8004204ace:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204ad3:	74 0a                	je     8004204adf <check_page_alloc+0x3cc>
  8004204ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ad9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204add:	75 35                	jne    8004204b14 <check_page_alloc+0x401>
  8004204adf:	48 b9 d5 d5 21 04 80 	movabs $0x800421d5d5,%rcx
  8004204ae6:	00 00 00 
  8004204ae9:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204af0:	00 00 00 
  8004204af3:	be 55 04 00 00       	mov    $0x455,%esi
  8004204af8:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204aff:	00 00 00 
  8004204b02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b07:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b0e:	00 00 00 
  8004204b11:	41 ff d0             	callq  *%r8
  8004204b14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b19:	74 14                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b1f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b23:	74 0a                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b29:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b2d:	75 35                	jne    8004204b64 <check_page_alloc+0x451>
  8004204b2f:	48 b9 e8 d5 21 04 80 	movabs $0x800421d5e8,%rcx
  8004204b36:	00 00 00 
  8004204b39:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204b40:	00 00 00 
  8004204b43:	be 56 04 00 00       	mov    $0x456,%esi
  8004204b48:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204b4f:	00 00 00 
  8004204b52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b5e:	00 00 00 
  8004204b61:	41 ff d0             	callq  *%r8
  8004204b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b68:	48 89 c7             	mov    %rax,%rdi
  8004204b6b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204b72:	00 00 00 
  8004204b75:	ff d0                	callq  *%rax
  8004204b77:	48 ba f8 a5 6d 04 80 	movabs $0x80046da5f8,%rdx
  8004204b7e:	00 00 00 
  8004204b81:	48 8b 12             	mov    (%rdx),%rdx
  8004204b84:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b88:	48 39 d0             	cmp    %rdx,%rax
  8004204b8b:	72 35                	jb     8004204bc2 <check_page_alloc+0x4af>
  8004204b8d:	48 b9 08 d6 21 04 80 	movabs $0x800421d608,%rcx
  8004204b94:	00 00 00 
  8004204b97:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204b9e:	00 00 00 
  8004204ba1:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ba6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204bad:	00 00 00 
  8004204bb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bb5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204bbc:	00 00 00 
  8004204bbf:	41 ff d0             	callq  *%r8
  8004204bc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bc6:	48 89 c7             	mov    %rax,%rdi
  8004204bc9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204bd0:	00 00 00 
  8004204bd3:	ff d0                	callq  *%rax
  8004204bd5:	48 ba f8 a5 6d 04 80 	movabs $0x80046da5f8,%rdx
  8004204bdc:	00 00 00 
  8004204bdf:	48 8b 12             	mov    (%rdx),%rdx
  8004204be2:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204be6:	48 39 d0             	cmp    %rdx,%rax
  8004204be9:	72 35                	jb     8004204c20 <check_page_alloc+0x50d>
  8004204beb:	48 b9 25 d6 21 04 80 	movabs $0x800421d625,%rcx
  8004204bf2:	00 00 00 
  8004204bf5:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204bfc:	00 00 00 
  8004204bff:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c04:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204c0b:	00 00 00 
  8004204c0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c13:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c1a:	00 00 00 
  8004204c1d:	41 ff d0             	callq  *%r8
  8004204c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c24:	48 89 c7             	mov    %rax,%rdi
  8004204c27:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204c2e:	00 00 00 
  8004204c31:	ff d0                	callq  *%rax
  8004204c33:	48 ba f8 a5 6d 04 80 	movabs $0x80046da5f8,%rdx
  8004204c3a:	00 00 00 
  8004204c3d:	48 8b 12             	mov    (%rdx),%rdx
  8004204c40:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c44:	48 39 d0             	cmp    %rdx,%rax
  8004204c47:	72 35                	jb     8004204c7e <check_page_alloc+0x56b>
  8004204c49:	48 b9 42 d6 21 04 80 	movabs $0x800421d642,%rcx
  8004204c50:	00 00 00 
  8004204c53:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204c5a:	00 00 00 
  8004204c5d:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c62:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204c69:	00 00 00 
  8004204c6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c71:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c78:	00 00 00 
  8004204c7b:	41 ff d0             	callq  *%r8
  8004204c7e:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204c85:	00 00 00 
  8004204c88:	48 8b 00             	mov    (%rax),%rax
  8004204c8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c8f:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004204c96:	00 00 00 
  8004204c99:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204ca0:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ca5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204cac:	00 00 00 
  8004204caf:	ff d0                	callq  *%rax
  8004204cb1:	48 85 c0             	test   %rax,%rax
  8004204cb4:	74 35                	je     8004204ceb <check_page_alloc+0x5d8>
  8004204cb6:	48 b9 5f d6 21 04 80 	movabs $0x800421d65f,%rcx
  8004204cbd:	00 00 00 
  8004204cc0:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204cc7:	00 00 00 
  8004204cca:	be 60 04 00 00       	mov    $0x460,%esi
  8004204ccf:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204cd6:	00 00 00 
  8004204cd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cde:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ce5:	00 00 00 
  8004204ce8:	41 ff d0             	callq  *%r8
  8004204ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cef:	48 89 c7             	mov    %rax,%rdi
  8004204cf2:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204cf9:	00 00 00 
  8004204cfc:	ff d0                	callq  *%rax
  8004204cfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d02:	48 89 c7             	mov    %rax,%rdi
  8004204d05:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d0c:	00 00 00 
  8004204d0f:	ff d0                	callq  *%rax
  8004204d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d15:	48 89 c7             	mov    %rax,%rdi
  8004204d18:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d1f:	00 00 00 
  8004204d22:	ff d0                	callq  *%rax
  8004204d24:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d2b:	00 
  8004204d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d3c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d41:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d48:	00 00 00 
  8004204d4b:	ff d0                	callq  *%rax
  8004204d4d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d51:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d56:	75 35                	jne    8004204d8d <check_page_alloc+0x67a>
  8004204d58:	48 b9 8f d5 21 04 80 	movabs $0x800421d58f,%rcx
  8004204d5f:	00 00 00 
  8004204d62:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204d69:	00 00 00 
  8004204d6c:	be 67 04 00 00       	mov    $0x467,%esi
  8004204d71:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204d78:	00 00 00 
  8004204d7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204d87:	00 00 00 
  8004204d8a:	41 ff d0             	callq  *%r8
  8004204d8d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d92:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d99:	00 00 00 
  8004204d9c:	ff d0                	callq  *%rax
  8004204d9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204da2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204da7:	75 35                	jne    8004204dde <check_page_alloc+0x6cb>
  8004204da9:	48 b9 a5 d5 21 04 80 	movabs $0x800421d5a5,%rcx
  8004204db0:	00 00 00 
  8004204db3:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204dba:	00 00 00 
  8004204dbd:	be 68 04 00 00       	mov    $0x468,%esi
  8004204dc2:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204dc9:	00 00 00 
  8004204dcc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204dd1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204dd8:	00 00 00 
  8004204ddb:	41 ff d0             	callq  *%r8
  8004204dde:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204de3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204dea:	00 00 00 
  8004204ded:	ff d0                	callq  *%rax
  8004204def:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204df3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204df8:	75 35                	jne    8004204e2f <check_page_alloc+0x71c>
  8004204dfa:	48 b9 bb d5 21 04 80 	movabs $0x800421d5bb,%rcx
  8004204e01:	00 00 00 
  8004204e04:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204e0b:	00 00 00 
  8004204e0e:	be 69 04 00 00       	mov    $0x469,%esi
  8004204e13:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204e1a:	00 00 00 
  8004204e1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e29:	00 00 00 
  8004204e2c:	41 ff d0             	callq  *%r8
  8004204e2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e34:	75 35                	jne    8004204e6b <check_page_alloc+0x758>
  8004204e36:	48 b9 d1 d5 21 04 80 	movabs $0x800421d5d1,%rcx
  8004204e3d:	00 00 00 
  8004204e40:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204e47:	00 00 00 
  8004204e4a:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204e4f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204e56:	00 00 00 
  8004204e59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e65:	00 00 00 
  8004204e68:	41 ff d0             	callq  *%r8
  8004204e6b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e70:	74 0a                	je     8004204e7c <check_page_alloc+0x769>
  8004204e72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e76:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e7a:	75 35                	jne    8004204eb1 <check_page_alloc+0x79e>
  8004204e7c:	48 b9 d5 d5 21 04 80 	movabs $0x800421d5d5,%rcx
  8004204e83:	00 00 00 
  8004204e86:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204e8d:	00 00 00 
  8004204e90:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204e95:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204e9c:	00 00 00 
  8004204e9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ea4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204eab:	00 00 00 
  8004204eae:	41 ff d0             	callq  *%r8
  8004204eb1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204eb6:	74 14                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ebc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ec0:	74 0a                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204eca:	75 35                	jne    8004204f01 <check_page_alloc+0x7ee>
  8004204ecc:	48 b9 e8 d5 21 04 80 	movabs $0x800421d5e8,%rcx
  8004204ed3:	00 00 00 
  8004204ed6:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204edd:	00 00 00 
  8004204ee0:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204ee5:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204eec:	00 00 00 
  8004204eef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ef4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204efb:	00 00 00 
  8004204efe:	41 ff d0             	callq  *%r8
  8004204f01:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f06:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f0d:	00 00 00 
  8004204f10:	ff d0                	callq  *%rax
  8004204f12:	48 85 c0             	test   %rax,%rax
  8004204f15:	74 35                	je     8004204f4c <check_page_alloc+0x839>
  8004204f17:	48 b9 5f d6 21 04 80 	movabs $0x800421d65f,%rcx
  8004204f1e:	00 00 00 
  8004204f21:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204f28:	00 00 00 
  8004204f2b:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f30:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204f37:	00 00 00 
  8004204f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f3f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204f46:	00 00 00 
  8004204f49:	41 ff d0             	callq  *%r8
  8004204f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f50:	48 89 c7             	mov    %rax,%rdi
  8004204f53:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204f5a:	00 00 00 
  8004204f5d:	ff d0                	callq  *%rax
  8004204f5f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f64:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f69:	48 89 c7             	mov    %rax,%rdi
  8004204f6c:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004204f73:	00 00 00 
  8004204f76:	ff d0                	callq  *%rax
  8004204f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f7c:	48 89 c7             	mov    %rax,%rdi
  8004204f7f:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204f86:	00 00 00 
  8004204f89:	ff d0                	callq  *%rax
  8004204f8b:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f90:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f97:	00 00 00 
  8004204f9a:	ff d0                	callq  *%rax
  8004204f9c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fa0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fa5:	75 35                	jne    8004204fdc <check_page_alloc+0x8c9>
  8004204fa7:	48 b9 6e d6 21 04 80 	movabs $0x800421d66e,%rcx
  8004204fae:	00 00 00 
  8004204fb1:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204fb8:	00 00 00 
  8004204fbb:	be 72 04 00 00       	mov    $0x472,%esi
  8004204fc0:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004204fc7:	00 00 00 
  8004204fca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fcf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204fd6:	00 00 00 
  8004204fd9:	41 ff d0             	callq  *%r8
  8004204fdc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fe1:	74 0a                	je     8004204fed <check_page_alloc+0x8da>
  8004204fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204fe7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204feb:	74 35                	je     8004205022 <check_page_alloc+0x90f>
  8004204fed:	48 b9 8c d6 21 04 80 	movabs $0x800421d68c,%rcx
  8004204ff4:	00 00 00 
  8004204ff7:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004204ffe:	00 00 00 
  8004205001:	be 73 04 00 00       	mov    $0x473,%esi
  8004205006:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420500d:	00 00 00 
  8004205010:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205015:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420501c:	00 00 00 
  800420501f:	41 ff d0             	callq  *%r8
  8004205022:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205026:	48 89 c7             	mov    %rax,%rdi
  8004205029:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004205030:	00 00 00 
  8004205033:	ff d0                	callq  *%rax
  8004205035:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205039:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205040:	eb 4d                	jmp    800420508f <check_page_alloc+0x97c>
  8004205042:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205045:	48 63 d0             	movslq %eax,%rdx
  8004205048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420504c:	48 01 d0             	add    %rdx,%rax
  800420504f:	0f b6 00             	movzbl (%rax),%eax
  8004205052:	84 c0                	test   %al,%al
  8004205054:	74 35                	je     800420508b <check_page_alloc+0x978>
  8004205056:	48 b9 9c d6 21 04 80 	movabs $0x800421d69c,%rcx
  800420505d:	00 00 00 
  8004205060:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205067:	00 00 00 
  800420506a:	be 76 04 00 00       	mov    $0x476,%esi
  800420506f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205076:	00 00 00 
  8004205079:	b8 00 00 00 00       	mov    $0x0,%eax
  800420507e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205085:	00 00 00 
  8004205088:	41 ff d0             	callq  *%r8
  800420508b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420508f:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004205096:	7e aa                	jle    8004205042 <check_page_alloc+0x92f>
  8004205098:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  800420509f:	00 00 00 
  80042050a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050a6:	48 89 10             	mov    %rdx,(%rax)
  80042050a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050ad:	48 89 c7             	mov    %rax,%rdi
  80042050b0:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050b7:	00 00 00 
  80042050ba:	ff d0                	callq  *%rax
  80042050bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050c0:	48 89 c7             	mov    %rax,%rdi
  80042050c3:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050ca:	00 00 00 
  80042050cd:	ff d0                	callq  *%rax
  80042050cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050d3:	48 89 c7             	mov    %rax,%rdi
  80042050d6:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050dd:	00 00 00 
  80042050e0:	ff d0                	callq  *%rax
  80042050e2:	48 bf a8 d6 21 04 80 	movabs $0x800421d6a8,%rdi
  80042050e9:	00 00 00 
  80042050ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050f1:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042050f8:	00 00 00 
  80042050fb:	ff d2                	callq  *%rdx
  80042050fd:	c9                   	leaveq 
  80042050fe:	c3                   	retq   

00000080042050ff <check_boot_pml4e>:
  80042050ff:	55                   	push   %rbp
  8004205100:	48 89 e5             	mov    %rsp,%rbp
  8004205103:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420510a:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205111:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004205118:	00 00 00 
  800420511b:	48 8b 00             	mov    (%rax),%rax
  800420511e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205122:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205129:	00 
  800420512a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205131:	00 00 00 
  8004205134:	48 8b 00             	mov    (%rax),%rax
  8004205137:	48 c1 e0 04          	shl    $0x4,%rax
  800420513b:	48 89 c2             	mov    %rax,%rdx
  800420513e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205142:	48 01 d0             	add    %rdx,%rax
  8004205145:	48 83 e8 01          	sub    $0x1,%rax
  8004205149:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420514d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205151:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205156:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420515a:	48 89 d0             	mov    %rdx,%rax
  800420515d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004205161:	48 29 c2             	sub    %rax,%rdx
  8004205164:	48 89 d0             	mov    %rdx,%rax
  8004205167:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420516b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205172:	00 
  8004205173:	e9 d4 00 00 00       	jmpq   800420524c <check_boot_pml4e+0x14d>
  8004205178:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420517f:	00 00 00 
  8004205182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205186:	48 01 c2             	add    %rax,%rdx
  8004205189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420518d:	48 89 d6             	mov    %rdx,%rsi
  8004205190:	48 89 c7             	mov    %rax,%rdi
  8004205193:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420519a:	00 00 00 
  800420519d:	ff d0                	callq  *%rax
  800420519f:	48 ba 00 a6 6d 04 80 	movabs $0x80046da600,%rdx
  80042051a6:	00 00 00 
  80042051a9:	48 8b 12             	mov    (%rdx),%rdx
  80042051ac:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051b0:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051b7:	00 00 00 
  80042051ba:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051be:	77 32                	ja     80042051f2 <check_boot_pml4e+0xf3>
  80042051c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051c4:	48 89 c1             	mov    %rax,%rcx
  80042051c7:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  80042051ce:	00 00 00 
  80042051d1:	be 96 04 00 00       	mov    $0x496,%esi
  80042051d6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042051dd:	00 00 00 
  80042051e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042051ec:	00 00 00 
  80042051ef:	41 ff d0             	callq  *%r8
  80042051f2:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042051f9:	ff ff ff 
  80042051fc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205200:	48 01 d1             	add    %rdx,%rcx
  8004205203:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205207:	48 01 ca             	add    %rcx,%rdx
  800420520a:	48 39 d0             	cmp    %rdx,%rax
  800420520d:	74 35                	je     8004205244 <check_boot_pml4e+0x145>
  800420520f:	48 b9 c8 d6 21 04 80 	movabs $0x800421d6c8,%rcx
  8004205216:	00 00 00 
  8004205219:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205220:	00 00 00 
  8004205223:	be 96 04 00 00       	mov    $0x496,%esi
  8004205228:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420522f:	00 00 00 
  8004205232:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205237:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420523e:	00 00 00 
  8004205241:	41 ff d0             	callq  *%r8
  8004205244:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420524b:	00 
  800420524c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205250:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205254:	0f 82 1e ff ff ff    	jb     8004205178 <check_boot_pml4e+0x79>
  800420525a:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  8004205261:	00 
  8004205262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205266:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420526c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205270:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205274:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205279:	48 f7 75 c8          	divq   -0x38(%rbp)
  800420527d:	48 89 d0             	mov    %rdx,%rax
  8004205280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205284:	48 29 c2             	sub    %rax,%rdx
  8004205287:	48 89 d0             	mov    %rdx,%rax
  800420528a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420528e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205295:	00 
  8004205296:	e9 d4 00 00 00       	jmpq   800420536f <check_boot_pml4e+0x270>
  800420529b:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052a2:	00 00 00 
  80042052a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052a9:	48 01 c2             	add    %rax,%rdx
  80042052ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052b0:	48 89 d6             	mov    %rdx,%rsi
  80042052b3:	48 89 c7             	mov    %rax,%rdi
  80042052b6:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042052bd:	00 00 00 
  80042052c0:	ff d0                	callq  *%rax
  80042052c2:	48 ba 58 b2 4d 04 80 	movabs $0x80044db258,%rdx
  80042052c9:	00 00 00 
  80042052cc:	48 8b 12             	mov    (%rdx),%rdx
  80042052cf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052d3:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052da:	00 00 00 
  80042052dd:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052e1:	77 32                	ja     8004205315 <check_boot_pml4e+0x216>
  80042052e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052e7:	48 89 c1             	mov    %rax,%rcx
  80042052ea:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  80042052f1:	00 00 00 
  80042052f4:	be 9d 04 00 00       	mov    $0x49d,%esi
  80042052f9:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205300:	00 00 00 
  8004205303:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205308:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420530f:	00 00 00 
  8004205312:	41 ff d0             	callq  *%r8
  8004205315:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420531c:	ff ff ff 
  800420531f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205323:	48 01 d1             	add    %rdx,%rcx
  8004205326:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420532a:	48 01 ca             	add    %rcx,%rdx
  800420532d:	48 39 d0             	cmp    %rdx,%rax
  8004205330:	74 35                	je     8004205367 <check_boot_pml4e+0x268>
  8004205332:	48 b9 00 d7 21 04 80 	movabs $0x800421d700,%rcx
  8004205339:	00 00 00 
  800420533c:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205343:	00 00 00 
  8004205346:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420534b:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205352:	00 00 00 
  8004205355:	b8 00 00 00 00       	mov    $0x0,%eax
  800420535a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205361:	00 00 00 
  8004205364:	41 ff d0             	callq  *%r8
  8004205367:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420536e:	00 
  800420536f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205373:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205377:	0f 82 1e ff ff ff    	jb     800420529b <check_boot_pml4e+0x19c>
  800420537d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205384:	00 
  8004205385:	eb 6a                	jmp    80042053f1 <check_boot_pml4e+0x2f2>
  8004205387:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420538e:	00 00 00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 01 c2             	add    %rax,%rdx
  8004205398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420539c:	48 89 d6             	mov    %rdx,%rsi
  800420539f:	48 89 c7             	mov    %rax,%rdi
  80042053a2:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042053a9:	00 00 00 
  80042053ac:	ff d0                	callq  *%rax
  80042053ae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053b2:	74 35                	je     80042053e9 <check_boot_pml4e+0x2ea>
  80042053b4:	48 b9 38 d7 21 04 80 	movabs $0x800421d738,%rcx
  80042053bb:	00 00 00 
  80042053be:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042053c5:	00 00 00 
  80042053c8:	be a2 04 00 00       	mov    $0x4a2,%esi
  80042053cd:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042053d4:	00 00 00 
  80042053d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053dc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042053e3:	00 00 00 
  80042053e6:	41 ff d0             	callq  *%r8
  80042053e9:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053f0:	00 
  80042053f1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042053f8:	00 00 00 
  80042053fb:	48 8b 00             	mov    (%rax),%rax
  80042053fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205402:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205406:	0f 87 7b ff ff ff    	ja     8004205387 <check_boot_pml4e+0x288>
  800420540c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205413:	00 
  8004205414:	e9 a1 01 00 00       	jmpq   80042055ba <check_boot_pml4e+0x4bb>
  8004205419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420541d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205421:	48 89 d0             	mov    %rdx,%rax
  8004205424:	48 01 c0             	add    %rax,%rax
  8004205427:	48 01 d0             	add    %rdx,%rax
  800420542a:	48 c1 e0 0f          	shl    $0xf,%rax
  800420542e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205435:	00 00 00 
  8004205438:	48 29 c2             	sub    %rax,%rdx
  800420543b:	48 89 d0             	mov    %rdx,%rax
  800420543e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205442:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205449:	00 
  800420544a:	e9 e0 00 00 00       	jmpq   800420552f <check_boot_pml4e+0x430>
  800420544f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205453:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205457:	48 01 d0             	add    %rdx,%rax
  800420545a:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  8004205461:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205465:	48 89 d6             	mov    %rdx,%rsi
  8004205468:	48 89 c7             	mov    %rax,%rdi
  800420546b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205472:	00 00 00 
  8004205475:	ff d0                	callq  *%rax
  8004205477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420547b:	48 89 d1             	mov    %rdx,%rcx
  800420547e:	48 c1 e1 10          	shl    $0x10,%rcx
  8004205482:	48 ba 00 d0 6d 04 80 	movabs $0x80046dd000,%rdx
  8004205489:	00 00 00 
  800420548c:	48 01 ca             	add    %rcx,%rdx
  800420548f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004205493:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420549a:	00 00 00 
  800420549d:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054a1:	77 32                	ja     80042054d5 <check_boot_pml4e+0x3d6>
  80042054a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054a7:	48 89 c1             	mov    %rax,%rcx
  80042054aa:	48 ba e8 d2 21 04 80 	movabs $0x800421d2e8,%rdx
  80042054b1:	00 00 00 
  80042054b4:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042054b9:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042054c0:	00 00 00 
  80042054c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054c8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042054cf:	00 00 00 
  80042054d2:	41 ff d0             	callq  *%r8
  80042054d5:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054dc:	ff ff ff 
  80042054df:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054e3:	48 01 d1             	add    %rdx,%rcx
  80042054e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054ea:	48 01 ca             	add    %rcx,%rdx
  80042054ed:	48 39 d0             	cmp    %rdx,%rax
  80042054f0:	74 35                	je     8004205527 <check_boot_pml4e+0x428>
  80042054f2:	48 b9 60 d7 21 04 80 	movabs $0x800421d760,%rcx
  80042054f9:	00 00 00 
  80042054fc:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205503:	00 00 00 
  8004205506:	be ab 04 00 00       	mov    $0x4ab,%esi
  800420550b:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205512:	00 00 00 
  8004205515:	b8 00 00 00 00       	mov    $0x0,%eax
  800420551a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205521:	00 00 00 
  8004205524:	41 ff d0             	callq  *%r8
  8004205527:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420552e:	00 
  800420552f:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205536:	00 
  8004205537:	0f 86 12 ff ff ff    	jbe    800420544f <check_boot_pml4e+0x350>
  800420553d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205544:	00 
  8004205545:	eb 64                	jmp    80042055ab <check_boot_pml4e+0x4ac>
  8004205547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420554b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420554f:	48 01 c2             	add    %rax,%rdx
  8004205552:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205556:	48 89 d6             	mov    %rdx,%rsi
  8004205559:	48 89 c7             	mov    %rax,%rdi
  800420555c:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205563:	00 00 00 
  8004205566:	ff d0                	callq  *%rax
  8004205568:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  800420556c:	74 35                	je     80042055a3 <check_boot_pml4e+0x4a4>
  800420556e:	48 b9 a8 d7 21 04 80 	movabs $0x800421d7a8,%rcx
  8004205575:	00 00 00 
  8004205578:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420557f:	00 00 00 
  8004205582:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205587:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420558e:	00 00 00 
  8004205591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205596:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420559d:	00 00 00 
  80042055a0:	41 ff d0             	callq  *%r8
  80042055a3:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055aa:	00 
  80042055ab:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055b2:	00 
  80042055b3:	76 92                	jbe    8004205547 <check_boot_pml4e+0x448>
  80042055b5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055ba:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055bf:	0f 86 54 fe ff ff    	jbe    8004205419 <check_boot_pml4e+0x31a>
  80042055c5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042055cc:	00 00 00 
  80042055cf:	48 8b 00             	mov    (%rax),%rax
  80042055d2:	48 83 c0 08          	add    $0x8,%rax
  80042055d6:	48 8b 00             	mov    (%rax),%rax
  80042055d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055eb:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055ee:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055f1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042055f8:	00 00 00 
  80042055fb:	48 8b 00             	mov    (%rax),%rax
  80042055fe:	48 39 c2             	cmp    %rax,%rdx
  8004205601:	72 32                	jb     8004205635 <check_boot_pml4e+0x536>
  8004205603:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205607:	48 89 c1             	mov    %rax,%rcx
  800420560a:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004205611:	00 00 00 
  8004205614:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205619:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205620:	00 00 00 
  8004205623:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205628:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420562f:	00 00 00 
  8004205632:	41 ff d0             	callq  *%r8
  8004205635:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420563c:	00 00 00 
  800420563f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205643:	48 01 d0             	add    %rdx,%rax
  8004205646:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420564a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420564e:	48 8b 00             	mov    (%rax),%rax
  8004205651:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205657:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800420565b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420565f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205663:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205666:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205669:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205670:	00 00 00 
  8004205673:	48 8b 00             	mov    (%rax),%rax
  8004205676:	48 39 c2             	cmp    %rax,%rdx
  8004205679:	72 32                	jb     80042056ad <check_boot_pml4e+0x5ae>
  800420567b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420567f:	48 89 c1             	mov    %rax,%rcx
  8004205682:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004205689:	00 00 00 
  800420568c:	be b8 04 00 00       	mov    $0x4b8,%esi
  8004205691:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205698:	00 00 00 
  800420569b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056a0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042056a7:	00 00 00 
  80042056aa:	41 ff d0             	callq  *%r8
  80042056ad:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056b4:	00 00 00 
  80042056b7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056bb:	48 01 d0             	add    %rdx,%rax
  80042056be:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056cc:	00 
  80042056cd:	e9 50 01 00 00       	jmpq   8004205822 <check_boot_pml4e+0x723>
  80042056d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056d6:	48 83 f8 04          	cmp    $0x4,%rax
  80042056da:	72 67                	jb     8004205743 <check_boot_pml4e+0x644>
  80042056dc:	48 83 f8 05          	cmp    $0x5,%rax
  80042056e0:	76 06                	jbe    80042056e8 <check_boot_pml4e+0x5e9>
  80042056e2:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056e6:	75 5b                	jne    8004205743 <check_boot_pml4e+0x644>
  80042056e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056ec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056f3:	00 
  80042056f4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042056fb:	48 01 d0             	add    %rdx,%rax
  80042056fe:	48 8b 00             	mov    (%rax),%rax
  8004205701:	83 e0 01             	and    $0x1,%eax
  8004205704:	48 85 c0             	test   %rax,%rax
  8004205707:	75 35                	jne    800420573e <check_boot_pml4e+0x63f>
  8004205709:	48 b9 cb d7 21 04 80 	movabs $0x800421d7cb,%rcx
  8004205710:	00 00 00 
  8004205713:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420571a:	00 00 00 
  800420571d:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205722:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205729:	00 00 00 
  800420572c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205731:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205738:	00 00 00 
  800420573b:	41 ff d0             	callq  *%r8
  800420573e:	e9 da 00 00 00       	jmpq   800420581d <check_boot_pml4e+0x71e>
  8004205743:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205748:	0f 86 ce 00 00 00    	jbe    800420581c <check_boot_pml4e+0x71d>
  800420574e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205752:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205759:	00 
  800420575a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205761:	48 01 d0             	add    %rdx,%rax
  8004205764:	48 8b 00             	mov    (%rax),%rax
  8004205767:	83 e0 01             	and    $0x1,%eax
  800420576a:	48 85 c0             	test   %rax,%rax
  800420576d:	74 5a                	je     80042057c9 <check_boot_pml4e+0x6ca>
  800420576f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205773:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420577a:	00 
  800420577b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205782:	48 01 d0             	add    %rdx,%rax
  8004205785:	48 8b 00             	mov    (%rax),%rax
  8004205788:	83 e0 02             	and    $0x2,%eax
  800420578b:	48 85 c0             	test   %rax,%rax
  800420578e:	0f 85 88 00 00 00    	jne    800420581c <check_boot_pml4e+0x71d>
  8004205794:	48 b9 dc d7 21 04 80 	movabs $0x800421d7dc,%rcx
  800420579b:	00 00 00 
  800420579e:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042057a5:	00 00 00 
  80042057a8:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042057ad:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042057b4:	00 00 00 
  80042057b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042057c3:	00 00 00 
  80042057c6:	41 ff d0             	callq  *%r8
  80042057c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057d4:	00 
  80042057d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057dc:	48 01 d0             	add    %rdx,%rax
  80042057df:	48 8b 00             	mov    (%rax),%rax
  80042057e2:	48 85 c0             	test   %rax,%rax
  80042057e5:	74 35                	je     800420581c <check_boot_pml4e+0x71d>
  80042057e7:	48 b9 ed d7 21 04 80 	movabs $0x800421d7ed,%rcx
  80042057ee:	00 00 00 
  80042057f1:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042057f8:	00 00 00 
  80042057fb:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205800:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205807:	00 00 00 
  800420580a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420580f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205816:	00 00 00 
  8004205819:	41 ff d0             	callq  *%r8
  800420581c:	90                   	nop
  800420581d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205822:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205829:	00 
  800420582a:	0f 86 a2 fe ff ff    	jbe    80042056d2 <check_boot_pml4e+0x5d3>
  8004205830:	48 bf 00 d8 21 04 80 	movabs $0x800421d800,%rdi
  8004205837:	00 00 00 
  800420583a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420583f:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004205846:	00 00 00 
  8004205849:	ff d2                	callq  *%rdx
  800420584b:	c9                   	leaveq 
  800420584c:	c3                   	retq   

000000800420584d <check_va2pa>:
  800420584d:	55                   	push   %rbp
  800420584e:	48 89 e5             	mov    %rsp,%rbp
  8004205851:	48 83 ec 60          	sub    $0x60,%rsp
  8004205855:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205859:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420585d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205861:	48 c1 e8 27          	shr    $0x27,%rax
  8004205865:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420586a:	48 c1 e0 03          	shl    $0x3,%rax
  800420586e:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  8004205872:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205876:	48 8b 00             	mov    (%rax),%rax
  8004205879:	83 e0 01             	and    $0x1,%eax
  800420587c:	48 85 c0             	test   %rax,%rax
  800420587f:	75 0c                	jne    800420588d <check_va2pa+0x40>
  8004205881:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205888:	e9 38 02 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  800420588d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205891:	48 8b 00             	mov    (%rax),%rax
  8004205894:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420589a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420589e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058a2:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058a6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058ac:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042058b3:	00 00 00 
  80042058b6:	48 8b 00             	mov    (%rax),%rax
  80042058b9:	48 39 c2             	cmp    %rax,%rdx
  80042058bc:	72 32                	jb     80042058f0 <check_va2pa+0xa3>
  80042058be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058c2:	48 89 c1             	mov    %rax,%rcx
  80042058c5:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  80042058cc:	00 00 00 
  80042058cf:	be e1 04 00 00       	mov    $0x4e1,%esi
  80042058d4:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042058db:	00 00 00 
  80042058de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042058ea:	00 00 00 
  80042058ed:	41 ff d0             	callq  *%r8
  80042058f0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042058f7:	00 00 00 
  80042058fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058fe:	48 01 d0             	add    %rdx,%rax
  8004205901:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205905:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205909:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420590d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420591e:	48 01 d0             	add    %rdx,%rax
  8004205921:	48 8b 00             	mov    (%rax),%rax
  8004205924:	83 e0 01             	and    $0x1,%eax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	75 0c                	jne    8004205938 <check_va2pa+0xeb>
  800420592c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205933:	e9 8d 01 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  8004205938:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420593c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205940:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205945:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420594c:	00 
  800420594d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205951:	48 01 d0             	add    %rdx,%rax
  8004205954:	48 8b 00             	mov    (%rax),%rax
  8004205957:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420595d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205965:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205969:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420596c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420596f:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205976:	00 00 00 
  8004205979:	48 8b 00             	mov    (%rax),%rax
  800420597c:	48 39 c2             	cmp    %rax,%rdx
  800420597f:	72 32                	jb     80042059b3 <check_va2pa+0x166>
  8004205981:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205985:	48 89 c1             	mov    %rax,%rcx
  8004205988:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  800420598f:	00 00 00 
  8004205992:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205997:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420599e:	00 00 00 
  80042059a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059a6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042059ad:	00 00 00 
  80042059b0:	41 ff d0             	callq  *%r8
  80042059b3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059ba:	00 00 00 
  80042059bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059c1:	48 01 d0             	add    %rdx,%rax
  80042059c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059c8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059cc:	48 c1 e8 15          	shr    $0x15,%rax
  80042059d0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042059d9:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059e1:	48 8b 00             	mov    (%rax),%rax
  80042059e4:	83 e0 01             	and    $0x1,%eax
  80042059e7:	48 85 c0             	test   %rax,%rax
  80042059ea:	75 0c                	jne    80042059f8 <check_va2pa+0x1ab>
  80042059ec:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059f3:	e9 cd 00 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  80042059f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059fc:	48 8b 00             	mov    (%rax),%rax
  80042059ff:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a05:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a0d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a11:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a14:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a17:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004205a1e:	00 00 00 
  8004205a21:	48 8b 00             	mov    (%rax),%rax
  8004205a24:	48 39 c2             	cmp    %rax,%rdx
  8004205a27:	72 32                	jb     8004205a5b <check_va2pa+0x20e>
  8004205a29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a2d:	48 89 c1             	mov    %rax,%rcx
  8004205a30:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004205a37:	00 00 00 
  8004205a3a:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205a3f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205a46:	00 00 00 
  8004205a49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a4e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205a55:	00 00 00 
  8004205a58:	41 ff d0             	callq  *%r8
  8004205a5b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a62:	00 00 00 
  8004205a65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a69:	48 01 d0             	add    %rdx,%rax
  8004205a6c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a74:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a78:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a7d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a84:	00 
  8004205a85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a89:	48 01 d0             	add    %rdx,%rax
  8004205a8c:	48 8b 00             	mov    (%rax),%rax
  8004205a8f:	83 e0 01             	and    $0x1,%eax
  8004205a92:	48 85 c0             	test   %rax,%rax
  8004205a95:	75 09                	jne    8004205aa0 <check_va2pa+0x253>
  8004205a97:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a9e:	eb 25                	jmp    8004205ac5 <check_va2pa+0x278>
  8004205aa0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205aa4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aa8:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205aad:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ab4:	00 
  8004205ab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ab9:	48 01 d0             	add    %rdx,%rax
  8004205abc:	48 8b 00             	mov    (%rax),%rax
  8004205abf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ac5:	c9                   	leaveq 
  8004205ac6:	c3                   	retq   

0000008004205ac7 <page_check>:
  8004205ac7:	55                   	push   %rbp
  8004205ac8:	48 89 e5             	mov    %rsp,%rbp
  8004205acb:	53                   	push   %rbx
  8004205acc:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205ad3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ada:	00 
  8004205adb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205adf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205ae7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205aeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205aef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205af7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205afb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205aff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b03:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b08:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b0f:	00 00 00 
  8004205b12:	ff d0                	callq  *%rax
  8004205b14:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b18:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b1d:	75 35                	jne    8004205b54 <page_check+0x8d>
  8004205b1f:	48 b9 1f d8 21 04 80 	movabs $0x800421d81f,%rcx
  8004205b26:	00 00 00 
  8004205b29:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205b30:	00 00 00 
  8004205b33:	be 02 05 00 00       	mov    $0x502,%esi
  8004205b38:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205b3f:	00 00 00 
  8004205b42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b4e:	00 00 00 
  8004205b51:	41 ff d0             	callq  *%r8
  8004205b54:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b59:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b60:	00 00 00 
  8004205b63:	ff d0                	callq  *%rax
  8004205b65:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b69:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b6e:	75 35                	jne    8004205ba5 <page_check+0xde>
  8004205b70:	48 b9 33 d8 21 04 80 	movabs $0x800421d833,%rcx
  8004205b77:	00 00 00 
  8004205b7a:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205b81:	00 00 00 
  8004205b84:	be 03 05 00 00       	mov    $0x503,%esi
  8004205b89:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205b90:	00 00 00 
  8004205b93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b9f:	00 00 00 
  8004205ba2:	41 ff d0             	callq  *%r8
  8004205ba5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205baa:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205bb1:	00 00 00 
  8004205bb4:	ff d0                	callq  *%rax
  8004205bb6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bbf:	75 35                	jne    8004205bf6 <page_check+0x12f>
  8004205bc1:	48 b9 47 d8 21 04 80 	movabs $0x800421d847,%rcx
  8004205bc8:	00 00 00 
  8004205bcb:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205bd2:	00 00 00 
  8004205bd5:	be 04 05 00 00       	mov    $0x504,%esi
  8004205bda:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205be1:	00 00 00 
  8004205be4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205be9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205bf0:	00 00 00 
  8004205bf3:	41 ff d0             	callq  *%r8
  8004205bf6:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bfb:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c02:	00 00 00 
  8004205c05:	ff d0                	callq  *%rax
  8004205c07:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c0b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c10:	75 35                	jne    8004205c47 <page_check+0x180>
  8004205c12:	48 b9 5b d8 21 04 80 	movabs $0x800421d85b,%rcx
  8004205c19:	00 00 00 
  8004205c1c:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205c23:	00 00 00 
  8004205c26:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c2b:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205c32:	00 00 00 
  8004205c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c41:	00 00 00 
  8004205c44:	41 ff d0             	callq  *%r8
  8004205c47:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c53:	00 00 00 
  8004205c56:	ff d0                	callq  *%rax
  8004205c58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c61:	75 35                	jne    8004205c98 <page_check+0x1d1>
  8004205c63:	48 b9 6f d8 21 04 80 	movabs $0x800421d86f,%rcx
  8004205c6a:	00 00 00 
  8004205c6d:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205c74:	00 00 00 
  8004205c77:	be 06 05 00 00       	mov    $0x506,%esi
  8004205c7c:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205c83:	00 00 00 
  8004205c86:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c92:	00 00 00 
  8004205c95:	41 ff d0             	callq  *%r8
  8004205c98:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9d:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205ca4:	00 00 00 
  8004205ca7:	ff d0                	callq  *%rax
  8004205ca9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cb2:	75 35                	jne    8004205ce9 <page_check+0x222>
  8004205cb4:	48 b9 83 d8 21 04 80 	movabs $0x800421d883,%rcx
  8004205cbb:	00 00 00 
  8004205cbe:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205cc5:	00 00 00 
  8004205cc8:	be 07 05 00 00       	mov    $0x507,%esi
  8004205ccd:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205cd4:	00 00 00 
  8004205cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ce3:	00 00 00 
  8004205ce6:	41 ff d0             	callq  *%r8
  8004205ce9:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cee:	75 35                	jne    8004205d25 <page_check+0x25e>
  8004205cf0:	48 b9 d1 d5 21 04 80 	movabs $0x800421d5d1,%rcx
  8004205cf7:	00 00 00 
  8004205cfa:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205d01:	00 00 00 
  8004205d04:	be 09 05 00 00       	mov    $0x509,%esi
  8004205d09:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205d10:	00 00 00 
  8004205d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d1f:	00 00 00 
  8004205d22:	41 ff d0             	callq  *%r8
  8004205d25:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d2a:	74 0a                	je     8004205d36 <page_check+0x26f>
  8004205d2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d30:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d34:	75 35                	jne    8004205d6b <page_check+0x2a4>
  8004205d36:	48 b9 d5 d5 21 04 80 	movabs $0x800421d5d5,%rcx
  8004205d3d:	00 00 00 
  8004205d40:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205d47:	00 00 00 
  8004205d4a:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205d4f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205d56:	00 00 00 
  8004205d59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d65:	00 00 00 
  8004205d68:	41 ff d0             	callq  *%r8
  8004205d6b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d70:	74 14                	je     8004205d86 <page_check+0x2bf>
  8004205d72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d76:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d7a:	74 0a                	je     8004205d86 <page_check+0x2bf>
  8004205d7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d80:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d84:	75 35                	jne    8004205dbb <page_check+0x2f4>
  8004205d86:	48 b9 e8 d5 21 04 80 	movabs $0x800421d5e8,%rcx
  8004205d8d:	00 00 00 
  8004205d90:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205d97:	00 00 00 
  8004205d9a:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205d9f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205da6:	00 00 00 
  8004205da9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205db5:	00 00 00 
  8004205db8:	41 ff d0             	callq  *%r8
  8004205dbb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dc0:	74 1e                	je     8004205de0 <page_check+0x319>
  8004205dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dc6:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dca:	74 14                	je     8004205de0 <page_check+0x319>
  8004205dcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd0:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205dd4:	74 0a                	je     8004205de0 <page_check+0x319>
  8004205dd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dda:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dde:	75 35                	jne    8004205e15 <page_check+0x34e>
  8004205de0:	48 b9 98 d8 21 04 80 	movabs $0x800421d898,%rcx
  8004205de7:	00 00 00 
  8004205dea:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205df1:	00 00 00 
  8004205df4:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205df9:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205e00:	00 00 00 
  8004205e03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e08:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e0f:	00 00 00 
  8004205e12:	41 ff d0             	callq  *%r8
  8004205e15:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e1a:	74 28                	je     8004205e44 <page_check+0x37d>
  8004205e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e20:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e24:	74 1e                	je     8004205e44 <page_check+0x37d>
  8004205e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e2e:	74 14                	je     8004205e44 <page_check+0x37d>
  8004205e30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e34:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e38:	74 0a                	je     8004205e44 <page_check+0x37d>
  8004205e3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e3e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e42:	75 35                	jne    8004205e79 <page_check+0x3b2>
  8004205e44:	48 b9 c8 d8 21 04 80 	movabs $0x800421d8c8,%rcx
  8004205e4b:	00 00 00 
  8004205e4e:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205e55:	00 00 00 
  8004205e58:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e5d:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205e64:	00 00 00 
  8004205e67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e6c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e73:	00 00 00 
  8004205e76:	41 ff d0             	callq  *%r8
  8004205e79:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e7e:	74 32                	je     8004205eb2 <page_check+0x3eb>
  8004205e80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e84:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e88:	74 28                	je     8004205eb2 <page_check+0x3eb>
  8004205e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e8e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e92:	74 1e                	je     8004205eb2 <page_check+0x3eb>
  8004205e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e98:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e9c:	74 14                	je     8004205eb2 <page_check+0x3eb>
  8004205e9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea2:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ea6:	74 0a                	je     8004205eb2 <page_check+0x3eb>
  8004205ea8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eac:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205eb0:	75 35                	jne    8004205ee7 <page_check+0x420>
  8004205eb2:	48 b9 08 d9 21 04 80 	movabs $0x800421d908,%rcx
  8004205eb9:	00 00 00 
  8004205ebc:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205ec3:	00 00 00 
  8004205ec6:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ecb:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205ed2:	00 00 00 
  8004205ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205eda:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ee1:	00 00 00 
  8004205ee4:	41 ff d0             	callq  *%r8
  8004205ee7:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004205eee:	00 00 00 
  8004205ef1:	48 8b 00             	mov    (%rax),%rax
  8004205ef4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205ef8:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  8004205eff:	00 00 00 
  8004205f02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f09:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f0e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205f15:	00 00 00 
  8004205f18:	ff d0                	callq  *%rax
  8004205f1a:	48 85 c0             	test   %rax,%rax
  8004205f1d:	74 35                	je     8004205f54 <page_check+0x48d>
  8004205f1f:	48 b9 5f d6 21 04 80 	movabs $0x800421d65f,%rcx
  8004205f26:	00 00 00 
  8004205f29:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205f30:	00 00 00 
  8004205f33:	be 15 05 00 00       	mov    $0x515,%esi
  8004205f38:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205f3f:	00 00 00 
  8004205f42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205f4e:	00 00 00 
  8004205f51:	41 ff d0             	callq  *%r8
  8004205f54:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004205f5b:	00 00 00 
  8004205f5e:	48 8b 00             	mov    (%rax),%rax
  8004205f61:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f68:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f6d:	48 89 c7             	mov    %rax,%rdi
  8004205f70:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004205f77:	00 00 00 
  8004205f7a:	ff d0                	callq  *%rax
  8004205f7c:	48 85 c0             	test   %rax,%rax
  8004205f7f:	74 35                	je     8004205fb6 <page_check+0x4ef>
  8004205f81:	48 b9 58 d9 21 04 80 	movabs $0x800421d958,%rcx
  8004205f88:	00 00 00 
  8004205f8b:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205f92:	00 00 00 
  8004205f95:	be 18 05 00 00       	mov    $0x518,%esi
  8004205f9a:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004205fa1:	00 00 00 
  8004205fa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fa9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205fb0:	00 00 00 
  8004205fb3:	41 ff d0             	callq  *%r8
  8004205fb6:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004205fbd:	00 00 00 
  8004205fc0:	48 8b 00             	mov    (%rax),%rax
  8004205fc3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fc7:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fcc:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fd1:	48 89 c7             	mov    %rax,%rdi
  8004205fd4:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004205fdb:	00 00 00 
  8004205fde:	ff d0                	callq  *%rax
  8004205fe0:	85 c0                	test   %eax,%eax
  8004205fe2:	78 35                	js     8004206019 <page_check+0x552>
  8004205fe4:	48 b9 90 d9 21 04 80 	movabs $0x800421d990,%rcx
  8004205feb:	00 00 00 
  8004205fee:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004205ff5:	00 00 00 
  8004205ff8:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004205ffd:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206004:	00 00 00 
  8004206007:	b8 00 00 00 00       	mov    $0x0,%eax
  800420600c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206013:	00 00 00 
  8004206016:	41 ff d0             	callq  *%r8
  8004206019:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420601d:	48 89 c7             	mov    %rax,%rdi
  8004206020:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004206027:	00 00 00 
  800420602a:	ff d0                	callq  *%rax
  800420602c:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420603d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206042:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206047:	48 89 c7             	mov    %rax,%rdi
  800420604a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206051:	00 00 00 
  8004206054:	ff d0                	callq  *%rax
  8004206056:	85 c0                	test   %eax,%eax
  8004206058:	78 35                	js     800420608f <page_check+0x5c8>
  800420605a:	48 b9 90 d9 21 04 80 	movabs $0x800421d990,%rcx
  8004206061:	00 00 00 
  8004206064:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420606b:	00 00 00 
  800420606e:	be 1f 05 00 00       	mov    $0x51f,%esi
  8004206073:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420607a:	00 00 00 
  800420607d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206082:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206089:	00 00 00 
  800420608c:	41 ff d0             	callq  *%r8
  800420608f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206093:	48 89 c7             	mov    %rax,%rdi
  8004206096:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420609d:	00 00 00 
  80042060a0:	ff d0                	callq  *%rax
  80042060a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060a6:	48 89 c7             	mov    %rax,%rdi
  80042060a9:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042060b0:	00 00 00 
  80042060b3:	ff d0                	callq  *%rax
  80042060b5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042060bc:	00 00 00 
  80042060bf:	48 8b 00             	mov    (%rax),%rax
  80042060c2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060cb:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060d0:	48 89 c7             	mov    %rax,%rdi
  80042060d3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042060da:	00 00 00 
  80042060dd:	ff d0                	callq  *%rax
  80042060df:	85 c0                	test   %eax,%eax
  80042060e1:	74 35                	je     8004206118 <page_check+0x651>
  80042060e3:	48 b9 c0 d9 21 04 80 	movabs $0x800421d9c0,%rcx
  80042060ea:	00 00 00 
  80042060ed:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042060f4:	00 00 00 
  80042060f7:	be 25 05 00 00       	mov    $0x525,%esi
  80042060fc:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206103:	00 00 00 
  8004206106:	b8 00 00 00 00       	mov    $0x0,%eax
  800420610b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206112:	00 00 00 
  8004206115:	41 ff d0             	callq  *%r8
  8004206118:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420611f:	00 00 00 
  8004206122:	48 8b 00             	mov    (%rax),%rax
  8004206125:	48 8b 00             	mov    (%rax),%rax
  8004206128:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420612e:	48 89 c3             	mov    %rax,%rbx
  8004206131:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206135:	48 89 c7             	mov    %rax,%rdi
  8004206138:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420613f:	00 00 00 
  8004206142:	ff d0                	callq  *%rax
  8004206144:	48 39 c3             	cmp    %rax,%rbx
  8004206147:	0f 84 97 00 00 00    	je     80042061e4 <page_check+0x71d>
  800420614d:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206154:	00 00 00 
  8004206157:	48 8b 00             	mov    (%rax),%rax
  800420615a:	48 8b 00             	mov    (%rax),%rax
  800420615d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206163:	48 89 c3             	mov    %rax,%rbx
  8004206166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420616a:	48 89 c7             	mov    %rax,%rdi
  800420616d:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206174:	00 00 00 
  8004206177:	ff d0                	callq  *%rax
  8004206179:	48 39 c3             	cmp    %rax,%rbx
  800420617c:	74 66                	je     80042061e4 <page_check+0x71d>
  800420617e:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206185:	00 00 00 
  8004206188:	48 8b 00             	mov    (%rax),%rax
  800420618b:	48 8b 00             	mov    (%rax),%rax
  800420618e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206194:	48 89 c3             	mov    %rax,%rbx
  8004206197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420619b:	48 89 c7             	mov    %rax,%rdi
  800420619e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042061a5:	00 00 00 
  80042061a8:	ff d0                	callq  *%rax
  80042061aa:	48 39 c3             	cmp    %rax,%rbx
  80042061ad:	74 35                	je     80042061e4 <page_check+0x71d>
  80042061af:	48 b9 f0 d9 21 04 80 	movabs $0x800421d9f0,%rcx
  80042061b6:	00 00 00 
  80042061b9:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042061c0:	00 00 00 
  80042061c3:	be 26 05 00 00       	mov    $0x526,%esi
  80042061c8:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042061cf:	00 00 00 
  80042061d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061d7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042061de:	00 00 00 
  80042061e1:	41 ff d0             	callq  *%r8
  80042061e4:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042061eb:	00 00 00 
  80042061ee:	48 8b 00             	mov    (%rax),%rax
  80042061f1:	be 00 00 00 00       	mov    $0x0,%esi
  80042061f6:	48 89 c7             	mov    %rax,%rdi
  80042061f9:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206200:	00 00 00 
  8004206203:	ff d0                	callq  *%rax
  8004206205:	48 89 c3             	mov    %rax,%rbx
  8004206208:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420620c:	48 89 c7             	mov    %rax,%rdi
  800420620f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206216:	00 00 00 
  8004206219:	ff d0                	callq  *%rax
  800420621b:	48 39 c3             	cmp    %rax,%rbx
  800420621e:	74 35                	je     8004206255 <page_check+0x78e>
  8004206220:	48 b9 78 da 21 04 80 	movabs $0x800421da78,%rcx
  8004206227:	00 00 00 
  800420622a:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206231:	00 00 00 
  8004206234:	be 27 05 00 00       	mov    $0x527,%esi
  8004206239:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206240:	00 00 00 
  8004206243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206248:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420624f:	00 00 00 
  8004206252:	41 ff d0             	callq  *%r8
  8004206255:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206259:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420625d:	66 83 f8 01          	cmp    $0x1,%ax
  8004206261:	74 35                	je     8004206298 <page_check+0x7d1>
  8004206263:	48 b9 a5 da 21 04 80 	movabs $0x800421daa5,%rcx
  800420626a:	00 00 00 
  800420626d:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206274:	00 00 00 
  8004206277:	be 28 05 00 00       	mov    $0x528,%esi
  800420627c:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206283:	00 00 00 
  8004206286:	b8 00 00 00 00       	mov    $0x0,%eax
  800420628b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206292:	00 00 00 
  8004206295:	41 ff d0             	callq  *%r8
  8004206298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420629c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062a0:	66 83 f8 01          	cmp    $0x1,%ax
  80042062a4:	74 35                	je     80042062db <page_check+0x814>
  80042062a6:	48 b9 b6 da 21 04 80 	movabs $0x800421dab6,%rcx
  80042062ad:	00 00 00 
  80042062b0:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042062b7:	00 00 00 
  80042062ba:	be 29 05 00 00       	mov    $0x529,%esi
  80042062bf:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042062c6:	00 00 00 
  80042062c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062ce:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042062d5:	00 00 00 
  80042062d8:	41 ff d0             	callq  *%r8
  80042062db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062df:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062e3:	66 83 f8 01          	cmp    $0x1,%ax
  80042062e7:	74 35                	je     800420631e <page_check+0x857>
  80042062e9:	48 b9 c7 da 21 04 80 	movabs $0x800421dac7,%rcx
  80042062f0:	00 00 00 
  80042062f3:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042062fa:	00 00 00 
  80042062fd:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206302:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206309:	00 00 00 
  800420630c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206311:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206318:	00 00 00 
  800420631b:	41 ff d0             	callq  *%r8
  800420631e:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206325:	00 00 00 
  8004206328:	48 8b 00             	mov    (%rax),%rax
  800420632b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420632f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206334:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206339:	48 89 c7             	mov    %rax,%rdi
  800420633c:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206343:	00 00 00 
  8004206346:	ff d0                	callq  *%rax
  8004206348:	85 c0                	test   %eax,%eax
  800420634a:	74 35                	je     8004206381 <page_check+0x8ba>
  800420634c:	48 b9 d8 da 21 04 80 	movabs $0x800421dad8,%rcx
  8004206353:	00 00 00 
  8004206356:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420635d:	00 00 00 
  8004206360:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206365:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420636c:	00 00 00 
  800420636f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206374:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420637b:	00 00 00 
  800420637e:	41 ff d0             	callq  *%r8
  8004206381:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206388:	00 00 00 
  800420638b:	48 8b 00             	mov    (%rax),%rax
  800420638e:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206393:	48 89 c7             	mov    %rax,%rdi
  8004206396:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420639d:	00 00 00 
  80042063a0:	ff d0                	callq  *%rax
  80042063a2:	48 89 c3             	mov    %rax,%rbx
  80042063a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063a9:	48 89 c7             	mov    %rax,%rdi
  80042063ac:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042063b3:	00 00 00 
  80042063b6:	ff d0                	callq  *%rax
  80042063b8:	48 39 c3             	cmp    %rax,%rbx
  80042063bb:	74 35                	je     80042063f2 <page_check+0x92b>
  80042063bd:	48 b9 10 db 21 04 80 	movabs $0x800421db10,%rcx
  80042063c4:	00 00 00 
  80042063c7:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042063ce:	00 00 00 
  80042063d1:	be 2d 05 00 00       	mov    $0x52d,%esi
  80042063d6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042063dd:	00 00 00 
  80042063e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042063ec:	00 00 00 
  80042063ef:	41 ff d0             	callq  *%r8
  80042063f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063fa:	66 83 f8 02          	cmp    $0x2,%ax
  80042063fe:	74 35                	je     8004206435 <page_check+0x96e>
  8004206400:	48 b9 40 db 21 04 80 	movabs $0x800421db40,%rcx
  8004206407:	00 00 00 
  800420640a:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206411:	00 00 00 
  8004206414:	be 2e 05 00 00       	mov    $0x52e,%esi
  8004206419:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206420:	00 00 00 
  8004206423:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206428:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420642f:	00 00 00 
  8004206432:	41 ff d0             	callq  *%r8
  8004206435:	bf 00 00 00 00       	mov    $0x0,%edi
  800420643a:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004206441:	00 00 00 
  8004206444:	ff d0                	callq  *%rax
  8004206446:	48 85 c0             	test   %rax,%rax
  8004206449:	74 35                	je     8004206480 <page_check+0x9b9>
  800420644b:	48 b9 5f d6 21 04 80 	movabs $0x800421d65f,%rcx
  8004206452:	00 00 00 
  8004206455:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420645c:	00 00 00 
  800420645f:	be 31 05 00 00       	mov    $0x531,%esi
  8004206464:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420646b:	00 00 00 
  800420646e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206473:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420647a:	00 00 00 
  800420647d:	41 ff d0             	callq  *%r8
  8004206480:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206487:	00 00 00 
  800420648a:	48 8b 00             	mov    (%rax),%rax
  800420648d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206491:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206496:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420649b:	48 89 c7             	mov    %rax,%rdi
  800420649e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042064a5:	00 00 00 
  80042064a8:	ff d0                	callq  *%rax
  80042064aa:	85 c0                	test   %eax,%eax
  80042064ac:	74 35                	je     80042064e3 <page_check+0xa1c>
  80042064ae:	48 b9 d8 da 21 04 80 	movabs $0x800421dad8,%rcx
  80042064b5:	00 00 00 
  80042064b8:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042064bf:	00 00 00 
  80042064c2:	be 34 05 00 00       	mov    $0x534,%esi
  80042064c7:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042064ce:	00 00 00 
  80042064d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042064dd:	00 00 00 
  80042064e0:	41 ff d0             	callq  *%r8
  80042064e3:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042064ea:	00 00 00 
  80042064ed:	48 8b 00             	mov    (%rax),%rax
  80042064f0:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064f5:	48 89 c7             	mov    %rax,%rdi
  80042064f8:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042064ff:	00 00 00 
  8004206502:	ff d0                	callq  *%rax
  8004206504:	48 89 c3             	mov    %rax,%rbx
  8004206507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420650b:	48 89 c7             	mov    %rax,%rdi
  800420650e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206515:	00 00 00 
  8004206518:	ff d0                	callq  *%rax
  800420651a:	48 39 c3             	cmp    %rax,%rbx
  800420651d:	74 35                	je     8004206554 <page_check+0xa8d>
  800420651f:	48 b9 10 db 21 04 80 	movabs $0x800421db10,%rcx
  8004206526:	00 00 00 
  8004206529:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206530:	00 00 00 
  8004206533:	be 35 05 00 00       	mov    $0x535,%esi
  8004206538:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420653f:	00 00 00 
  8004206542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206547:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420654e:	00 00 00 
  8004206551:	41 ff d0             	callq  *%r8
  8004206554:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206558:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420655c:	66 83 f8 02          	cmp    $0x2,%ax
  8004206560:	74 35                	je     8004206597 <page_check+0xad0>
  8004206562:	48 b9 40 db 21 04 80 	movabs $0x800421db40,%rcx
  8004206569:	00 00 00 
  800420656c:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206573:	00 00 00 
  8004206576:	be 36 05 00 00       	mov    $0x536,%esi
  800420657b:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206582:	00 00 00 
  8004206585:	b8 00 00 00 00       	mov    $0x0,%eax
  800420658a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206591:	00 00 00 
  8004206594:	41 ff d0             	callq  *%r8
  8004206597:	bf 00 00 00 00       	mov    $0x0,%edi
  800420659c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042065a3:	00 00 00 
  80042065a6:	ff d0                	callq  *%rax
  80042065a8:	48 85 c0             	test   %rax,%rax
  80042065ab:	74 35                	je     80042065e2 <page_check+0xb1b>
  80042065ad:	48 b9 5f d6 21 04 80 	movabs $0x800421d65f,%rcx
  80042065b4:	00 00 00 
  80042065b7:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042065be:	00 00 00 
  80042065c1:	be 3a 05 00 00       	mov    $0x53a,%esi
  80042065c6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042065cd:	00 00 00 
  80042065d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065d5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042065dc:	00 00 00 
  80042065df:	41 ff d0             	callq  *%r8
  80042065e2:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042065e9:	00 00 00 
  80042065ec:	48 8b 00             	mov    (%rax),%rax
  80042065ef:	48 8b 00             	mov    (%rax),%rax
  80042065f2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042065f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042065fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206600:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206604:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206607:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420660a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004206611:	00 00 00 
  8004206614:	48 8b 00             	mov    (%rax),%rax
  8004206617:	48 39 c2             	cmp    %rax,%rdx
  800420661a:	72 32                	jb     800420664e <page_check+0xb87>
  800420661c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206620:	48 89 c1             	mov    %rax,%rcx
  8004206623:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  800420662a:	00 00 00 
  800420662d:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206632:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206639:	00 00 00 
  800420663c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206641:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206648:	00 00 00 
  800420664b:	41 ff d0             	callq  *%r8
  800420664e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206655:	00 00 00 
  8004206658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420665c:	48 01 d0             	add    %rdx,%rax
  800420665f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004206663:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206667:	48 8b 00             	mov    (%rax),%rax
  800420666a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206670:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206674:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206678:	48 c1 e8 0c          	shr    $0xc,%rax
  800420667c:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420667f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004206682:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004206689:	00 00 00 
  800420668c:	48 8b 00             	mov    (%rax),%rax
  800420668f:	48 39 c2             	cmp    %rax,%rdx
  8004206692:	72 32                	jb     80042066c6 <page_check+0xbff>
  8004206694:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206698:	48 89 c1             	mov    %rax,%rcx
  800420669b:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  80042066a2:	00 00 00 
  80042066a5:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042066aa:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042066b1:	00 00 00 
  80042066b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066b9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042066c0:	00 00 00 
  80042066c3:	41 ff d0             	callq  *%r8
  80042066c6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066cd:	00 00 00 
  80042066d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066d4:	48 01 d0             	add    %rdx,%rax
  80042066d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066df:	48 8b 00             	mov    (%rax),%rax
  80042066e2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042066f6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042066fa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206700:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206706:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420670d:	00 00 00 
  8004206710:	48 8b 00             	mov    (%rax),%rax
  8004206713:	48 39 c2             	cmp    %rax,%rdx
  8004206716:	72 35                	jb     800420674d <page_check+0xc86>
  8004206718:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420671f:	48 89 c1             	mov    %rax,%rcx
  8004206722:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004206729:	00 00 00 
  800420672c:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206731:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206738:	00 00 00 
  800420673b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206740:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206747:	00 00 00 
  800420674a:	41 ff d0             	callq  *%r8
  800420674d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206754:	00 00 00 
  8004206757:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420675e:	48 01 d0             	add    %rdx,%rax
  8004206761:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206768:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420676f:	00 00 00 
  8004206772:	48 8b 00             	mov    (%rax),%rax
  8004206775:	ba 00 00 00 00       	mov    $0x0,%edx
  800420677a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420677f:	48 89 c7             	mov    %rax,%rdi
  8004206782:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206789:	00 00 00 
  800420678c:	ff d0                	callq  *%rax
  800420678e:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  8004206795:	48 83 c2 08          	add    $0x8,%rdx
  8004206799:	48 39 d0             	cmp    %rdx,%rax
  800420679c:	74 35                	je     80042067d3 <page_check+0xd0c>
  800420679e:	48 b9 58 db 21 04 80 	movabs $0x800421db58,%rcx
  80042067a5:	00 00 00 
  80042067a8:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042067af:	00 00 00 
  80042067b2:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042067b7:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042067be:	00 00 00 
  80042067c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042067cd:	00 00 00 
  80042067d0:	41 ff d0             	callq  *%r8
  80042067d3:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042067da:	00 00 00 
  80042067dd:	48 8b 00             	mov    (%rax),%rax
  80042067e0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067e4:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067e9:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067ee:	48 89 c7             	mov    %rax,%rdi
  80042067f1:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042067f8:	00 00 00 
  80042067fb:	ff d0                	callq  *%rax
  80042067fd:	85 c0                	test   %eax,%eax
  80042067ff:	74 35                	je     8004206836 <page_check+0xd6f>
  8004206801:	48 b9 98 db 21 04 80 	movabs $0x800421db98,%rcx
  8004206808:	00 00 00 
  800420680b:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206812:	00 00 00 
  8004206815:	be 42 05 00 00       	mov    $0x542,%esi
  800420681a:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206821:	00 00 00 
  8004206824:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206829:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206830:	00 00 00 
  8004206833:	41 ff d0             	callq  *%r8
  8004206836:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420683d:	00 00 00 
  8004206840:	48 8b 00             	mov    (%rax),%rax
  8004206843:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206848:	48 89 c7             	mov    %rax,%rdi
  800420684b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206852:	00 00 00 
  8004206855:	ff d0                	callq  *%rax
  8004206857:	48 89 c3             	mov    %rax,%rbx
  800420685a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420685e:	48 89 c7             	mov    %rax,%rdi
  8004206861:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206868:	00 00 00 
  800420686b:	ff d0                	callq  *%rax
  800420686d:	48 39 c3             	cmp    %rax,%rbx
  8004206870:	74 35                	je     80042068a7 <page_check+0xde0>
  8004206872:	48 b9 10 db 21 04 80 	movabs $0x800421db10,%rcx
  8004206879:	00 00 00 
  800420687c:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206883:	00 00 00 
  8004206886:	be 43 05 00 00       	mov    $0x543,%esi
  800420688b:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206892:	00 00 00 
  8004206895:	b8 00 00 00 00       	mov    $0x0,%eax
  800420689a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068a1:	00 00 00 
  80042068a4:	41 ff d0             	callq  *%r8
  80042068a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068af:	66 83 f8 02          	cmp    $0x2,%ax
  80042068b3:	74 35                	je     80042068ea <page_check+0xe23>
  80042068b5:	48 b9 40 db 21 04 80 	movabs $0x800421db40,%rcx
  80042068bc:	00 00 00 
  80042068bf:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042068c6:	00 00 00 
  80042068c9:	be 44 05 00 00       	mov    $0x544,%esi
  80042068ce:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042068d5:	00 00 00 
  80042068d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068dd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068e4:	00 00 00 
  80042068e7:	41 ff d0             	callq  *%r8
  80042068ea:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042068f1:	00 00 00 
  80042068f4:	48 8b 00             	mov    (%rax),%rax
  80042068f7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206901:	48 89 c7             	mov    %rax,%rdi
  8004206904:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  800420690b:	00 00 00 
  800420690e:	ff d0                	callq  *%rax
  8004206910:	48 8b 00             	mov    (%rax),%rax
  8004206913:	83 e0 04             	and    $0x4,%eax
  8004206916:	48 85 c0             	test   %rax,%rax
  8004206919:	75 35                	jne    8004206950 <page_check+0xe89>
  800420691b:	48 b9 d8 db 21 04 80 	movabs $0x800421dbd8,%rcx
  8004206922:	00 00 00 
  8004206925:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420692c:	00 00 00 
  800420692f:	be 45 05 00 00       	mov    $0x545,%esi
  8004206934:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420693b:	00 00 00 
  800420693e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206943:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420694a:	00 00 00 
  800420694d:	41 ff d0             	callq  *%r8
  8004206950:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206957:	00 00 00 
  800420695a:	48 8b 00             	mov    (%rax),%rax
  800420695d:	48 8b 00             	mov    (%rax),%rax
  8004206960:	83 e0 04             	and    $0x4,%eax
  8004206963:	48 85 c0             	test   %rax,%rax
  8004206966:	75 35                	jne    800420699d <page_check+0xed6>
  8004206968:	48 b9 0b dc 21 04 80 	movabs $0x800421dc0b,%rcx
  800420696f:	00 00 00 
  8004206972:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206979:	00 00 00 
  800420697c:	be 46 05 00 00       	mov    $0x546,%esi
  8004206981:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206988:	00 00 00 
  800420698b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206990:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206997:	00 00 00 
  800420699a:	41 ff d0             	callq  *%r8
  800420699d:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042069a4:	00 00 00 
  80042069a7:	48 8b 00             	mov    (%rax),%rax
  80042069aa:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069b3:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069b8:	48 89 c7             	mov    %rax,%rdi
  80042069bb:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042069c2:	00 00 00 
  80042069c5:	ff d0                	callq  *%rax
  80042069c7:	85 c0                	test   %eax,%eax
  80042069c9:	78 35                	js     8004206a00 <page_check+0xf39>
  80042069cb:	48 b9 28 dc 21 04 80 	movabs $0x800421dc28,%rcx
  80042069d2:	00 00 00 
  80042069d5:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042069dc:	00 00 00 
  80042069df:	be 4a 05 00 00       	mov    $0x54a,%esi
  80042069e4:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042069eb:	00 00 00 
  80042069ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069f3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042069fa:	00 00 00 
  80042069fd:	41 ff d0             	callq  *%r8
  8004206a00:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206a07:	00 00 00 
  8004206a0a:	48 8b 00             	mov    (%rax),%rax
  8004206a0d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a11:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a16:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a1b:	48 89 c7             	mov    %rax,%rdi
  8004206a1e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206a25:	00 00 00 
  8004206a28:	ff d0                	callq  *%rax
  8004206a2a:	85 c0                	test   %eax,%eax
  8004206a2c:	74 35                	je     8004206a63 <page_check+0xf9c>
  8004206a2e:	48 b9 60 dc 21 04 80 	movabs $0x800421dc60,%rcx
  8004206a35:	00 00 00 
  8004206a38:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206a3f:	00 00 00 
  8004206a42:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206a47:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206a4e:	00 00 00 
  8004206a51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206a5d:	00 00 00 
  8004206a60:	41 ff d0             	callq  *%r8
  8004206a63:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206a6a:	00 00 00 
  8004206a6d:	48 8b 00             	mov    (%rax),%rax
  8004206a70:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a75:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a7a:	48 89 c7             	mov    %rax,%rdi
  8004206a7d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206a84:	00 00 00 
  8004206a87:	ff d0                	callq  *%rax
  8004206a89:	48 8b 00             	mov    (%rax),%rax
  8004206a8c:	83 e0 04             	and    $0x4,%eax
  8004206a8f:	48 85 c0             	test   %rax,%rax
  8004206a92:	74 35                	je     8004206ac9 <page_check+0x1002>
  8004206a94:	48 b9 98 dc 21 04 80 	movabs $0x800421dc98,%rcx
  8004206a9b:	00 00 00 
  8004206a9e:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206aa5:	00 00 00 
  8004206aa8:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206aad:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206ab4:	00 00 00 
  8004206ab7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206abc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ac3:	00 00 00 
  8004206ac6:	41 ff d0             	callq  *%r8
  8004206ac9:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206ad0:	00 00 00 
  8004206ad3:	48 8b 00             	mov    (%rax),%rax
  8004206ad6:	be 00 00 00 00       	mov    $0x0,%esi
  8004206adb:	48 89 c7             	mov    %rax,%rdi
  8004206ade:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ae5:	00 00 00 
  8004206ae8:	ff d0                	callq  *%rax
  8004206aea:	48 89 c3             	mov    %rax,%rbx
  8004206aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206af1:	48 89 c7             	mov    %rax,%rdi
  8004206af4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206afb:	00 00 00 
  8004206afe:	ff d0                	callq  *%rax
  8004206b00:	48 39 c3             	cmp    %rax,%rbx
  8004206b03:	74 35                	je     8004206b3a <page_check+0x1073>
  8004206b05:	48 b9 d0 dc 21 04 80 	movabs $0x800421dcd0,%rcx
  8004206b0c:	00 00 00 
  8004206b0f:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206b16:	00 00 00 
  8004206b19:	be 51 05 00 00       	mov    $0x551,%esi
  8004206b1e:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206b25:	00 00 00 
  8004206b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206b34:	00 00 00 
  8004206b37:	41 ff d0             	callq  *%r8
  8004206b3a:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206b41:	00 00 00 
  8004206b44:	48 8b 00             	mov    (%rax),%rax
  8004206b47:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b4c:	48 89 c7             	mov    %rax,%rdi
  8004206b4f:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206b56:	00 00 00 
  8004206b59:	ff d0                	callq  *%rax
  8004206b5b:	48 89 c3             	mov    %rax,%rbx
  8004206b5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b62:	48 89 c7             	mov    %rax,%rdi
  8004206b65:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206b6c:	00 00 00 
  8004206b6f:	ff d0                	callq  *%rax
  8004206b71:	48 39 c3             	cmp    %rax,%rbx
  8004206b74:	74 35                	je     8004206bab <page_check+0x10e4>
  8004206b76:	48 b9 00 dd 21 04 80 	movabs $0x800421dd00,%rcx
  8004206b7d:	00 00 00 
  8004206b80:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206b87:	00 00 00 
  8004206b8a:	be 52 05 00 00       	mov    $0x552,%esi
  8004206b8f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206b96:	00 00 00 
  8004206b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ba5:	00 00 00 
  8004206ba8:	41 ff d0             	callq  *%r8
  8004206bab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206baf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bb3:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bb7:	74 35                	je     8004206bee <page_check+0x1127>
  8004206bb9:	48 b9 30 dd 21 04 80 	movabs $0x800421dd30,%rcx
  8004206bc0:	00 00 00 
  8004206bc3:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206bca:	00 00 00 
  8004206bcd:	be 54 05 00 00       	mov    $0x554,%esi
  8004206bd2:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206bd9:	00 00 00 
  8004206bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206be1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206be8:	00 00 00 
  8004206beb:	41 ff d0             	callq  *%r8
  8004206bee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bf2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bf6:	66 83 f8 01          	cmp    $0x1,%ax
  8004206bfa:	74 35                	je     8004206c31 <page_check+0x116a>
  8004206bfc:	48 b9 41 dd 21 04 80 	movabs $0x800421dd41,%rcx
  8004206c03:	00 00 00 
  8004206c06:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206c0d:	00 00 00 
  8004206c10:	be 55 05 00 00       	mov    $0x555,%esi
  8004206c15:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206c1c:	00 00 00 
  8004206c1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206c2b:	00 00 00 
  8004206c2e:	41 ff d0             	callq  *%r8
  8004206c31:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206c38:	00 00 00 
  8004206c3b:	48 8b 00             	mov    (%rax),%rax
  8004206c3e:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c43:	48 89 c7             	mov    %rax,%rdi
  8004206c46:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206c4d:	00 00 00 
  8004206c50:	ff d0                	callq  *%rax
  8004206c52:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206c59:	00 00 00 
  8004206c5c:	48 8b 00             	mov    (%rax),%rax
  8004206c5f:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c64:	48 89 c7             	mov    %rax,%rdi
  8004206c67:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206c6e:	00 00 00 
  8004206c71:	ff d0                	callq  *%rax
  8004206c73:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c77:	74 35                	je     8004206cae <page_check+0x11e7>
  8004206c79:	48 b9 58 dd 21 04 80 	movabs $0x800421dd58,%rcx
  8004206c80:	00 00 00 
  8004206c83:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206c8a:	00 00 00 
  8004206c8d:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206c92:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206c99:	00 00 00 
  8004206c9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ca1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ca8:	00 00 00 
  8004206cab:	41 ff d0             	callq  *%r8
  8004206cae:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206cb5:	00 00 00 
  8004206cb8:	48 8b 00             	mov    (%rax),%rax
  8004206cbb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206cc0:	48 89 c7             	mov    %rax,%rdi
  8004206cc3:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206cca:	00 00 00 
  8004206ccd:	ff d0                	callq  *%rax
  8004206ccf:	48 89 c3             	mov    %rax,%rbx
  8004206cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cd6:	48 89 c7             	mov    %rax,%rdi
  8004206cd9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206ce0:	00 00 00 
  8004206ce3:	ff d0                	callq  *%rax
  8004206ce5:	48 39 c3             	cmp    %rax,%rbx
  8004206ce8:	74 35                	je     8004206d1f <page_check+0x1258>
  8004206cea:	48 b9 00 dd 21 04 80 	movabs $0x800421dd00,%rcx
  8004206cf1:	00 00 00 
  8004206cf4:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206cfb:	00 00 00 
  8004206cfe:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206d03:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206d0a:	00 00 00 
  8004206d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d12:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d19:	00 00 00 
  8004206d1c:	41 ff d0             	callq  *%r8
  8004206d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d27:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d2b:	74 35                	je     8004206d62 <page_check+0x129b>
  8004206d2d:	48 b9 a5 da 21 04 80 	movabs $0x800421daa5,%rcx
  8004206d34:	00 00 00 
  8004206d37:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206d3e:	00 00 00 
  8004206d41:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206d46:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206d4d:	00 00 00 
  8004206d50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d55:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d5c:	00 00 00 
  8004206d5f:	41 ff d0             	callq  *%r8
  8004206d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d66:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d6a:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d6e:	74 35                	je     8004206da5 <page_check+0x12de>
  8004206d70:	48 b9 41 dd 21 04 80 	movabs $0x800421dd41,%rcx
  8004206d77:	00 00 00 
  8004206d7a:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206d81:	00 00 00 
  8004206d84:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206d89:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206d90:	00 00 00 
  8004206d93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d9f:	00 00 00 
  8004206da2:	41 ff d0             	callq  *%r8
  8004206da5:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206dac:	00 00 00 
  8004206daf:	48 8b 00             	mov    (%rax),%rax
  8004206db2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206db6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dbb:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dc0:	48 89 c7             	mov    %rax,%rdi
  8004206dc3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206dca:	00 00 00 
  8004206dcd:	ff d0                	callq  *%rax
  8004206dcf:	85 c0                	test   %eax,%eax
  8004206dd1:	74 35                	je     8004206e08 <page_check+0x1341>
  8004206dd3:	48 b9 60 dc 21 04 80 	movabs $0x800421dc60,%rcx
  8004206dda:	00 00 00 
  8004206ddd:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206de4:	00 00 00 
  8004206de7:	be 61 05 00 00       	mov    $0x561,%esi
  8004206dec:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206df3:	00 00 00 
  8004206df6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206dfb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e02:	00 00 00 
  8004206e05:	41 ff d0             	callq  *%r8
  8004206e08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e0c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e10:	66 85 c0             	test   %ax,%ax
  8004206e13:	75 35                	jne    8004206e4a <page_check+0x1383>
  8004206e15:	48 b9 7b dd 21 04 80 	movabs $0x800421dd7b,%rcx
  8004206e1c:	00 00 00 
  8004206e1f:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206e26:	00 00 00 
  8004206e29:	be 62 05 00 00       	mov    $0x562,%esi
  8004206e2e:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206e35:	00 00 00 
  8004206e38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e44:	00 00 00 
  8004206e47:	41 ff d0             	callq  *%r8
  8004206e4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e4e:	48 8b 00             	mov    (%rax),%rax
  8004206e51:	48 85 c0             	test   %rax,%rax
  8004206e54:	74 35                	je     8004206e8b <page_check+0x13c4>
  8004206e56:	48 b9 87 dd 21 04 80 	movabs $0x800421dd87,%rcx
  8004206e5d:	00 00 00 
  8004206e60:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206e67:	00 00 00 
  8004206e6a:	be 63 05 00 00       	mov    $0x563,%esi
  8004206e6f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206e76:	00 00 00 
  8004206e79:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e7e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e85:	00 00 00 
  8004206e88:	41 ff d0             	callq  *%r8
  8004206e8b:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206e92:	00 00 00 
  8004206e95:	48 8b 00             	mov    (%rax),%rax
  8004206e98:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e9d:	48 89 c7             	mov    %rax,%rdi
  8004206ea0:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206ea7:	00 00 00 
  8004206eaa:	ff d0                	callq  *%rax
  8004206eac:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	48 8b 00             	mov    (%rax),%rax
  8004206eb9:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ebe:	48 89 c7             	mov    %rax,%rdi
  8004206ec1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ec8:	00 00 00 
  8004206ecb:	ff d0                	callq  *%rax
  8004206ecd:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206ed1:	74 35                	je     8004206f08 <page_check+0x1441>
  8004206ed3:	48 b9 58 dd 21 04 80 	movabs $0x800421dd58,%rcx
  8004206eda:	00 00 00 
  8004206edd:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206ee4:	00 00 00 
  8004206ee7:	be 67 05 00 00       	mov    $0x567,%esi
  8004206eec:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206ef3:	00 00 00 
  8004206ef6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206efb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f02:	00 00 00 
  8004206f05:	41 ff d0             	callq  *%r8
  8004206f08:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206f0f:	00 00 00 
  8004206f12:	48 8b 00             	mov    (%rax),%rax
  8004206f15:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f1a:	48 89 c7             	mov    %rax,%rdi
  8004206f1d:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206f24:	00 00 00 
  8004206f27:	ff d0                	callq  *%rax
  8004206f29:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f2d:	74 35                	je     8004206f64 <page_check+0x149d>
  8004206f2f:	48 b9 a0 dd 21 04 80 	movabs $0x800421dda0,%rcx
  8004206f36:	00 00 00 
  8004206f39:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206f40:	00 00 00 
  8004206f43:	be 68 05 00 00       	mov    $0x568,%esi
  8004206f48:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206f4f:	00 00 00 
  8004206f52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f5e:	00 00 00 
  8004206f61:	41 ff d0             	callq  *%r8
  8004206f64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f6c:	66 85 c0             	test   %ax,%ax
  8004206f6f:	74 35                	je     8004206fa6 <page_check+0x14df>
  8004206f71:	48 b9 c6 dd 21 04 80 	movabs $0x800421ddc6,%rcx
  8004206f78:	00 00 00 
  8004206f7b:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206f82:	00 00 00 
  8004206f85:	be 69 05 00 00       	mov    $0x569,%esi
  8004206f8a:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206f91:	00 00 00 
  8004206f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f99:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fa0:	00 00 00 
  8004206fa3:	41 ff d0             	callq  *%r8
  8004206fa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206faa:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fae:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fb2:	74 35                	je     8004206fe9 <page_check+0x1522>
  8004206fb4:	48 b9 41 dd 21 04 80 	movabs $0x800421dd41,%rcx
  8004206fbb:	00 00 00 
  8004206fbe:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004206fc5:	00 00 00 
  8004206fc8:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206fcd:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004206fd4:	00 00 00 
  8004206fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fe3:	00 00 00 
  8004206fe6:	41 ff d0             	callq  *%r8
  8004206fe9:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004206ff0:	00 00 00 
  8004206ff3:	48 8b 00             	mov    (%rax),%rax
  8004206ff6:	48 8b 00             	mov    (%rax),%rax
  8004206ff9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206fff:	48 89 c7             	mov    %rax,%rdi
  8004207002:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004207009:	00 00 00 
  800420700c:	ff d0                	callq  *%rax
  800420700e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207015:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420701c:	00 00 00 
  800420701f:	48 8b 00             	mov    (%rax),%rax
  8004207022:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207029:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420702d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207031:	66 83 f8 01          	cmp    $0x1,%ax
  8004207035:	74 35                	je     800420706c <page_check+0x15a5>
  8004207037:	48 b9 41 dd 21 04 80 	movabs $0x800421dd41,%rcx
  800420703e:	00 00 00 
  8004207041:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207048:	00 00 00 
  800420704b:	be 80 05 00 00       	mov    $0x580,%esi
  8004207050:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207057:	00 00 00 
  800420705a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420705f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207066:	00 00 00 
  8004207069:	41 ff d0             	callq  *%r8
  800420706c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207073:	48 89 c7             	mov    %rax,%rdi
  8004207076:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420707d:	00 00 00 
  8004207080:	ff d0                	callq  *%rax
  8004207082:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207089:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420708d:	74 13                	je     80042070a2 <page_check+0x15db>
  800420708f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207093:	48 89 c7             	mov    %rax,%rdi
  8004207096:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420709d:	00 00 00 
  80042070a0:	ff d0                	callq  *%rax
  80042070a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070a9:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070ad:	74 13                	je     80042070c2 <page_check+0x15fb>
  80042070af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070b3:	48 89 c7             	mov    %rax,%rdi
  80042070b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070bd:	00 00 00 
  80042070c0:	ff d0                	callq  *%rax
  80042070c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070c9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070cd:	74 13                	je     80042070e2 <page_check+0x161b>
  80042070cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070d3:	48 89 c7             	mov    %rax,%rdi
  80042070d6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070dd:	00 00 00 
  80042070e0:	ff d0                	callq  *%rax
  80042070e2:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070e9:	00 40 06 00 
  80042070ed:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042070f4:	00 00 00 
  80042070f7:	48 8b 00             	mov    (%rax),%rax
  80042070fa:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207101:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207106:	48 89 ce             	mov    %rcx,%rsi
  8004207109:	48 89 c7             	mov    %rax,%rdi
  800420710c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207113:	00 00 00 
  8004207116:	ff d0                	callq  *%rax
  8004207118:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420711f:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207126:	00 00 00 
  8004207129:	48 8b 00             	mov    (%rax),%rax
  800420712c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207133:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207137:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  800420713d:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207141:	48 01 d0             	add    %rdx,%rax
  8004207144:	48 8b 00             	mov    (%rax),%rax
  8004207147:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420714d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207154:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420715b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420715f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207165:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  800420716b:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207172:	00 00 00 
  8004207175:	48 8b 00             	mov    (%rax),%rax
  8004207178:	48 39 c2             	cmp    %rax,%rdx
  800420717b:	72 35                	jb     80042071b2 <page_check+0x16eb>
  800420717d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207184:	48 89 c1             	mov    %rax,%rcx
  8004207187:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  800420718e:	00 00 00 
  8004207191:	be 88 05 00 00       	mov    $0x588,%esi
  8004207196:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420719d:	00 00 00 
  80042071a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042071ac:	00 00 00 
  80042071af:	41 ff d0             	callq  *%r8
  80042071b2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071b9:	00 00 00 
  80042071bc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071c3:	48 01 d0             	add    %rdx,%rax
  80042071c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071ca:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071d1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071d5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071da:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071e1:	00 
  80042071e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071e6:	48 01 d0             	add    %rdx,%rax
  80042071e9:	48 8b 00             	mov    (%rax),%rax
  80042071ec:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071f2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042071f9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207200:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207204:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420720a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207210:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207217:	00 00 00 
  800420721a:	48 8b 00             	mov    (%rax),%rax
  800420721d:	48 39 c2             	cmp    %rax,%rdx
  8004207220:	72 35                	jb     8004207257 <page_check+0x1790>
  8004207222:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207229:	48 89 c1             	mov    %rax,%rcx
  800420722c:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004207233:	00 00 00 
  8004207236:	be 89 05 00 00       	mov    $0x589,%esi
  800420723b:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207242:	00 00 00 
  8004207245:	b8 00 00 00 00       	mov    $0x0,%eax
  800420724a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207251:	00 00 00 
  8004207254:	41 ff d0             	callq  *%r8
  8004207257:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420725e:	00 00 00 
  8004207261:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207268:	48 01 d0             	add    %rdx,%rax
  800420726b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420726f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207276:	48 c1 e8 15          	shr    $0x15,%rax
  800420727a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420727f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207286:	00 
  8004207287:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420728b:	48 01 d0             	add    %rdx,%rax
  800420728e:	48 8b 00             	mov    (%rax),%rax
  8004207291:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207297:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420729e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072a5:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072af:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072b5:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042072bc:	00 00 00 
  80042072bf:	48 8b 00             	mov    (%rax),%rax
  80042072c2:	48 39 c2             	cmp    %rax,%rdx
  80042072c5:	72 35                	jb     80042072fc <page_check+0x1835>
  80042072c7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072ce:	48 89 c1             	mov    %rax,%rcx
  80042072d1:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  80042072d8:	00 00 00 
  80042072db:	be 8a 05 00 00       	mov    $0x58a,%esi
  80042072e0:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042072e7:	00 00 00 
  80042072ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042072f6:	00 00 00 
  80042072f9:	41 ff d0             	callq  *%r8
  80042072fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207303:	00 00 00 
  8004207306:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800420730d:	48 01 d0             	add    %rdx,%rax
  8004207310:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207317:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420731e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207322:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207327:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420732e:	00 
  800420732f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207336:	48 01 c2             	add    %rax,%rdx
  8004207339:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207340:	48 39 c2             	cmp    %rax,%rdx
  8004207343:	74 35                	je     800420737a <page_check+0x18b3>
  8004207345:	48 b9 d7 dd 21 04 80 	movabs $0x800421ddd7,%rcx
  800420734c:	00 00 00 
  800420734f:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207356:	00 00 00 
  8004207359:	be 8b 05 00 00       	mov    $0x58b,%esi
  800420735e:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207365:	00 00 00 
  8004207368:	b8 00 00 00 00       	mov    $0x0,%eax
  800420736d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207374:	00 00 00 
  8004207377:	41 ff d0             	callq  *%r8
  800420737a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420737e:	48 89 c7             	mov    %rax,%rdi
  8004207381:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004207388:	00 00 00 
  800420738b:	ff d0                	callq  *%rax
  800420738d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004207392:	be ff 00 00 00       	mov    $0xff,%esi
  8004207397:	48 89 c7             	mov    %rax,%rdi
  800420739a:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  80042073a1:	00 00 00 
  80042073a4:	ff d0                	callq  *%rax
  80042073a6:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042073ad:	00 00 00 
  80042073b0:	48 8b 00             	mov    (%rax),%rax
  80042073b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073b8:	be 00 00 00 00       	mov    $0x0,%esi
  80042073bd:	48 89 c7             	mov    %rax,%rdi
  80042073c0:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042073c7:	00 00 00 
  80042073ca:	ff d0                	callq  *%rax
  80042073cc:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042073d3:	00 00 00 
  80042073d6:	48 8b 00             	mov    (%rax),%rax
  80042073d9:	48 8b 00             	mov    (%rax),%rax
  80042073dc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073e2:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073e9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073f0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073f4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  80042073fa:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207400:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207407:	00 00 00 
  800420740a:	48 8b 00             	mov    (%rax),%rax
  800420740d:	48 39 c2             	cmp    %rax,%rdx
  8004207410:	72 35                	jb     8004207447 <page_check+0x1980>
  8004207412:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207419:	48 89 c1             	mov    %rax,%rcx
  800420741c:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004207423:	00 00 00 
  8004207426:	be 90 05 00 00       	mov    $0x590,%esi
  800420742b:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207432:	00 00 00 
  8004207435:	b8 00 00 00 00       	mov    $0x0,%eax
  800420743a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207441:	00 00 00 
  8004207444:	41 ff d0             	callq  *%r8
  8004207447:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420744e:	00 00 00 
  8004207451:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207458:	48 01 d0             	add    %rdx,%rax
  800420745b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420745f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004207463:	48 8b 00             	mov    (%rax),%rax
  8004207466:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420746c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004207473:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420747a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420747e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207484:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800420748a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207491:	00 00 00 
  8004207494:	48 8b 00             	mov    (%rax),%rax
  8004207497:	48 39 c2             	cmp    %rax,%rdx
  800420749a:	72 35                	jb     80042074d1 <page_check+0x1a0a>
  800420749c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074a3:	48 89 c1             	mov    %rax,%rcx
  80042074a6:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  80042074ad:	00 00 00 
  80042074b0:	be 91 05 00 00       	mov    $0x591,%esi
  80042074b5:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042074bc:	00 00 00 
  80042074bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042074cb:	00 00 00 
  80042074ce:	41 ff d0             	callq  *%r8
  80042074d1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074d8:	00 00 00 
  80042074db:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074e2:	48 01 d0             	add    %rdx,%rax
  80042074e5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074ed:	48 8b 00             	mov    (%rax),%rax
  80042074f0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042074f6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042074fd:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207504:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207508:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420750e:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207514:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420751b:	00 00 00 
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 39 c2             	cmp    %rax,%rdx
  8004207524:	72 35                	jb     800420755b <page_check+0x1a94>
  8004207526:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420752d:	48 89 c1             	mov    %rax,%rcx
  8004207530:	48 ba 38 d1 21 04 80 	movabs $0x800421d138,%rdx
  8004207537:	00 00 00 
  800420753a:	be 92 05 00 00       	mov    $0x592,%esi
  800420753f:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207546:	00 00 00 
  8004207549:	b8 00 00 00 00       	mov    $0x0,%eax
  800420754e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207555:	00 00 00 
  8004207558:	41 ff d0             	callq  *%r8
  800420755b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207562:	00 00 00 
  8004207565:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420756c:	48 01 d0             	add    %rdx,%rax
  800420756f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207576:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420757d:	eb 58                	jmp    80042075d7 <page_check+0x1b10>
  800420757f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207586:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207589:	48 63 d2             	movslq %edx,%rdx
  800420758c:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207590:	48 01 d0             	add    %rdx,%rax
  8004207593:	48 8b 00             	mov    (%rax),%rax
  8004207596:	83 e0 01             	and    $0x1,%eax
  8004207599:	48 85 c0             	test   %rax,%rax
  800420759c:	74 35                	je     80042075d3 <page_check+0x1b0c>
  800420759e:	48 b9 ef dd 21 04 80 	movabs $0x800421ddef,%rcx
  80042075a5:	00 00 00 
  80042075a8:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042075af:	00 00 00 
  80042075b2:	be 94 05 00 00       	mov    $0x594,%esi
  80042075b7:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042075be:	00 00 00 
  80042075c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042075cd:	00 00 00 
  80042075d0:	41 ff d0             	callq  *%r8
  80042075d3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075d7:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075de:	7e 9f                	jle    800420757f <page_check+0x1ab8>
  80042075e0:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042075e7:	00 00 00 
  80042075ea:	48 8b 00             	mov    (%rax),%rax
  80042075ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042075f4:	48 b8 38 b2 4d 04 80 	movabs $0x80044db238,%rax
  80042075fb:	00 00 00 
  80042075fe:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207602:	48 89 10             	mov    %rdx,(%rax)
  8004207605:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207609:	48 89 c7             	mov    %rax,%rdi
  800420760c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207613:	00 00 00 
  8004207616:	ff d0                	callq  *%rax
  8004207618:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420761c:	48 89 c7             	mov    %rax,%rdi
  800420761f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207626:	00 00 00 
  8004207629:	ff d0                	callq  *%rax
  800420762b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420762f:	48 89 c7             	mov    %rax,%rdi
  8004207632:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207639:	00 00 00 
  800420763c:	ff d0                	callq  *%rax
  800420763e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207642:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207646:	66 85 c0             	test   %ax,%ax
  8004207649:	74 35                	je     8004207680 <page_check+0x1bb9>
  800420764b:	48 b9 06 de 21 04 80 	movabs $0x800421de06,%rcx
  8004207652:	00 00 00 
  8004207655:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420765c:	00 00 00 
  800420765f:	be a0 05 00 00       	mov    $0x5a0,%esi
  8004207664:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420766b:	00 00 00 
  800420766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207673:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420767a:	00 00 00 
  800420767d:	41 ff d0             	callq  *%r8
  8004207680:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207684:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207688:	66 85 c0             	test   %ax,%ax
  800420768b:	74 35                	je     80042076c2 <page_check+0x1bfb>
  800420768d:	48 b9 c6 dd 21 04 80 	movabs $0x800421ddc6,%rcx
  8004207694:	00 00 00 
  8004207697:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420769e:	00 00 00 
  80042076a1:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042076a6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042076ad:	00 00 00 
  80042076b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076bc:	00 00 00 
  80042076bf:	41 ff d0             	callq  *%r8
  80042076c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076c6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076ca:	66 85 c0             	test   %ax,%ax
  80042076cd:	74 35                	je     8004207704 <page_check+0x1c3d>
  80042076cf:	48 b9 17 de 21 04 80 	movabs $0x800421de17,%rcx
  80042076d6:	00 00 00 
  80042076d9:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042076e0:	00 00 00 
  80042076e3:	be a2 05 00 00       	mov    $0x5a2,%esi
  80042076e8:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042076ef:	00 00 00 
  80042076f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076f7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076fe:	00 00 00 
  8004207701:	41 ff d0             	callq  *%r8
  8004207704:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207708:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420770c:	66 85 c0             	test   %ax,%ax
  800420770f:	74 35                	je     8004207746 <page_check+0x1c7f>
  8004207711:	48 b9 28 de 21 04 80 	movabs $0x800421de28,%rcx
  8004207718:	00 00 00 
  800420771b:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207722:	00 00 00 
  8004207725:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420772a:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207731:	00 00 00 
  8004207734:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207739:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207740:	00 00 00 
  8004207743:	41 ff d0             	callq  *%r8
  8004207746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420774a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420774e:	66 85 c0             	test   %ax,%ax
  8004207751:	74 35                	je     8004207788 <page_check+0x1cc1>
  8004207753:	48 b9 39 de 21 04 80 	movabs $0x800421de39,%rcx
  800420775a:	00 00 00 
  800420775d:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207764:	00 00 00 
  8004207767:	be a4 05 00 00       	mov    $0x5a4,%esi
  800420776c:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207773:	00 00 00 
  8004207776:	b8 00 00 00 00       	mov    $0x0,%eax
  800420777b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207782:	00 00 00 
  8004207785:	41 ff d0             	callq  *%r8
  8004207788:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420778c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207790:	66 85 c0             	test   %ax,%ax
  8004207793:	74 35                	je     80042077ca <page_check+0x1d03>
  8004207795:	48 b9 4a de 21 04 80 	movabs $0x800421de4a,%rcx
  800420779c:	00 00 00 
  800420779f:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042077a6:	00 00 00 
  80042077a9:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042077ae:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042077b5:	00 00 00 
  80042077b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042077c4:	00 00 00 
  80042077c7:	41 ff d0             	callq  *%r8
  80042077ca:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077cf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077d4:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077db:	00 00 00 
  80042077de:	ff d0                	callq  *%rax
  80042077e0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077e7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077ec:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077f1:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077f8:	00 00 00 
  80042077fb:	ff d0                	callq  *%rax
  80042077fd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207804:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420780b:	00 00 00 
  800420780e:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207815:	76 1d                	jbe    8004207834 <page_check+0x1d6d>
  8004207817:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420781e:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207825:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420782c:	00 00 00 
  800420782f:	48 39 c2             	cmp    %rax,%rdx
  8004207832:	76 35                	jbe    8004207869 <page_check+0x1da2>
  8004207834:	48 b9 60 de 21 04 80 	movabs $0x800421de60,%rcx
  800420783b:	00 00 00 
  800420783e:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207845:	00 00 00 
  8004207848:	be ac 05 00 00       	mov    $0x5ac,%esi
  800420784d:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207854:	00 00 00 
  8004207857:	b8 00 00 00 00       	mov    $0x0,%eax
  800420785c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207863:	00 00 00 
  8004207866:	41 ff d0             	callq  *%r8
  8004207869:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207870:	00 00 00 
  8004207873:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  800420787a:	76 1d                	jbe    8004207899 <page_check+0x1dd2>
  800420787c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207883:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420788a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207891:	00 00 00 
  8004207894:	48 39 c2             	cmp    %rax,%rdx
  8004207897:	76 35                	jbe    80042078ce <page_check+0x1e07>
  8004207899:	48 b9 88 de 21 04 80 	movabs $0x800421de88,%rcx
  80042078a0:	00 00 00 
  80042078a3:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042078aa:	00 00 00 
  80042078ad:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042078b2:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042078b9:	00 00 00 
  80042078bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042078c8:	00 00 00 
  80042078cb:	41 ff d0             	callq  *%r8
  80042078ce:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078d5:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078da:	48 85 c0             	test   %rax,%rax
  80042078dd:	75 11                	jne    80042078f0 <page_check+0x1e29>
  80042078df:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078e6:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078eb:	48 85 c0             	test   %rax,%rax
  80042078ee:	74 35                	je     8004207925 <page_check+0x1e5e>
  80042078f0:	48 b9 b0 de 21 04 80 	movabs $0x800421deb0,%rcx
  80042078f7:	00 00 00 
  80042078fa:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207901:	00 00 00 
  8004207904:	be af 05 00 00       	mov    $0x5af,%esi
  8004207909:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207910:	00 00 00 
  8004207913:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207918:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420791f:	00 00 00 
  8004207922:	41 ff d0             	callq  *%r8
  8004207925:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420792c:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207932:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207939:	76 35                	jbe    8004207970 <page_check+0x1ea9>
  800420793b:	48 b9 d7 de 21 04 80 	movabs $0x800421ded7,%rcx
  8004207942:	00 00 00 
  8004207945:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  800420794c:	00 00 00 
  800420794f:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207954:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  800420795b:	00 00 00 
  800420795e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207963:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420796a:	00 00 00 
  800420796d:	41 ff d0             	callq  *%r8
  8004207970:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207977:	00 00 00 
  800420797a:	48 8b 00             	mov    (%rax),%rax
  800420797d:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207984:	48 89 d6             	mov    %rdx,%rsi
  8004207987:	48 89 c7             	mov    %rax,%rdi
  800420798a:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207991:	00 00 00 
  8004207994:	ff d0                	callq  *%rax
  8004207996:	48 85 c0             	test   %rax,%rax
  8004207999:	74 35                	je     80042079d0 <page_check+0x1f09>
  800420799b:	48 b9 f0 de 21 04 80 	movabs $0x800421def0,%rcx
  80042079a2:	00 00 00 
  80042079a5:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  80042079ac:	00 00 00 
  80042079af:	be b4 05 00 00       	mov    $0x5b4,%esi
  80042079b4:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  80042079bb:	00 00 00 
  80042079be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079c3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042079ca:	00 00 00 
  80042079cd:	41 ff d0             	callq  *%r8
  80042079d0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079d7:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079de:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  80042079e5:	00 00 00 
  80042079e8:	48 8b 00             	mov    (%rax),%rax
  80042079eb:	48 89 d6             	mov    %rdx,%rsi
  80042079ee:	48 89 c7             	mov    %rax,%rdi
  80042079f1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042079f8:	00 00 00 
  80042079fb:	ff d0                	callq  *%rax
  80042079fd:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a03:	74 35                	je     8004207a3a <page_check+0x1f73>
  8004207a05:	48 b9 18 df 21 04 80 	movabs $0x800421df18,%rcx
  8004207a0c:	00 00 00 
  8004207a0f:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207a16:	00 00 00 
  8004207a19:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207a1e:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207a25:	00 00 00 
  8004207a28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a34:	00 00 00 
  8004207a37:	41 ff d0             	callq  *%r8
  8004207a3a:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207a41:	00 00 00 
  8004207a44:	48 8b 00             	mov    (%rax),%rax
  8004207a47:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a4e:	48 89 d6             	mov    %rdx,%rsi
  8004207a51:	48 89 c7             	mov    %rax,%rdi
  8004207a54:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207a5b:	00 00 00 
  8004207a5e:	ff d0                	callq  *%rax
  8004207a60:	48 85 c0             	test   %rax,%rax
  8004207a63:	74 35                	je     8004207a9a <page_check+0x1fd3>
  8004207a65:	48 b9 48 df 21 04 80 	movabs $0x800421df48,%rcx
  8004207a6c:	00 00 00 
  8004207a6f:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207a76:	00 00 00 
  8004207a79:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207a7e:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207a85:	00 00 00 
  8004207a88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a8d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a94:	00 00 00 
  8004207a97:	41 ff d0             	callq  *%r8
  8004207a9a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aa1:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207aa8:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207aaf:	00 00 00 
  8004207ab2:	48 8b 00             	mov    (%rax),%rax
  8004207ab5:	48 89 d6             	mov    %rdx,%rsi
  8004207ab8:	48 89 c7             	mov    %rax,%rdi
  8004207abb:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207ac2:	00 00 00 
  8004207ac5:	ff d0                	callq  *%rax
  8004207ac7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207acb:	74 35                	je     8004207b02 <page_check+0x203b>
  8004207acd:	48 b9 70 df 21 04 80 	movabs $0x800421df70,%rcx
  8004207ad4:	00 00 00 
  8004207ad7:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207ade:	00 00 00 
  8004207ae1:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207ae6:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207aed:	00 00 00 
  8004207af0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207af5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207afc:	00 00 00 
  8004207aff:	41 ff d0             	callq  *%r8
  8004207b02:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b09:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207b10:	00 00 00 
  8004207b13:	48 8b 00             	mov    (%rax),%rax
  8004207b16:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b1b:	48 89 ce             	mov    %rcx,%rsi
  8004207b1e:	48 89 c7             	mov    %rax,%rdi
  8004207b21:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b28:	00 00 00 
  8004207b2b:	ff d0                	callq  *%rax
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	83 e0 1a             	and    $0x1a,%eax
  8004207b33:	48 85 c0             	test   %rax,%rax
  8004207b36:	75 35                	jne    8004207b6d <page_check+0x20a6>
  8004207b38:	48 b9 a0 df 21 04 80 	movabs $0x800421dfa0,%rcx
  8004207b3f:	00 00 00 
  8004207b42:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207b49:	00 00 00 
  8004207b4c:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207b51:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207b58:	00 00 00 
  8004207b5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b60:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207b67:	00 00 00 
  8004207b6a:	41 ff d0             	callq  *%r8
  8004207b6d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b74:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207b7b:	00 00 00 
  8004207b7e:	48 8b 00             	mov    (%rax),%rax
  8004207b81:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b86:	48 89 ce             	mov    %rcx,%rsi
  8004207b89:	48 89 c7             	mov    %rax,%rdi
  8004207b8c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b93:	00 00 00 
  8004207b96:	ff d0                	callq  *%rax
  8004207b98:	48 8b 00             	mov    (%rax),%rax
  8004207b9b:	83 e0 04             	and    $0x4,%eax
  8004207b9e:	48 85 c0             	test   %rax,%rax
  8004207ba1:	74 35                	je     8004207bd8 <page_check+0x2111>
  8004207ba3:	48 b9 e8 df 21 04 80 	movabs $0x800421dfe8,%rcx
  8004207baa:	00 00 00 
  8004207bad:	48 ba b1 d1 21 04 80 	movabs $0x800421d1b1,%rdx
  8004207bb4:	00 00 00 
  8004207bb7:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207bbc:	48 bf c6 d1 21 04 80 	movabs $0x800421d1c6,%rdi
  8004207bc3:	00 00 00 
  8004207bc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bcb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207bd2:	00 00 00 
  8004207bd5:	41 ff d0             	callq  *%r8
  8004207bd8:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207bdf:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207be6:	00 00 00 
  8004207be9:	48 8b 00             	mov    (%rax),%rax
  8004207bec:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bf1:	48 89 ce             	mov    %rcx,%rsi
  8004207bf4:	48 89 c7             	mov    %rax,%rdi
  8004207bf7:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207bfe:	00 00 00 
  8004207c01:	ff d0                	callq  *%rax
  8004207c03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c0a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c11:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c17:	48 89 c1             	mov    %rax,%rcx
  8004207c1a:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207c21:	00 00 00 
  8004207c24:	48 8b 00             	mov    (%rax),%rax
  8004207c27:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c2c:	48 89 ce             	mov    %rcx,%rsi
  8004207c2f:	48 89 c7             	mov    %rax,%rdi
  8004207c32:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c39:	00 00 00 
  8004207c3c:	ff d0                	callq  *%rax
  8004207c3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c45:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c4c:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  8004207c53:	00 00 00 
  8004207c56:	48 8b 00             	mov    (%rax),%rax
  8004207c59:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c5e:	48 89 ce             	mov    %rcx,%rsi
  8004207c61:	48 89 c7             	mov    %rax,%rdi
  8004207c64:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c6b:	00 00 00 
  8004207c6e:	ff d0                	callq  *%rax
  8004207c70:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c77:	48 bf 1b e0 21 04 80 	movabs $0x800421e01b,%rdi
  8004207c7e:	00 00 00 
  8004207c81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c86:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004207c8d:	00 00 00 
  8004207c90:	ff d2                	callq  *%rdx
  8004207c92:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207c99:	5b                   	pop    %rbx
  8004207c9a:	5d                   	pop    %rbp
  8004207c9b:	c3                   	retq   

0000008004207c9c <page2ppn>:
  8004207c9c:	55                   	push   %rbp
  8004207c9d:	48 89 e5             	mov    %rsp,%rbp
  8004207ca0:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ca4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ca8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cac:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004207cb3:	00 00 00 
  8004207cb6:	48 8b 00             	mov    (%rax),%rax
  8004207cb9:	48 29 c2             	sub    %rax,%rdx
  8004207cbc:	48 89 d0             	mov    %rdx,%rax
  8004207cbf:	48 c1 f8 04          	sar    $0x4,%rax
  8004207cc3:	c9                   	leaveq 
  8004207cc4:	c3                   	retq   

0000008004207cc5 <page2pa>:
  8004207cc5:	55                   	push   %rbp
  8004207cc6:	48 89 e5             	mov    %rsp,%rbp
  8004207cc9:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ccd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cd5:	48 89 c7             	mov    %rax,%rdi
  8004207cd8:	48 b8 9c 7c 20 04 80 	movabs $0x8004207c9c,%rax
  8004207cdf:	00 00 00 
  8004207ce2:	ff d0                	callq  *%rax
  8004207ce4:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207ce8:	c9                   	leaveq 
  8004207ce9:	c3                   	retq   

0000008004207cea <pa2page>:
  8004207cea:	55                   	push   %rbp
  8004207ceb:	48 89 e5             	mov    %rsp,%rbp
  8004207cee:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cfa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207cfe:	48 89 c2             	mov    %rax,%rdx
  8004207d01:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207d08:	00 00 00 
  8004207d0b:	48 8b 00             	mov    (%rax),%rax
  8004207d0e:	48 39 c2             	cmp    %rax,%rdx
  8004207d11:	72 2a                	jb     8004207d3d <pa2page+0x53>
  8004207d13:	48 ba 38 e0 21 04 80 	movabs $0x800421e038,%rdx
  8004207d1a:	00 00 00 
  8004207d1d:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d22:	48 bf 57 e0 21 04 80 	movabs $0x800421e057,%rdi
  8004207d29:	00 00 00 
  8004207d2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d31:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004207d38:	00 00 00 
  8004207d3b:	ff d1                	callq  *%rcx
  8004207d3d:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004207d44:	00 00 00 
  8004207d47:	48 8b 00             	mov    (%rax),%rax
  8004207d4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d4e:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d52:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d56:	48 01 d0             	add    %rdx,%rax
  8004207d59:	c9                   	leaveq 
  8004207d5a:	c3                   	retq   

0000008004207d5b <page2kva>:
  8004207d5b:	55                   	push   %rbp
  8004207d5c:	48 89 e5             	mov    %rsp,%rbp
  8004207d5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d6b:	48 89 c7             	mov    %rax,%rdi
  8004207d6e:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004207d75:	00 00 00 
  8004207d78:	ff d0                	callq  *%rax
  8004207d7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d82:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d86:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d8c:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004207d93:	00 00 00 
  8004207d96:	48 8b 00             	mov    (%rax),%rax
  8004207d99:	48 39 c2             	cmp    %rax,%rdx
  8004207d9c:	72 32                	jb     8004207dd0 <page2kva+0x75>
  8004207d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207da2:	48 89 c1             	mov    %rax,%rcx
  8004207da5:	48 ba 68 e0 21 04 80 	movabs $0x800421e068,%rdx
  8004207dac:	00 00 00 
  8004207daf:	be 62 00 00 00       	mov    $0x62,%esi
  8004207db4:	48 bf 57 e0 21 04 80 	movabs $0x800421e057,%rdi
  8004207dbb:	00 00 00 
  8004207dbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dc3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207dca:	00 00 00 
  8004207dcd:	41 ff d0             	callq  *%r8
  8004207dd0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207dd7:	00 00 00 
  8004207dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dde:	48 01 d0             	add    %rdx,%rax
  8004207de1:	c9                   	leaveq 
  8004207de2:	c3                   	retq   

0000008004207de3 <unlock_kernel>:
  8004207de3:	55                   	push   %rbp
  8004207de4:	48 89 e5             	mov    %rsp,%rbp
  8004207de7:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  8004207dee:	00 00 00 
  8004207df1:	48 b8 94 7d 21 04 80 	movabs $0x8004217d94,%rax
  8004207df8:	00 00 00 
  8004207dfb:	ff d0                	callq  *%rax
  8004207dfd:	f3 90                	pause  
  8004207dff:	5d                   	pop    %rbp
  8004207e00:	c3                   	retq   

0000008004207e01 <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207e01:	55                   	push   %rbp
  8004207e02:	48 89 e5             	mov    %rsp,%rbp
  8004207e05:	53                   	push   %rbx
  8004207e06:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e0a:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e11:	89 d0                	mov    %edx,%eax
  8004207e13:	88 45 d8             	mov    %al,-0x28(%rbp)
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	e = &envs[envid];
  8004207e16:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207e1d:	00 00 00 
  8004207e20:	48 8b 10             	mov    (%rax),%rdx
  8004207e23:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e26:	48 98                	cltq   
  8004207e28:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e2f:	48 01 d0             	add    %rdx,%rax
  8004207e32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207e36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e3a:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e40:	85 c0                	test   %eax,%eax
  8004207e42:	74 0f                	je     8004207e53 <envid2env+0x52>
  8004207e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e48:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207e4e:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207e51:	74 15                	je     8004207e68 <envid2env+0x67>
		*env_store = 0;
  8004207e53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e57:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207e5e:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207e63:	e9 a6 00 00 00       	jmpq   8004207f0e <envid2env+0x10d>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207e68:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207e6c:	0f 84 8f 00 00 00    	je     8004207f01 <envid2env+0x100>
  8004207e72:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004207e79:	00 00 00 
  8004207e7c:	ff d0                	callq  *%rax
  8004207e7e:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004207e85:	00 00 00 
  8004207e88:	48 98                	cltq   
  8004207e8a:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e8e:	48 89 c1             	mov    %rax,%rcx
  8004207e91:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e95:	48 01 c8             	add    %rcx,%rax
  8004207e98:	48 01 d0             	add    %rdx,%rax
  8004207e9b:	48 83 c0 08          	add    $0x8,%rax
  8004207e9f:	48 8b 10             	mov    (%rax),%rdx
  8004207ea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ea6:	48 39 c2             	cmp    %rax,%rdx
  8004207ea9:	74 56                	je     8004207f01 <envid2env+0x100>
  8004207eab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207eaf:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207eb5:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004207ebc:	00 00 00 
  8004207ebf:	ff d0                	callq  *%rax
  8004207ec1:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004207ec8:	00 00 00 
  8004207ecb:	48 98                	cltq   
  8004207ecd:	48 c1 e0 03          	shl    $0x3,%rax
  8004207ed1:	48 89 c1             	mov    %rax,%rcx
  8004207ed4:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207ed8:	48 01 c8             	add    %rcx,%rax
  8004207edb:	48 01 d0             	add    %rdx,%rax
  8004207ede:	48 83 c0 08          	add    $0x8,%rax
  8004207ee2:	48 8b 00             	mov    (%rax),%rax
  8004207ee5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207eeb:	39 c3                	cmp    %eax,%ebx
  8004207eed:	74 12                	je     8004207f01 <envid2env+0x100>
		*env_store = 0;
  8004207eef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207ef3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207efa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207eff:	eb 0d                	jmp    8004207f0e <envid2env+0x10d>
	}

	// should be *env_store = e;, this might literaly work tho
	env_store = &e;
  8004207f01:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  8004207f05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return 0;
  8004207f09:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004207f0e:	48 83 c4 28          	add    $0x28,%rsp
  8004207f12:	5b                   	pop    %rbx
  8004207f13:	5d                   	pop    %rbp
  8004207f14:	c3                   	retq   

0000008004207f15 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004207f15:	55                   	push   %rbp
  8004207f16:	48 89 e5             	mov    %rsp,%rbp
  8004207f19:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f1d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f24:	eb 6d                	jmp    8004207f93 <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  8004207f26:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207f2d:	00 00 00 
  8004207f30:	48 8b 10             	mov    (%rax),%rdx
  8004207f33:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f36:	48 98                	cltq   
  8004207f38:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f3f:	48 01 d0             	add    %rdx,%rax
  8004207f42:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207f49:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004207f4c:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207f53:	00 00 00 
  8004207f56:	48 8b 10             	mov    (%rax),%rdx
  8004207f59:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f5c:	48 98                	cltq   
  8004207f5e:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f65:	48 01 c2             	add    %rax,%rdx
  8004207f68:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207f6f:	00 00 00 
  8004207f72:	48 8b 08             	mov    (%rax),%rcx
  8004207f75:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f78:	48 98                	cltq   
  8004207f7a:	48 83 c0 01          	add    $0x1,%rax
  8004207f7e:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f85:	48 01 c8             	add    %rcx,%rax
  8004207f88:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f8f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207f93:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207f9a:	7e 8a                	jle    8004207f26 <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  8004207f9c:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207fa3:	00 00 00 
  8004207fa6:	48 8b 00             	mov    (%rax),%rax
  8004207fa9:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004207faf:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004207fb6:	00 00 00 00 
	env_free_list = &envs[0];
  8004207fba:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004207fc1:	00 00 00 
  8004207fc4:	48 8b 10             	mov    (%rax),%rdx
  8004207fc7:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  8004207fce:	00 00 00 
  8004207fd1:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004207fd4:	48 b8 e2 7f 20 04 80 	movabs $0x8004207fe2,%rax
  8004207fdb:	00 00 00 
  8004207fde:	ff d0                	callq  *%rax
}
  8004207fe0:	c9                   	leaveq 
  8004207fe1:	c3                   	retq   

0000008004207fe2 <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  8004207fe2:	55                   	push   %rbp
  8004207fe3:	48 89 e5             	mov    %rsp,%rbp
  8004207fe6:	53                   	push   %rbx
  8004207fe7:	48 83 ec 10          	sub    $0x10,%rsp
  8004207feb:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  8004207ff2:	00 00 00 
  8004207ff5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004207ff9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004207ffd:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  8004208000:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208005:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  8004208007:	b8 23 00 00 00       	mov    $0x23,%eax
  800420800c:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  800420800e:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208013:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  8004208015:	b8 10 00 00 00       	mov    $0x10,%eax
  800420801a:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  800420801c:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208021:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  8004208023:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208028:	89 c3                	mov    %eax,%ebx
  800420802a:	53                   	push   %rbx
  800420802b:	48 b8 38 80 20 04 80 	movabs $0x8004208038,%rax
  8004208032:	00 00 00 
  8004208035:	50                   	push   %rax
  8004208036:	48 cb                	lretq  
  8004208038:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  800420803e:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  8004208042:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  8004208045:	48 83 c4 10          	add    $0x10,%rsp
  8004208049:	5b                   	pop    %rbx
  800420804a:	5d                   	pop    %rbp
  800420804b:	c3                   	retq   

000000800420804c <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  800420804c:	55                   	push   %rbp
  800420804d:	48 89 e5             	mov    %rsp,%rbp
  8004208050:	48 83 ec 20          	sub    $0x20,%rsp
  8004208054:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  8004208058:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420805f:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  8004208060:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208065:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420806c:	00 00 00 
  800420806f:	ff d0                	callq  *%rax
  8004208071:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004208075:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420807a:	75 0a                	jne    8004208086 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  800420807c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208081:	e9 bc 00 00 00       	jmpq   8004208142 <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  8004208086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420808a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420808e:	8d 50 01             	lea    0x1(%rax),%edx
  8004208091:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208095:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  8004208099:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420809d:	48 89 c7             	mov    %rax,%rdi
  80042080a0:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042080a7:	00 00 00 
  80042080aa:	ff d0                	callq  *%rax
  80042080ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080b0:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  80042080b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080bb:	48 89 c7             	mov    %rax,%rdi
  80042080be:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  80042080c5:	00 00 00 
  80042080c8:	ff d0                	callq  *%rax
  80042080ca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080ce:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  80042080d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042080d9:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042080e0:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042080e5:	be 00 00 00 00       	mov    $0x0,%esi
  80042080ea:	48 89 c7             	mov    %rax,%rdi
  80042080ed:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  80042080f4:	00 00 00 
  80042080f7:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  80042080f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042080fd:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208104:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208108:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420810f:	00 00 00 
  8004208112:	48 8b 00             	mov    (%rax),%rax
  8004208115:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208119:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  800420811c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208120:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208127:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420812b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420812f:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208136:	48 83 c8 05          	or     $0x5,%rax
  800420813a:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  800420813d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208142:	c9                   	leaveq 
  8004208143:	c3                   	retq   

0000008004208144 <env_guest_alloc>:

#ifndef VMM_GUEST
int
env_guest_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208144:	55                   	push   %rbp
  8004208145:	48 89 e5             	mov    %rsp,%rbp
  8004208148:	48 83 ec 50          	sub    $0x50,%rsp
  800420814c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004208150:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int32_t generation;
	struct Env *e;

	if (!(e = env_free_list))
  8004208153:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  800420815a:	00 00 00 
  800420815d:	48 8b 00             	mov    (%rax),%rax
  8004208160:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208164:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208169:	75 0a                	jne    8004208175 <env_guest_alloc+0x31>
		return -E_NO_FREE_ENV;
  800420816b:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004208170:	e9 47 04 00 00       	jmpq   80042085bc <env_guest_alloc+0x478>

	memset(&e->env_vmxinfo, 0, sizeof(struct VmxGuestInfo));
  8004208175:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208179:	48 05 20 01 00 00    	add    $0x120,%rax
  800420817f:	ba 48 00 00 00       	mov    $0x48,%edx
  8004208184:	be 00 00 00 00       	mov    $0x0,%esi
  8004208189:	48 89 c7             	mov    %rax,%rdi
  800420818c:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004208193:	00 00 00 
  8004208196:	ff d0                	callq  *%rax

	// allocate a page for the EPT PML4..
	struct PageInfo *p = NULL;
  8004208198:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420819f:	00 

	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081a0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081a5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042081ac:	00 00 00 
  80042081af:	ff d0                	callq  *%rax
  80042081b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042081b5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042081ba:	75 0a                	jne    80042081c6 <env_guest_alloc+0x82>
		return -E_NO_MEM;
  80042081bc:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042081c1:	e9 f6 03 00 00       	jmpq   80042085bc <env_guest_alloc+0x478>

	memset(p, 0, sizeof(struct PageInfo));
  80042081c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042081ca:	ba 10 00 00 00       	mov    $0x10,%edx
  80042081cf:	be 00 00 00 00       	mov    $0x0,%esi
  80042081d4:	48 89 c7             	mov    %rax,%rdi
  80042081d7:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  80042081de:	00 00 00 
  80042081e1:	ff d0                	callq  *%rax
	p->pp_ref       += 1;
  80042081e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042081e7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042081eb:	8d 50 01             	lea    0x1(%rax),%edx
  80042081ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042081f2:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042081f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042081fa:	48 89 c7             	mov    %rax,%rdi
  80042081fd:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208204:	00 00 00 
  8004208207:	ff d0                	callq  *%rax
  8004208209:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420820d:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208218:	48 89 c7             	mov    %rax,%rdi
  800420821b:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004208222:	00 00 00 
  8004208225:	ff d0                	callq  *%rax
  8004208227:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420822b:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	// Allocate a VMCS.
	struct PageInfo *q = vmx_init_vmcs();
  8004208232:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208237:	48 ba 95 9c 21 04 80 	movabs $0x8004219c95,%rdx
  800420823e:	00 00 00 
  8004208241:	ff d2                	callq  *%rdx
  8004208243:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!q) {
  8004208247:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420824c:	75 1d                	jne    800420826b <env_guest_alloc+0x127>
		page_decref(p);
  800420824e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208252:	48 89 c7             	mov    %rax,%rdi
  8004208255:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420825c:	00 00 00 
  800420825f:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  8004208261:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208266:	e9 51 03 00 00       	jmpq   80042085bc <env_guest_alloc+0x478>
	}
	q->pp_ref += 1;
  800420826b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420826f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208273:	8d 50 01             	lea    0x1(%rax),%edx
  8004208276:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420827a:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.vmcs = page2kva(q);
  800420827e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208282:	48 89 c7             	mov    %rax,%rdi
  8004208285:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420828c:	00 00 00 
  800420828f:	ff d0                	callq  *%rax
  8004208291:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208295:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)

	// Allocate a page for msr load/store area.
	struct PageInfo *r = NULL;
  800420829c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082a3:	00 
	if (!(r = page_alloc(ALLOC_ZERO))) {
  80042082a4:	bf 01 00 00 00       	mov    $0x1,%edi
  80042082a9:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042082b0:	00 00 00 
  80042082b3:	ff d0                	callq  *%rax
  80042082b5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042082b9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042082be:	75 30                	jne    80042082f0 <env_guest_alloc+0x1ac>
		page_decref(p);
  80042082c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082c4:	48 89 c7             	mov    %rax,%rdi
  80042082c7:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042082ce:	00 00 00 
  80042082d1:	ff d0                	callq  *%rax
		page_decref(q);
  80042082d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082d7:	48 89 c7             	mov    %rax,%rdi
  80042082da:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042082e1:	00 00 00 
  80042082e4:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042082e6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082eb:	e9 cc 02 00 00       	jmpq   80042085bc <env_guest_alloc+0x478>
	}
	r->pp_ref += 1;
  80042082f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042082f4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082f8:	8d 50 01             	lea    0x1(%rax),%edx
  80042082fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042082ff:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.msr_host_area = page2kva(r);
  8004208303:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208307:	48 89 c7             	mov    %rax,%rdi
  800420830a:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208311:	00 00 00 
  8004208314:	ff d0                	callq  *%rax
  8004208316:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420831a:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
	e->env_vmxinfo.msr_guest_area = page2kva(r) + PGSIZE / 2;
  8004208321:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208325:	48 89 c7             	mov    %rax,%rdi
  8004208328:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420832f:	00 00 00 
  8004208332:	ff d0                	callq  *%rax
  8004208334:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  800420833b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420833f:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)

	// Allocate pages for IO bitmaps.
	struct PageInfo *s = NULL;
  8004208346:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800420834d:	00 
	if (!(s = page_alloc(ALLOC_ZERO))) {
  800420834e:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208353:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420835a:	00 00 00 
  800420835d:	ff d0                	callq  *%rax
  800420835f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004208363:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208368:	75 43                	jne    80042083ad <env_guest_alloc+0x269>
		page_decref(p);
  800420836a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420836e:	48 89 c7             	mov    %rax,%rdi
  8004208371:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208378:	00 00 00 
  800420837b:	ff d0                	callq  *%rax
		page_decref(q);
  800420837d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208381:	48 89 c7             	mov    %rax,%rdi
  8004208384:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420838b:	00 00 00 
  800420838e:	ff d0                	callq  *%rax
		page_decref(r);
  8004208390:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208394:	48 89 c7             	mov    %rax,%rdi
  8004208397:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420839e:	00 00 00 
  80042083a1:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042083a3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042083a8:	e9 0f 02 00 00       	jmpq   80042085bc <env_guest_alloc+0x478>
	}
	s->pp_ref += 1;
  80042083ad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083b1:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042083b5:	8d 50 01             	lea    0x1(%rax),%edx
  80042083b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083bc:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_a = page2kva(s);
  80042083c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083c4:	48 89 c7             	mov    %rax,%rdi
  80042083c7:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042083ce:	00 00 00 
  80042083d1:	ff d0                	callq  *%rax
  80042083d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042083d7:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)

	struct PageInfo *t = NULL;
  80042083de:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  80042083e5:	00 
	if (!(t = page_alloc(ALLOC_ZERO))) {
  80042083e6:	bf 01 00 00 00       	mov    $0x1,%edi
  80042083eb:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042083f2:	00 00 00 
  80042083f5:	ff d0                	callq  *%rax
  80042083f7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042083fb:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004208400:	75 56                	jne    8004208458 <env_guest_alloc+0x314>
		page_decref(p);
  8004208402:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208406:	48 89 c7             	mov    %rax,%rdi
  8004208409:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208410:	00 00 00 
  8004208413:	ff d0                	callq  *%rax
		page_decref(q);
  8004208415:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208419:	48 89 c7             	mov    %rax,%rdi
  800420841c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208423:	00 00 00 
  8004208426:	ff d0                	callq  *%rax
		page_decref(r);
  8004208428:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420842c:	48 89 c7             	mov    %rax,%rdi
  800420842f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208436:	00 00 00 
  8004208439:	ff d0                	callq  *%rax
		page_decref(s);
  800420843b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420843f:	48 89 c7             	mov    %rax,%rdi
  8004208442:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208449:	00 00 00 
  800420844c:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  800420844e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208453:	e9 64 01 00 00       	jmpq   80042085bc <env_guest_alloc+0x478>
	}
	t->pp_ref += 1;
  8004208458:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420845c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208460:	8d 50 01             	lea    0x1(%rax),%edx
  8004208463:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208467:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_b = page2kva(t);
  800420846b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420846f:	48 89 c7             	mov    %rax,%rdi
  8004208472:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208479:	00 00 00 
  800420847c:	ff d0                	callq  *%rax
  800420847e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208482:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  8004208489:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420848d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208493:	05 00 10 00 00       	add    $0x1000,%eax
  8004208498:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  800420849d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042084a0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084a4:	7f 07                	jg     80042084ad <env_guest_alloc+0x369>
		generation = 1 << ENVGENSHIFT;
  80042084a6:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042084ad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084b1:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  80042084b8:	00 00 00 
  80042084bb:	48 8b 00             	mov    (%rax),%rax
  80042084be:	48 29 c2             	sub    %rax,%rdx
  80042084c1:	48 89 d0             	mov    %rdx,%rax
  80042084c4:	48 c1 f8 03          	sar    $0x3,%rax
  80042084c8:	48 89 c2             	mov    %rax,%rdx
  80042084cb:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042084d2:	fa a4 4f 
  80042084d5:	48 0f af c2          	imul   %rdx,%rax
  80042084d9:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042084dc:	89 c2                	mov    %eax,%edx
  80042084de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084e2:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  80042084e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084ec:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  80042084ef:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_GUEST;
  80042084f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084f9:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  8004208500:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208503:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208507:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420850e:	00 00 00 

	e->env_vmxinfo.vcpunum = vcpu_count++;
  8004208511:	48 b8 50 b2 4d 04 80 	movabs $0x80044db250,%rax
  8004208518:	00 00 00 
  800420851b:	8b 00                	mov    (%rax),%eax
  800420851d:	8d 48 01             	lea    0x1(%rax),%ecx
  8004208520:	48 ba 50 b2 4d 04 80 	movabs $0x80044db250,%rdx
  8004208527:	00 00 00 
  800420852a:	89 0a                	mov    %ecx,(%rdx)
  800420852c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208530:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
    	cprintf("VCPUNUM allocated: %d\n", e->env_vmxinfo.vcpunum);
  8004208536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420853a:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  8004208540:	89 c6                	mov    %eax,%esi
  8004208542:	48 bf 8b e0 21 04 80 	movabs $0x800421e08b,%rdi
  8004208549:	00 00 00 
  800420854c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208551:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004208558:	00 00 00 
  800420855b:	ff d2                	callq  *%rdx

	memset(&e->env_tf, 0, sizeof(e->env_tf));
  800420855d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208561:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208566:	be 00 00 00 00       	mov    $0x0,%esi
  800420856b:	48 89 c7             	mov    %rax,%rdi
  800420856e:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004208575:	00 00 00 
  8004208578:	ff d0                	callq  *%rax

	e->env_pgfault_upcall = 0;
  800420857a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420857e:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208585:	00 00 00 00 
	e->env_ipc_recving = 0;
  8004208589:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420858d:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208598:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  800420859f:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  80042085a6:	00 00 00 
  80042085a9:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  80042085ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042085b0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042085b4:	48 89 10             	mov    %rdx,(%rax)

	return 0;
  80042085b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042085bc:	c9                   	leaveq 
  80042085bd:	c3                   	retq   

00000080042085be <env_guest_free>:

void env_guest_free(struct Env *e) {
  80042085be:	55                   	push   %rbp
  80042085bf:	48 89 e5             	mov    %rsp,%rbp
  80042085c2:	53                   	push   %rbx
  80042085c3:	48 83 ec 38          	sub    $0x38,%rsp
  80042085c7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	// Free the VMCS.
	page_decref(pa2page(PADDR(e->env_vmxinfo.vmcs)));
  80042085cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042085cf:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  80042085d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042085da:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042085e1:	00 00 00 
  80042085e4:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  80042085e8:	77 32                	ja     800420861c <env_guest_free+0x5e>
  80042085ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042085ee:	48 89 c1             	mov    %rax,%rcx
  80042085f1:	48 ba a8 e0 21 04 80 	movabs $0x800421e0a8,%rdx
  80042085f8:	00 00 00 
  80042085fb:	be 3b 01 00 00       	mov    $0x13b,%esi
  8004208600:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208607:	00 00 00 
  800420860a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420860f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208616:	00 00 00 
  8004208619:	41 ff d0             	callq  *%r8
  800420861c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208623:	ff ff ff 
  8004208626:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420862a:	48 01 d0             	add    %rdx,%rax
  800420862d:	48 89 c7             	mov    %rax,%rdi
  8004208630:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208637:	00 00 00 
  800420863a:	ff d0                	callq  *%rax
  800420863c:	48 89 c7             	mov    %rax,%rdi
  800420863f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208646:	00 00 00 
  8004208649:	ff d0                	callq  *%rax
	// Free msr load/store area.
	page_decref(pa2page(PADDR(e->env_vmxinfo.msr_host_area)));
  800420864b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420864f:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  8004208656:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420865a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208661:	00 00 00 
  8004208664:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004208668:	77 32                	ja     800420869c <env_guest_free+0xde>
  800420866a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420866e:	48 89 c1             	mov    %rax,%rcx
  8004208671:	48 ba a8 e0 21 04 80 	movabs $0x800421e0a8,%rdx
  8004208678:	00 00 00 
  800420867b:	be 3d 01 00 00       	mov    $0x13d,%esi
  8004208680:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208687:	00 00 00 
  800420868a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420868f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208696:	00 00 00 
  8004208699:	41 ff d0             	callq  *%r8
  800420869c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086a3:	ff ff ff 
  80042086a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086aa:	48 01 d0             	add    %rdx,%rax
  80042086ad:	48 89 c7             	mov    %rax,%rdi
  80042086b0:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042086b7:	00 00 00 
  80042086ba:	ff d0                	callq  *%rax
  80042086bc:	48 89 c7             	mov    %rax,%rdi
  80042086bf:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042086c6:	00 00 00 
  80042086c9:	ff d0                	callq  *%rax
	// Free IO bitmaps page.
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_a)));
  80042086cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042086cf:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  80042086d6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042086da:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086e1:	00 00 00 
  80042086e4:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  80042086e8:	77 32                	ja     800420871c <env_guest_free+0x15e>
  80042086ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042086ee:	48 89 c1             	mov    %rax,%rcx
  80042086f1:	48 ba a8 e0 21 04 80 	movabs $0x800421e0a8,%rdx
  80042086f8:	00 00 00 
  80042086fb:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004208700:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208707:	00 00 00 
  800420870a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420870f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208716:	00 00 00 
  8004208719:	41 ff d0             	callq  *%r8
  800420871c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208723:	ff ff ff 
  8004208726:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420872a:	48 01 d0             	add    %rdx,%rax
  800420872d:	48 89 c7             	mov    %rax,%rdi
  8004208730:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208737:	00 00 00 
  800420873a:	ff d0                	callq  *%rax
  800420873c:	48 89 c7             	mov    %rax,%rdi
  800420873f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208746:	00 00 00 
  8004208749:	ff d0                	callq  *%rax
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_b)));
  800420874b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420874f:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  8004208756:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420875a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208761:	00 00 00 
  8004208764:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004208768:	77 32                	ja     800420879c <env_guest_free+0x1de>
  800420876a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420876e:	48 89 c1             	mov    %rax,%rcx
  8004208771:	48 ba a8 e0 21 04 80 	movabs $0x800421e0a8,%rdx
  8004208778:	00 00 00 
  800420877b:	be 40 01 00 00       	mov    $0x140,%esi
  8004208780:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208787:	00 00 00 
  800420878a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420878f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208796:	00 00 00 
  8004208799:	41 ff d0             	callq  *%r8
  800420879c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087a3:	ff ff ff 
  80042087a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087aa:	48 01 d0             	add    %rdx,%rax
  80042087ad:	48 89 c7             	mov    %rax,%rdi
  80042087b0:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042087b7:	00 00 00 
  80042087ba:	ff d0                	callq  *%rax
  80042087bc:	48 89 c7             	mov    %rax,%rdi
  80042087bf:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042087c6:	00 00 00 
  80042087c9:	ff d0                	callq  *%rax

	// Free the host pages that were allocated for the guest and
	// the EPT tables itself.
	free_guest_mem(e->env_pml4e);
  80042087cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042087cf:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042087d6:	48 89 c7             	mov    %rax,%rdi
  80042087d9:	48 b8 4e 96 21 04 80 	movabs $0x800421964e,%rax
  80042087e0:	00 00 00 
  80042087e3:	ff d0                	callq  *%rax

	// Free the EPT PML4 page.
	page_decref(pa2page(e->env_cr3));
  80042087e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042087e9:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042087f0:	48 89 c7             	mov    %rax,%rdi
  80042087f3:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042087fa:	00 00 00 
  80042087fd:	ff d0                	callq  *%rax
  80042087ff:	48 89 c7             	mov    %rax,%rdi
  8004208802:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208809:	00 00 00 
  800420880c:	ff d0                	callq  *%rax
	e->env_pml4e = 0;
  800420880e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208812:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208819:	00 00 00 00 
	e->env_cr3 = 0;
  800420881d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208821:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208828:	00 00 00 00 

	// return the environment to the free list
	e->env_status = ENV_FREE;
  800420882c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208830:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208837:	00 00 00 
	e->env_link = env_free_list;
  800420883a:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  8004208841:	00 00 00 
  8004208844:	48 8b 10             	mov    (%rax),%rdx
  8004208847:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420884b:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004208852:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  8004208859:	00 00 00 
  800420885c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004208860:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] free vmx guest env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  8004208863:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208867:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  800420886d:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004208874:	00 00 00 
  8004208877:	ff d0                	callq  *%rax
  8004208879:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004208880:	00 00 00 
  8004208883:	48 98                	cltq   
  8004208885:	48 c1 e0 03          	shl    $0x3,%rax
  8004208889:	48 89 c1             	mov    %rax,%rcx
  800420888c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208890:	48 01 c8             	add    %rcx,%rax
  8004208893:	48 01 d0             	add    %rdx,%rax
  8004208896:	48 83 c0 08          	add    $0x8,%rax
  800420889a:	48 8b 00             	mov    (%rax),%rax
  800420889d:	48 85 c0             	test   %rax,%rax
  80042088a0:	74 38                	je     80042088da <env_guest_free+0x31c>
  80042088a2:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042088a9:	00 00 00 
  80042088ac:	ff d0                	callq  *%rax
  80042088ae:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042088b5:	00 00 00 
  80042088b8:	48 98                	cltq   
  80042088ba:	48 c1 e0 03          	shl    $0x3,%rax
  80042088be:	48 89 c1             	mov    %rax,%rcx
  80042088c1:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088c5:	48 01 c8             	add    %rcx,%rax
  80042088c8:	48 01 d0             	add    %rdx,%rax
  80042088cb:	48 83 c0 08          	add    $0x8,%rax
  80042088cf:	48 8b 00             	mov    (%rax),%rax
  80042088d2:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042088d8:	eb 05                	jmp    80042088df <env_guest_free+0x321>
  80042088da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042088df:	89 da                	mov    %ebx,%edx
  80042088e1:	89 c6                	mov    %eax,%esi
  80042088e3:	48 bf d8 e0 21 04 80 	movabs $0x800421e0d8,%rdi
  80042088ea:	00 00 00 
  80042088ed:	b8 00 00 00 00       	mov    $0x0,%eax
  80042088f2:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  80042088f9:	00 00 00 
  80042088fc:	ff d1                	callq  *%rcx
}
  80042088fe:	48 83 c4 38          	add    $0x38,%rsp
  8004208902:	5b                   	pop    %rbx
  8004208903:	5d                   	pop    %rbp
  8004208904:	c3                   	retq   

0000008004208905 <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208905:	55                   	push   %rbp
  8004208906:	48 89 e5             	mov    %rsp,%rbp
  8004208909:	48 83 ec 30          	sub    $0x30,%rsp
  800420890d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208911:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004208914:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  800420891b:	00 00 00 
  800420891e:	48 8b 00             	mov    (%rax),%rax
  8004208921:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208925:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420892a:	75 0a                	jne    8004208936 <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  800420892c:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004208931:	e9 5b 01 00 00       	jmpq   8004208a91 <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004208936:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420893a:	48 89 c7             	mov    %rax,%rdi
  800420893d:	48 b8 4c 80 20 04 80 	movabs $0x800420804c,%rax
  8004208944:	00 00 00 
  8004208947:	ff d0                	callq  *%rax
  8004208949:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420894c:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208950:	79 08                	jns    800420895a <env_alloc+0x55>
		return r;
  8004208952:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208955:	e9 37 01 00 00       	jmpq   8004208a91 <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  800420895a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420895e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208964:	05 00 10 00 00       	add    $0x1000,%eax
  8004208969:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  800420896e:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  8004208971:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208975:	7f 07                	jg     800420897e <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  8004208977:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  800420897e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208982:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004208989:	00 00 00 
  800420898c:	48 8b 00             	mov    (%rax),%rax
  800420898f:	48 29 c2             	sub    %rax,%rdx
  8004208992:	48 89 d0             	mov    %rdx,%rax
  8004208995:	48 c1 f8 03          	sar    $0x3,%rax
  8004208999:	48 89 c2             	mov    %rax,%rdx
  800420899c:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089a3:	fa a4 4f 
  80042089a6:	48 0f af c2          	imul   %rdx,%rax
  80042089aa:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042089ad:	89 c2                	mov    %eax,%edx
  80042089af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089b3:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  80042089b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089bd:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042089c0:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  80042089c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089ca:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  80042089d1:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  80042089d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089d8:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042089df:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042089e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089e6:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042089eb:	be 00 00 00 00       	mov    $0x0,%esi
  80042089f0:	48 89 c7             	mov    %rax,%rdi
  80042089f3:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  80042089fa:	00 00 00 
  80042089fd:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  80042089ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a03:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a0a:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208a0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a10:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208a16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a1a:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a21:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208a23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a27:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a2c:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208a33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a37:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208a3e:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208a40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a44:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208a4b:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a53:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208a5a:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208a5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a62:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208a69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a6d:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208a74:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  8004208a7b:	00 00 00 
  8004208a7e:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208a81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208a85:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208a89:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208a8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208a91:	c9                   	leaveq 
  8004208a92:	c3                   	retq   

0000008004208a93 <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208a93:	55                   	push   %rbp
  8004208a94:	48 89 e5             	mov    %rsp,%rbp
  8004208a97:	48 83 ec 40          	sub    $0x40,%rsp
  8004208a9b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208a9f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208aa3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208aa7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208aab:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208aaf:	48 01 d0             	add    %rdx,%rax
  8004208ab2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208ab6:	e9 c8 00 00 00       	jmpq   8004208b83 <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  8004208abb:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208ac0:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004208ac7:	00 00 00 
  8004208aca:	ff d0                	callq  *%rax
  8004208acc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208ad0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208ad5:	75 30                	jne    8004208b07 <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  8004208ad7:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208adc:	48 ba f8 e0 21 04 80 	movabs $0x800421e0f8,%rdx
  8004208ae3:	00 00 00 
  8004208ae6:	be ad 01 00 00       	mov    $0x1ad,%esi
  8004208aeb:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208af2:	00 00 00 
  8004208af5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208afa:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208b01:	00 00 00 
  8004208b04:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  8004208b07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b0b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b12:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b16:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b1a:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b1f:	48 89 c7             	mov    %rax,%rdi
  8004208b22:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004208b29:	00 00 00 
  8004208b2c:	ff d0                	callq  *%rax
  8004208b2e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b31:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b35:	79 30                	jns    8004208b67 <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208b37:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208b3a:	89 c1                	mov    %eax,%ecx
  8004208b3c:	48 ba 20 e1 21 04 80 	movabs $0x800421e120,%rdx
  8004208b43:	00 00 00 
  8004208b46:	be b1 01 00 00       	mov    $0x1b1,%esi
  8004208b4b:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208b52:	00 00 00 
  8004208b55:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b5a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208b61:	00 00 00 
  8004208b64:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208b67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b6b:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208b71:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208b75:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208b79:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208b7f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208b83:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208b87:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208b8b:	0f 82 2a ff ff ff    	jb     8004208abb <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208b91:	c9                   	leaveq 
  8004208b92:	c3                   	retq   

0000008004208b93 <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208b93:	55                   	push   %rbp
  8004208b94:	48 89 e5             	mov    %rsp,%rbp
  8004208b97:	53                   	push   %rbx
  8004208b98:	48 83 ec 78          	sub    $0x78,%rsp
  8004208b9c:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208ba0:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208ba4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208ba8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208bac:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208bb1:	0f 84 6f 03 00 00    	je     8004208f26 <load_icode+0x393>
  8004208bb7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bbb:	8b 00                	mov    (%rax),%eax
  8004208bbd:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208bc2:	0f 85 5e 03 00 00    	jne    8004208f26 <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208bc8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208bcc:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208bd3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208bd7:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208bde:	00 00 00 
  8004208be1:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208be5:	77 32                	ja     8004208c19 <load_icode+0x86>
  8004208be7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208beb:	48 89 c1             	mov    %rax,%rcx
  8004208bee:	48 ba a8 e0 21 04 80 	movabs $0x800421e0a8,%rdx
  8004208bf5:	00 00 00 
  8004208bf8:	be d3 01 00 00       	mov    $0x1d3,%esi
  8004208bfd:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208c04:	00 00 00 
  8004208c07:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c0c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208c13:	00 00 00 
  8004208c16:	41 ff d0             	callq  *%r8
  8004208c19:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c20:	ff ff ff 
  8004208c23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c27:	48 01 d0             	add    %rdx,%rax
  8004208c2a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c2e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c32:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208c35:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c39:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208c3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c41:	48 01 d0             	add    %rdx,%rax
  8004208c44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208c48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c4c:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208c50:	0f b7 c0             	movzwl %ax,%eax
  8004208c53:	48 c1 e0 03          	shl    $0x3,%rax
  8004208c57:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208c5e:	00 
  8004208c5f:	48 29 c2             	sub    %rax,%rdx
  8004208c62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208c66:	48 01 d0             	add    %rdx,%rax
  8004208c69:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  8004208c6d:	e9 bd 00 00 00       	jmpq   8004208d2f <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208c72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208c76:	8b 00                	mov    (%rax),%eax
  8004208c78:	83 f8 01             	cmp    $0x1,%eax
  8004208c7b:	0f 85 a9 00 00 00    	jne    8004208d2a <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208c81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208c85:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208c89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208c8d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208c91:	48 89 c1             	mov    %rax,%rcx
  8004208c94:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c98:	48 89 ce             	mov    %rcx,%rsi
  8004208c9b:	48 89 c7             	mov    %rax,%rdi
  8004208c9e:	48 b8 93 8a 20 04 80 	movabs $0x8004208a93,%rax
  8004208ca5:	00 00 00 
  8004208ca8:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  8004208caa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cae:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208cb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cb6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208cba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208cbe:	48 01 c1             	add    %rax,%rcx
  8004208cc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cc5:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208cc9:	48 89 ce             	mov    %rcx,%rsi
  8004208ccc:	48 89 c7             	mov    %rax,%rdi
  8004208ccf:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  8004208cd6:	00 00 00 
  8004208cd9:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  8004208cdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cdf:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ce3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ce7:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208ceb:	48 39 c2             	cmp    %rax,%rdx
  8004208cee:	73 3a                	jae    8004208d2a <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208cf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cf4:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208cf8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cfc:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d00:	48 29 c2             	sub    %rax,%rdx
  8004208d03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d07:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d0f:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d13:	48 01 c8             	add    %rcx,%rax
  8004208d16:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d1b:	48 89 c7             	mov    %rax,%rdi
  8004208d1e:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004208d25:	00 00 00 
  8004208d28:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208d2a:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d33:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d37:	0f 82 35 ff ff ff    	jb     8004208c72 <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208d3d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d41:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208d46:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208d4b:	48 89 c7             	mov    %rax,%rdi
  8004208d4e:	48 b8 93 8a 20 04 80 	movabs $0x8004208a93,%rax
  8004208d55:	00 00 00 
  8004208d58:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208d5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d5e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208d62:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d66:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208d6d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d71:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208d76:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208d7d:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208d84:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208d85:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d89:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d91:	48 01 d0             	add    %rdx,%rax
  8004208d94:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208d98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d9c:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208da0:	0f b7 c0             	movzwl %ax,%eax
  8004208da3:	48 c1 e0 06          	shl    $0x6,%rax
  8004208da7:	48 89 c2             	mov    %rax,%rdx
  8004208daa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208dae:	48 01 d0             	add    %rdx,%rax
  8004208db1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208db5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208db9:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208dbd:	0f b7 c0             	movzwl %ax,%eax
  8004208dc0:	48 c1 e0 06          	shl    $0x6,%rax
  8004208dc4:	48 89 c2             	mov    %rax,%rdx
  8004208dc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208dcb:	48 01 d0             	add    %rdx,%rax
  8004208dce:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208dd2:	e9 27 01 00 00       	jmpq   8004208efe <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004208dd7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208ddb:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208ddf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208de3:	8b 00                	mov    (%rax),%eax
  8004208de5:	89 c0                	mov    %eax,%eax
  8004208de7:	48 01 c2             	add    %rax,%rdx
  8004208dea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208dee:	48 01 d0             	add    %rdx,%rax
  8004208df1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208df5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208df9:	48 be 48 e1 21 04 80 	movabs $0x800421e148,%rsi
  8004208e00:	00 00 00 
  8004208e03:	48 89 c7             	mov    %rax,%rdi
  8004208e06:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004208e0d:	00 00 00 
  8004208e10:	ff d0                	callq  *%rax
  8004208e12:	85 c0                	test   %eax,%eax
  8004208e14:	0f 84 84 00 00 00    	je     8004208e9e <load_icode+0x30b>
  8004208e1a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e1e:	48 be 54 e1 21 04 80 	movabs $0x800421e154,%rsi
  8004208e25:	00 00 00 
  8004208e28:	48 89 c7             	mov    %rax,%rdi
  8004208e2b:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004208e32:	00 00 00 
  8004208e35:	ff d0                	callq  *%rax
  8004208e37:	85 c0                	test   %eax,%eax
  8004208e39:	74 63                	je     8004208e9e <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208e3b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e3f:	48 be 62 e1 21 04 80 	movabs $0x800421e162,%rsi
  8004208e46:	00 00 00 
  8004208e49:	48 89 c7             	mov    %rax,%rdi
  8004208e4c:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004208e53:	00 00 00 
  8004208e56:	ff d0                	callq  *%rax
  8004208e58:	85 c0                	test   %eax,%eax
  8004208e5a:	74 42                	je     8004208e9e <load_icode+0x30b>
  8004208e5c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e60:	48 be 6e e1 21 04 80 	movabs $0x800421e16e,%rsi
  8004208e67:	00 00 00 
  8004208e6a:	48 89 c7             	mov    %rax,%rdi
  8004208e6d:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004208e74:	00 00 00 
  8004208e77:	ff d0                	callq  *%rax
  8004208e79:	85 c0                	test   %eax,%eax
  8004208e7b:	74 21                	je     8004208e9e <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208e7d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e81:	48 be 78 e1 21 04 80 	movabs $0x800421e178,%rsi
  8004208e88:	00 00 00 
  8004208e8b:	48 89 c7             	mov    %rax,%rdi
  8004208e8e:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004208e95:	00 00 00 
  8004208e98:	ff d0                	callq  *%rax
  8004208e9a:	85 c0                	test   %eax,%eax
  8004208e9c:	75 5b                	jne    8004208ef9 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208e9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ea2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ea6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208eaa:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208eae:	48 89 ce             	mov    %rcx,%rsi
  8004208eb1:	48 89 c7             	mov    %rax,%rdi
  8004208eb4:	48 b8 93 8a 20 04 80 	movabs $0x8004208a93,%rax
  8004208ebb:	00 00 00 
  8004208ebe:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208ec0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ec4:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ec8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ecc:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208ed0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ed4:	48 01 c1             	add    %rax,%rcx
  8004208ed7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208edb:	48 89 ce             	mov    %rcx,%rsi
  8004208ede:	48 89 c7             	mov    %rax,%rdi
  8004208ee1:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  8004208ee8:	00 00 00 
  8004208eeb:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208eed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ef1:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208ef5:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208ef9:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208efe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f02:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f06:	0f 82 cb fe ff ff    	jb     8004208dd7 <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208f0c:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  8004208f13:	00 00 00 
  8004208f16:	48 8b 00             	mov    (%rax),%rax
  8004208f19:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f1d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f21:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208f24:	eb 2a                	jmp    8004208f50 <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208f26:	48 ba 83 e1 21 04 80 	movabs $0x800421e183,%rdx
  8004208f2d:	00 00 00 
  8004208f30:	be f4 01 00 00       	mov    $0x1f4,%esi
  8004208f35:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208f3c:	00 00 00 
  8004208f3f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f44:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004208f4b:	00 00 00 
  8004208f4e:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208f50:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208f54:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208f58:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208f5f:	48 83 c4 78          	add    $0x78,%rsp
  8004208f63:	5b                   	pop    %rbx
  8004208f64:	5d                   	pop    %rbp
  8004208f65:	c3                   	retq   

0000008004208f66 <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208f66:	55                   	push   %rbp
  8004208f67:	48 89 e5             	mov    %rsp,%rbp
  8004208f6a:	48 83 ec 20          	sub    $0x20,%rsp
  8004208f6e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208f72:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208f75:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208f79:	be 00 00 00 00       	mov    $0x0,%esi
  8004208f7e:	48 89 c7             	mov    %rax,%rdi
  8004208f81:	48 b8 05 89 20 04 80 	movabs $0x8004208905,%rax
  8004208f88:	00 00 00 
  8004208f8b:	ff d0                	callq  *%rax
  8004208f8d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208f90:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208f94:	79 30                	jns    8004208fc6 <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208f96:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208f99:	89 c1                	mov    %eax,%ecx
  8004208f9b:	48 ba 98 e1 21 04 80 	movabs $0x800421e198,%rdx
  8004208fa2:	00 00 00 
  8004208fa5:	be 08 02 00 00       	mov    $0x208,%esi
  8004208faa:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004208fb1:	00 00 00 
  8004208fb4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208fb9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208fc0:	00 00 00 
  8004208fc3:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  8004208fc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208fca:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208fce:	48 89 d6             	mov    %rdx,%rsi
  8004208fd1:	48 89 c7             	mov    %rax,%rdi
  8004208fd4:	48 b8 93 8b 20 04 80 	movabs $0x8004208b93,%rax
  8004208fdb:	00 00 00 
  8004208fde:	ff d0                	callq  *%rax
	e->env_type = type;
  8004208fe0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208fe4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004208fe7:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004208fed:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004208ff1:	75 19                	jne    800420900c <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  8004208ff3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ff7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208ffb:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  8004209002:	80 ce 30             	or     $0x30,%dh
  8004209005:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  800420900c:	c9                   	leaveq 
  800420900d:	c3                   	retq   

000000800420900e <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  800420900e:	55                   	push   %rbp
  800420900f:	48 89 e5             	mov    %rsp,%rbp
  8004209012:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209019:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	pte_t *pt;
	uint64_t pdeno, pteno;
	physaddr_t pa;

#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  8004209020:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209027:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420902d:	83 f8 03             	cmp    $0x3,%eax
  8004209030:	75 1b                	jne    800420904d <env_free+0x3f>
		env_guest_free(e);
  8004209032:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209039:	48 89 c7             	mov    %rax,%rdi
  800420903c:	48 b8 be 85 20 04 80 	movabs $0x80042085be,%rax
  8004209043:	00 00 00 
  8004209046:	ff d0                	callq  *%rax
		return;
  8004209048:	e9 78 04 00 00       	jmpq   80042094c5 <env_free+0x4b7>
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  800420904d:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004209054:	00 00 00 
  8004209057:	ff d0                	callq  *%rax
  8004209059:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209060:	00 00 00 
  8004209063:	48 98                	cltq   
  8004209065:	48 c1 e0 03          	shl    $0x3,%rax
  8004209069:	48 89 c1             	mov    %rax,%rcx
  800420906c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209070:	48 01 c8             	add    %rcx,%rax
  8004209073:	48 01 d0             	add    %rdx,%rax
  8004209076:	48 83 c0 08          	add    $0x8,%rax
  800420907a:	48 8b 00             	mov    (%rax),%rax
  800420907d:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  8004209084:	75 18                	jne    800420909e <env_free+0x90>
		lcr3(boot_cr3);
  8004209086:	48 b8 e8 a5 6d 04 80 	movabs $0x80046da5e8,%rax
  800420908d:	00 00 00 
  8004209090:	48 8b 00             	mov    (%rax),%rax
  8004209093:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004209097:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420909b:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  800420909e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090a5:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042090ac:	48 8b 00             	mov    (%rax),%rax
  80042090af:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042090b5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042090b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042090bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042090c1:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042090c4:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042090c7:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042090ce:	00 00 00 
  80042090d1:	48 8b 00             	mov    (%rax),%rax
  80042090d4:	48 39 c2             	cmp    %rax,%rdx
  80042090d7:	72 32                	jb     800420910b <env_free+0xfd>
  80042090d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042090dd:	48 89 c1             	mov    %rax,%rcx
  80042090e0:	48 ba 68 e0 21 04 80 	movabs $0x800421e068,%rdx
  80042090e7:	00 00 00 
  80042090ea:	be 2d 02 00 00       	mov    $0x22d,%esi
  80042090ef:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  80042090f6:	00 00 00 
  80042090f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042090fe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209105:	00 00 00 
  8004209108:	41 ff d0             	callq  *%r8
  800420910b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209112:	00 00 00 
  8004209115:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209119:	48 01 d0             	add    %rdx,%rax
  800420911c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004209120:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004209127:	00 
  8004209128:	e9 ab 02 00 00       	jmpq   80042093d8 <env_free+0x3ca>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  800420912d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209131:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209138:	00 
  8004209139:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420913d:	48 01 d0             	add    %rdx,%rax
  8004209140:	48 8b 00             	mov    (%rax),%rax
  8004209143:	83 e0 01             	and    $0x1,%eax
  8004209146:	48 85 c0             	test   %rax,%rax
  8004209149:	75 05                	jne    8004209150 <env_free+0x142>
			continue;
  800420914b:	e9 83 02 00 00       	jmpq   80042093d3 <env_free+0x3c5>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  8004209150:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209154:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420915b:	00 
  800420915c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209160:	48 01 d0             	add    %rdx,%rax
  8004209163:	48 8b 00             	mov    (%rax),%rax
  8004209166:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420916c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004209170:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004209174:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209178:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420917b:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420917e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004209185:	00 00 00 
  8004209188:	48 8b 00             	mov    (%rax),%rax
  800420918b:	48 39 c2             	cmp    %rax,%rdx
  800420918e:	72 32                	jb     80042091c2 <env_free+0x1b4>
  8004209190:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004209194:	48 89 c1             	mov    %rax,%rcx
  8004209197:	48 ba 68 e0 21 04 80 	movabs $0x800421e068,%rdx
  800420919e:	00 00 00 
  80042091a1:	be 35 02 00 00       	mov    $0x235,%esi
  80042091a6:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  80042091ad:	00 00 00 
  80042091b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042091b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042091bc:	00 00 00 
  80042091bf:	41 ff d0             	callq  *%r8
  80042091c2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042091c9:	00 00 00 
  80042091cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091d0:	48 01 d0             	add    %rdx,%rax
  80042091d3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  80042091d7:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  80042091dc:	75 07                	jne    80042091e5 <env_free+0x1d7>
  80042091de:	b8 04 00 00 00       	mov    $0x4,%eax
  80042091e3:	eb 05                	jmp    80042091ea <env_free+0x1dc>
  80042091e5:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  80042091ea:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042091ed:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042091f4:	00 
  80042091f5:	e9 6e 01 00 00       	jmpq   8004209368 <env_free+0x35a>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  80042091fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042091fe:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209205:	00 
  8004209206:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420920a:	48 01 d0             	add    %rdx,%rax
  800420920d:	48 8b 00             	mov    (%rax),%rax
  8004209210:	83 e0 01             	and    $0x1,%eax
  8004209213:	48 85 c0             	test   %rax,%rax
  8004209216:	75 05                	jne    800420921d <env_free+0x20f>
				continue;
  8004209218:	e9 46 01 00 00       	jmpq   8004209363 <env_free+0x355>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  800420921d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209221:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209228:	00 
  8004209229:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420922d:	48 01 d0             	add    %rdx,%rax
  8004209230:	48 8b 00             	mov    (%rax),%rax
  8004209233:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209239:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  800420923d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209241:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004209245:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004209249:	48 c1 e8 0c          	shr    $0xc,%rax
  800420924d:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004209250:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209253:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800420925a:	00 00 00 
  800420925d:	48 8b 00             	mov    (%rax),%rax
  8004209260:	48 39 c2             	cmp    %rax,%rdx
  8004209263:	72 32                	jb     8004209297 <env_free+0x289>
  8004209265:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004209269:	48 89 c1             	mov    %rax,%rcx
  800420926c:	48 ba 68 e0 21 04 80 	movabs $0x800421e068,%rdx
  8004209273:	00 00 00 
  8004209276:	be 3f 02 00 00       	mov    $0x23f,%esi
  800420927b:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004209282:	00 00 00 
  8004209285:	b8 00 00 00 00       	mov    $0x0,%eax
  800420928a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209291:	00 00 00 
  8004209294:	41 ff d0             	callq  *%r8
  8004209297:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420929e:	00 00 00 
  80042092a1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092a5:	48 01 d0             	add    %rdx,%rax
  80042092a8:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  80042092ac:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042092b3:	00 
  80042092b4:	eb 67                	jmp    800420931d <env_free+0x30f>
				if (pt[pteno] & PTE_P){
  80042092b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042092ba:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042092c1:	00 
  80042092c2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042092c6:	48 01 d0             	add    %rdx,%rax
  80042092c9:	48 8b 00             	mov    (%rax),%rax
  80042092cc:	83 e0 01             	and    $0x1,%eax
  80042092cf:	48 85 c0             	test   %rax,%rax
  80042092d2:	74 44                	je     8004209318 <env_free+0x30a>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  80042092d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042092d8:	48 c1 e0 1e          	shl    $0x1e,%rax
  80042092dc:	48 89 c2             	mov    %rax,%rdx
  80042092df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042092e3:	48 c1 e0 15          	shl    $0x15,%rax
  80042092e7:	48 09 c2             	or     %rax,%rdx
  80042092ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042092ee:	48 c1 e0 0c          	shl    $0xc,%rax
  80042092f2:	48 09 d0             	or     %rdx,%rax
  80042092f5:	48 89 c2             	mov    %rax,%rdx
  80042092f8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042092ff:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209306:	48 89 d6             	mov    %rdx,%rsi
  8004209309:	48 89 c7             	mov    %rax,%rdi
  800420930c:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004209313:	00 00 00 
  8004209316:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209318:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  800420931d:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004209324:	00 
  8004209325:	76 8f                	jbe    80042092b6 <env_free+0x2a8>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004209327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420932b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209332:	00 
  8004209333:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209337:	48 01 d0             	add    %rdx,%rax
  800420933a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004209341:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209345:	48 89 c7             	mov    %rax,%rdi
  8004209348:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420934f:	00 00 00 
  8004209352:	ff d0                	callq  *%rax
  8004209354:	48 89 c7             	mov    %rax,%rdi
  8004209357:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420935e:	00 00 00 
  8004209361:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004209363:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004209368:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800420936b:	48 98                	cltq   
  800420936d:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004209371:	0f 87 83 fe ff ff    	ja     80042091fa <env_free+0x1ec>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  8004209377:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420937b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209382:	00 
  8004209383:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209387:	48 01 d0             	add    %rdx,%rax
  800420938a:	48 8b 00             	mov    (%rax),%rax
  800420938d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209393:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  8004209397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420939b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093a2:	00 
  80042093a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093a7:	48 01 d0             	add    %rdx,%rax
  80042093aa:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  80042093b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042093b5:	48 89 c7             	mov    %rax,%rdi
  80042093b8:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042093bf:	00 00 00 
  80042093c2:	ff d0                	callq  *%rax
  80042093c4:	48 89 c7             	mov    %rax,%rdi
  80042093c7:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042093ce:	00 00 00 
  80042093d1:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  80042093d3:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042093d8:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  80042093dd:	0f 86 4a fd ff ff    	jbe    800420912d <env_free+0x11f>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  80042093e3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042093ea:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042093f1:	48 8b 00             	mov    (%rax),%rax
  80042093f4:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093fa:	48 89 c7             	mov    %rax,%rdi
  80042093fd:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004209404:	00 00 00 
  8004209407:	ff d0                	callq  *%rax
  8004209409:	48 89 c7             	mov    %rax,%rdi
  800420940c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004209413:	00 00 00 
  8004209416:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004209418:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420941f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209426:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  800420942d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209434:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420943b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  800420943f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209446:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  800420944d:	00 00 00 00 
	e->env_cr3 = 0;
  8004209451:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209458:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  800420945f:	00 00 00 00 
	page_decref(pa2page(pa));
  8004209463:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209467:	48 89 c7             	mov    %rax,%rdi
  800420946a:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004209471:	00 00 00 
  8004209474:	ff d0                	callq  *%rax
  8004209476:	48 89 c7             	mov    %rax,%rdi
  8004209479:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004209480:	00 00 00 
  8004209483:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004209485:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420948c:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004209493:	00 00 00 
	e->env_link = env_free_list;
  8004209496:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  800420949d:	00 00 00 
  80042094a0:	48 8b 10             	mov    (%rax),%rdx
  80042094a3:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094aa:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  80042094b1:	48 b8 60 b2 4d 04 80 	movabs $0x80044db260,%rax
  80042094b8:	00 00 00 
  80042094bb:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042094c2:	48 89 10             	mov    %rdx,(%rax)
}
  80042094c5:	c9                   	leaveq 
  80042094c6:	c3                   	retq   

00000080042094c7 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  80042094c7:	55                   	push   %rbp
  80042094c8:	48 89 e5             	mov    %rsp,%rbp
  80042094cb:	48 83 ec 10          	sub    $0x10,%rsp
  80042094cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  80042094d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042094d7:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042094dd:	83 f8 03             	cmp    $0x3,%eax
  80042094e0:	75 49                	jne    800420952b <env_destroy+0x64>
  80042094e2:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042094e9:	00 00 00 
  80042094ec:	ff d0                	callq  *%rax
  80042094ee:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042094f5:	00 00 00 
  80042094f8:	48 98                	cltq   
  80042094fa:	48 c1 e0 03          	shl    $0x3,%rax
  80042094fe:	48 89 c1             	mov    %rax,%rcx
  8004209501:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209505:	48 01 c8             	add    %rcx,%rax
  8004209508:	48 01 d0             	add    %rdx,%rax
  800420950b:	48 83 c0 08          	add    $0x8,%rax
  800420950f:	48 8b 00             	mov    (%rax),%rax
  8004209512:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004209516:	74 13                	je     800420952b <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004209518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420951c:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  8004209523:	00 00 00 
		return;
  8004209526:	e9 89 00 00 00       	jmpq   80042095b4 <env_destroy+0xed>
	}

	env_free(e);
  800420952b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420952f:	48 89 c7             	mov    %rax,%rdi
  8004209532:	48 b8 0e 90 20 04 80 	movabs $0x800420900e,%rax
  8004209539:	00 00 00 
  800420953c:	ff d0                	callq  *%rax
	if (curenv == e) {
  800420953e:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004209545:	00 00 00 
  8004209548:	ff d0                	callq  *%rax
  800420954a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209551:	00 00 00 
  8004209554:	48 98                	cltq   
  8004209556:	48 c1 e0 03          	shl    $0x3,%rax
  800420955a:	48 89 c1             	mov    %rax,%rcx
  800420955d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209561:	48 01 c8             	add    %rcx,%rax
  8004209564:	48 01 d0             	add    %rdx,%rax
  8004209567:	48 83 c0 08          	add    $0x8,%rax
  800420956b:	48 8b 00             	mov    (%rax),%rax
  800420956e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004209572:	75 40                	jne    80042095b4 <env_destroy+0xed>
		curenv = NULL;
  8004209574:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420957b:	00 00 00 
  800420957e:	ff d0                	callq  *%rax
  8004209580:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209587:	00 00 00 
  800420958a:	48 98                	cltq   
  800420958c:	48 c1 e0 03          	shl    $0x3,%rax
  8004209590:	48 89 c1             	mov    %rax,%rcx
  8004209593:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209597:	48 01 c8             	add    %rcx,%rax
  800420959a:	48 01 d0             	add    %rdx,%rax
  800420959d:	48 83 c0 08          	add    $0x8,%rax
  80042095a1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  80042095a8:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  80042095af:	00 00 00 
  80042095b2:	ff d0                	callq  *%rax
	}
}
  80042095b4:	c9                   	leaveq 
  80042095b5:	c3                   	retq   

00000080042095b6 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  80042095b6:	55                   	push   %rbp
  80042095b7:	48 89 e5             	mov    %rsp,%rbp
  80042095ba:	53                   	push   %rbx
  80042095bb:	48 83 ec 18          	sub    $0x18,%rsp
  80042095bf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  80042095c3:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042095ca:	00 00 00 
  80042095cd:	ff d0                	callq  *%rax
  80042095cf:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042095d6:	00 00 00 
  80042095d9:	48 98                	cltq   
  80042095db:	48 c1 e0 03          	shl    $0x3,%rax
  80042095df:	48 89 c1             	mov    %rax,%rcx
  80042095e2:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095e6:	48 01 c8             	add    %rcx,%rax
  80042095e9:	48 01 d0             	add    %rdx,%rax
  80042095ec:	48 83 c0 08          	add    $0x8,%rax
  80042095f0:	48 8b 18             	mov    (%rax),%rbx
  80042095f3:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042095fa:	00 00 00 
  80042095fd:	ff d0                	callq  *%rax
  80042095ff:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004209605:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209609:	4c 8b 3c 24          	mov    (%rsp),%r15
  800420960d:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  8004209612:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004209617:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  800420961c:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004209621:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004209626:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  800420962b:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004209630:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004209635:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  800420963a:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  800420963f:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004209644:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004209649:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  800420964e:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  8004209653:	48 83 c4 78          	add    $0x78,%rsp
  8004209657:	8e 04 24             	mov    (%rsp),%es
  800420965a:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  800420965e:	48 83 c4 10          	add    $0x10,%rsp
  8004209662:	48 83 c4 10          	add    $0x10,%rsp
  8004209666:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  8004209668:	48 ba c0 e1 21 04 80 	movabs $0x800421e1c0,%rdx
  800420966f:	00 00 00 
  8004209672:	be 8b 02 00 00       	mov    $0x28b,%esi
  8004209677:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  800420967e:	00 00 00 
  8004209681:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209686:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420968d:	00 00 00 
  8004209690:	ff d1                	callq  *%rcx

0000008004209692 <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  8004209692:	55                   	push   %rbp
  8004209693:	48 89 e5             	mov    %rsp,%rbp
  8004209696:	48 83 ec 20          	sub    $0x20,%rsp
  800420969a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  800420969e:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042096a5:	00 00 00 
  80042096a8:	ff d0                	callq  *%rax
  80042096aa:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042096b1:	00 00 00 
  80042096b4:	48 98                	cltq   
  80042096b6:	48 c1 e0 03          	shl    $0x3,%rax
  80042096ba:	48 89 c1             	mov    %rax,%rcx
  80042096bd:	48 c1 e1 04          	shl    $0x4,%rcx
  80042096c1:	48 01 c8             	add    %rcx,%rax
  80042096c4:	48 01 d0             	add    %rdx,%rax
  80042096c7:	48 83 c0 08          	add    $0x8,%rax
  80042096cb:	48 8b 00             	mov    (%rax),%rax
  80042096ce:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042096d2:	0f 84 11 01 00 00    	je     80042097e9 <env_run+0x157>
		if (curenv && curenv->env_status == ENV_RUNNING)
  80042096d8:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042096df:	00 00 00 
  80042096e2:	ff d0                	callq  *%rax
  80042096e4:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042096eb:	00 00 00 
  80042096ee:	48 98                	cltq   
  80042096f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042096f4:	48 89 c1             	mov    %rax,%rcx
  80042096f7:	48 c1 e1 04          	shl    $0x4,%rcx
  80042096fb:	48 01 c8             	add    %rcx,%rax
  80042096fe:	48 01 d0             	add    %rdx,%rax
  8004209701:	48 83 c0 08          	add    $0x8,%rax
  8004209705:	48 8b 00             	mov    (%rax),%rax
  8004209708:	48 85 c0             	test   %rax,%rax
  800420970b:	74 75                	je     8004209782 <env_run+0xf0>
  800420970d:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004209714:	00 00 00 
  8004209717:	ff d0                	callq  *%rax
  8004209719:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209720:	00 00 00 
  8004209723:	48 98                	cltq   
  8004209725:	48 c1 e0 03          	shl    $0x3,%rax
  8004209729:	48 89 c1             	mov    %rax,%rcx
  800420972c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209730:	48 01 c8             	add    %rcx,%rax
  8004209733:	48 01 d0             	add    %rdx,%rax
  8004209736:	48 83 c0 08          	add    $0x8,%rax
  800420973a:	48 8b 00             	mov    (%rax),%rax
  800420973d:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209743:	83 f8 03             	cmp    $0x3,%eax
  8004209746:	75 3a                	jne    8004209782 <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  8004209748:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420974f:	00 00 00 
  8004209752:	ff d0                	callq  *%rax
  8004209754:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420975b:	00 00 00 
  800420975e:	48 98                	cltq   
  8004209760:	48 c1 e0 03          	shl    $0x3,%rax
  8004209764:	48 89 c1             	mov    %rax,%rcx
  8004209767:	48 c1 e1 04          	shl    $0x4,%rcx
  800420976b:	48 01 c8             	add    %rcx,%rax
  800420976e:	48 01 d0             	add    %rdx,%rax
  8004209771:	48 83 c0 08          	add    $0x8,%rax
  8004209775:	48 8b 00             	mov    (%rax),%rax
  8004209778:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420977f:	00 00 00 
		//cprintf("cpu %d switch from env %d to env %d\n",
		//	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  8004209782:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004209789:	00 00 00 
  800420978c:	ff d0                	callq  *%rax
  800420978e:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004209795:	00 00 00 
  8004209798:	48 98                	cltq   
  800420979a:	48 c1 e0 03          	shl    $0x3,%rax
  800420979e:	48 89 c1             	mov    %rax,%rcx
  80042097a1:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097a5:	48 01 c8             	add    %rcx,%rax
  80042097a8:	48 01 d0             	add    %rdx,%rax
  80042097ab:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042097af:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097b3:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  80042097b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097ba:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  80042097c1:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  80042097c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097c8:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  80042097ce:	83 f8 03             	cmp    $0x3,%eax
  80042097d1:	74 16                	je     80042097e9 <env_run+0x157>
			lcr3(e->env_cr3);
  80042097d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097d7:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  80042097de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042097e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042097e6:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  80042097e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097ed:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  80042097f3:	83 f8 03             	cmp    $0x3,%eax
  80042097f6:	74 35                	je     800420982d <env_run+0x19b>
  80042097f8:	48 b9 cc e1 21 04 80 	movabs $0x800421e1cc,%rcx
  80042097ff:	00 00 00 
  8004209802:	48 ba e9 e1 21 04 80 	movabs $0x800421e1e9,%rdx
  8004209809:	00 00 00 
  800420980c:	be ac 02 00 00       	mov    $0x2ac,%esi
  8004209811:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004209818:	00 00 00 
  800420981b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209820:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209827:	00 00 00 
  800420982a:	41 ff d0             	callq  *%r8


#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  800420982d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209831:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209837:	83 f8 03             	cmp    $0x3,%eax
  800420983a:	75 3d                	jne    8004209879 <env_run+0x1e7>
		vmx_vmrun(e);
  800420983c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209840:	48 89 c7             	mov    %rax,%rdi
  8004209843:	48 b8 c1 bf 21 04 80 	movabs $0x800421bfc1,%rax
  800420984a:	00 00 00 
  800420984d:	ff d0                	callq  *%rax
		panic ("vmx_run never returns\n");
  800420984f:	48 ba fe e1 21 04 80 	movabs $0x800421e1fe,%rdx
  8004209856:	00 00 00 
  8004209859:	be b2 02 00 00       	mov    $0x2b2,%esi
  800420985e:	48 bf cc e0 21 04 80 	movabs $0x800421e0cc,%rdi
  8004209865:	00 00 00 
  8004209868:	b8 00 00 00 00       	mov    $0x0,%eax
  800420986d:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004209874:	00 00 00 
  8004209877:	ff d1                	callq  *%rcx
	}
	else {
		unlock_kernel();
  8004209879:	48 b8 e3 7d 20 04 80 	movabs $0x8004207de3,%rax
  8004209880:	00 00 00 
  8004209883:	ff d0                	callq  *%rax
		env_pop_tf(&e->env_tf);
  8004209885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209889:	48 89 c7             	mov    %rax,%rdi
  800420988c:	48 b8 b6 95 20 04 80 	movabs $0x80042095b6,%rax
  8004209893:	00 00 00 
  8004209896:	ff d0                	callq  *%rax

0000008004209898 <mc146818_read>:
  8004209898:	55                   	push   %rbp
  8004209899:	48 89 e5             	mov    %rsp,%rbp
  800420989c:	48 83 ec 14          	sub    $0x14,%rsp
  80042098a0:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042098a3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042098a6:	0f b6 c0             	movzbl %al,%eax
  80042098a9:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  80042098b0:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042098b3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042098b7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042098ba:	ee                   	out    %al,(%dx)
  80042098bb:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042098c2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042098c5:	89 c2                	mov    %eax,%edx
  80042098c7:	ec                   	in     (%dx),%al
  80042098c8:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  80042098cb:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042098cf:	0f b6 c0             	movzbl %al,%eax
  80042098d2:	c9                   	leaveq 
  80042098d3:	c3                   	retq   

00000080042098d4 <mc146818_write>:
  80042098d4:	55                   	push   %rbp
  80042098d5:	48 89 e5             	mov    %rsp,%rbp
  80042098d8:	48 83 ec 18          	sub    $0x18,%rsp
  80042098dc:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042098df:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042098e2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042098e5:	0f b6 c0             	movzbl %al,%eax
  80042098e8:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  80042098ef:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042098f2:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042098f6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042098f9:	ee                   	out    %al,(%dx)
  80042098fa:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042098fd:	0f b6 c0             	movzbl %al,%eax
  8004209900:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  8004209907:	88 45 f3             	mov    %al,-0xd(%rbp)
  800420990a:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420990e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209911:	ee                   	out    %al,(%dx)
  8004209912:	c9                   	leaveq 
  8004209913:	c3                   	retq   

0000008004209914 <pic_init>:
  8004209914:	55                   	push   %rbp
  8004209915:	48 89 e5             	mov    %rsp,%rbp
  8004209918:	48 83 ec 70          	sub    $0x70,%rsp
  800420991c:	48 b8 68 b2 4d 04 80 	movabs $0x80044db268,%rax
  8004209923:	00 00 00 
  8004209926:	c6 00 01             	movb   $0x1,(%rax)
  8004209929:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  8004209930:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  8004209934:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209938:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420993b:	ee                   	out    %al,(%dx)
  800420993c:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  8004209943:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  8004209947:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420994b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420994e:	ee                   	out    %al,(%dx)
  800420994f:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  8004209956:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  800420995a:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420995e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004209961:	ee                   	out    %al,(%dx)
  8004209962:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  8004209969:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  800420996d:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004209971:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004209974:	ee                   	out    %al,(%dx)
  8004209975:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  800420997c:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  8004209980:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004209984:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209987:	ee                   	out    %al,(%dx)
  8004209988:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  800420998f:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  8004209993:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004209997:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420999a:	ee                   	out    %al,(%dx)
  800420999b:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  80042099a2:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  80042099a6:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042099aa:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042099ad:	ee                   	out    %al,(%dx)
  80042099ae:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  80042099b5:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  80042099b9:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042099bd:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042099c0:	ee                   	out    %al,(%dx)
  80042099c1:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  80042099c8:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  80042099cc:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  80042099d0:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042099d3:	ee                   	out    %al,(%dx)
  80042099d4:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  80042099db:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  80042099df:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  80042099e3:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  80042099e6:	ee                   	out    %al,(%dx)
  80042099e7:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  80042099ee:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  80042099f2:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  80042099f6:	8b 55 ac             	mov    -0x54(%rbp),%edx
  80042099f9:	ee                   	out    %al,(%dx)
  80042099fa:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a01:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a05:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a09:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a0c:	ee                   	out    %al,(%dx)
  8004209a0d:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a14:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a18:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a1c:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a1f:	ee                   	out    %al,(%dx)
  8004209a20:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209a27:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209a2b:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209a2f:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209a32:	ee                   	out    %al,(%dx)
  8004209a33:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004209a3a:	00 00 00 
  8004209a3d:	0f b7 00             	movzwl (%rax),%eax
  8004209a40:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209a44:	74 1e                	je     8004209a64 <pic_init+0x150>
  8004209a46:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004209a4d:	00 00 00 
  8004209a50:	0f b7 00             	movzwl (%rax),%eax
  8004209a53:	0f b7 c0             	movzwl %ax,%eax
  8004209a56:	89 c7                	mov    %eax,%edi
  8004209a58:	48 b8 66 9a 20 04 80 	movabs $0x8004209a66,%rax
  8004209a5f:	00 00 00 
  8004209a62:	ff d0                	callq  *%rax
  8004209a64:	c9                   	leaveq 
  8004209a65:	c3                   	retq   

0000008004209a66 <irq_setmask_8259A>:
  8004209a66:	55                   	push   %rbp
  8004209a67:	48 89 e5             	mov    %rsp,%rbp
  8004209a6a:	48 83 ec 30          	sub    $0x30,%rsp
  8004209a6e:	89 f8                	mov    %edi,%eax
  8004209a70:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209a74:	48 b8 72 36 23 04 80 	movabs $0x8004233672,%rax
  8004209a7b:	00 00 00 
  8004209a7e:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209a82:	66 89 10             	mov    %dx,(%rax)
  8004209a85:	48 b8 68 b2 4d 04 80 	movabs $0x80044db268,%rax
  8004209a8c:	00 00 00 
  8004209a8f:	0f b6 00             	movzbl (%rax),%eax
  8004209a92:	83 f0 01             	xor    $0x1,%eax
  8004209a95:	84 c0                	test   %al,%al
  8004209a97:	74 05                	je     8004209a9e <irq_setmask_8259A+0x38>
  8004209a99:	e9 b7 00 00 00       	jmpq   8004209b55 <irq_setmask_8259A+0xef>
  8004209a9e:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209aa2:	0f b6 c0             	movzbl %al,%eax
  8004209aa5:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209aac:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209aaf:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209ab3:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209ab6:	ee                   	out    %al,(%dx)
  8004209ab7:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209abb:	66 c1 e8 08          	shr    $0x8,%ax
  8004209abf:	0f b6 c0             	movzbl %al,%eax
  8004209ac2:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209ac9:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209acc:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209ad0:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209ad3:	ee                   	out    %al,(%dx)
  8004209ad4:	48 bf 15 e2 21 04 80 	movabs $0x800421e215,%rdi
  8004209adb:	00 00 00 
  8004209ade:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209ae3:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004209aea:	00 00 00 
  8004209aed:	ff d2                	callq  *%rdx
  8004209aef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209af6:	eb 3c                	jmp    8004209b34 <irq_setmask_8259A+0xce>
  8004209af8:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209afc:	f7 d0                	not    %eax
  8004209afe:	89 c2                	mov    %eax,%edx
  8004209b00:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b03:	89 c1                	mov    %eax,%ecx
  8004209b05:	d3 fa                	sar    %cl,%edx
  8004209b07:	89 d0                	mov    %edx,%eax
  8004209b09:	83 e0 01             	and    $0x1,%eax
  8004209b0c:	85 c0                	test   %eax,%eax
  8004209b0e:	74 20                	je     8004209b30 <irq_setmask_8259A+0xca>
  8004209b10:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b13:	89 c6                	mov    %eax,%esi
  8004209b15:	48 bf 29 e2 21 04 80 	movabs $0x800421e229,%rdi
  8004209b1c:	00 00 00 
  8004209b1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b24:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004209b2b:	00 00 00 
  8004209b2e:	ff d2                	callq  *%rdx
  8004209b30:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209b34:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209b38:	7e be                	jle    8004209af8 <irq_setmask_8259A+0x92>
  8004209b3a:	48 bf 2d e2 21 04 80 	movabs $0x800421e22d,%rdi
  8004209b41:	00 00 00 
  8004209b44:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b49:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004209b50:	00 00 00 
  8004209b53:	ff d2                	callq  *%rdx
  8004209b55:	c9                   	leaveq 
  8004209b56:	c3                   	retq   

0000008004209b57 <irq_eoi>:
  8004209b57:	55                   	push   %rbp
  8004209b58:	48 89 e5             	mov    %rsp,%rbp
  8004209b5b:	48 83 ec 10          	sub    $0x10,%rsp
  8004209b5f:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209b66:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209b6a:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209b6e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209b71:	ee                   	out    %al,(%dx)
  8004209b72:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209b79:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209b7d:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209b81:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209b84:	ee                   	out    %al,(%dx)
  8004209b85:	c9                   	leaveq 
  8004209b86:	c3                   	retq   

0000008004209b87 <putch>:
  8004209b87:	55                   	push   %rbp
  8004209b88:	48 89 e5             	mov    %rsp,%rbp
  8004209b8b:	48 83 ec 10          	sub    $0x10,%rsp
  8004209b8f:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209b92:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209b96:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b99:	89 c7                	mov    %eax,%edi
  8004209b9b:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004209ba2:	00 00 00 
  8004209ba5:	ff d0                	callq  *%rax
  8004209ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209bab:	48 83 c0 04          	add    $0x4,%rax
  8004209baf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209bb3:	c9                   	leaveq 
  8004209bb4:	c3                   	retq   

0000008004209bb5 <vcprintf>:
  8004209bb5:	55                   	push   %rbp
  8004209bb6:	48 89 e5             	mov    %rsp,%rbp
  8004209bb9:	48 83 ec 30          	sub    $0x30,%rsp
  8004209bbd:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209bc1:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209bc5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209bcc:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209bd0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209bd4:	48 8b 0a             	mov    (%rdx),%rcx
  8004209bd7:	48 89 08             	mov    %rcx,(%rax)
  8004209bda:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209bde:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209be2:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209be6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209bea:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209bee:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209bf2:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209bf6:	48 89 c6             	mov    %rax,%rsi
  8004209bf9:	48 bf 87 9b 20 04 80 	movabs $0x8004209b87,%rdi
  8004209c00:	00 00 00 
  8004209c03:	48 b8 43 fd 20 04 80 	movabs $0x800420fd43,%rax
  8004209c0a:	00 00 00 
  8004209c0d:	ff d0                	callq  *%rax
  8004209c0f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c12:	c9                   	leaveq 
  8004209c13:	c3                   	retq   

0000008004209c14 <cprintf>:
  8004209c14:	55                   	push   %rbp
  8004209c15:	48 89 e5             	mov    %rsp,%rbp
  8004209c18:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c1f:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209c26:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209c2d:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209c34:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209c3b:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209c42:	84 c0                	test   %al,%al
  8004209c44:	74 20                	je     8004209c66 <cprintf+0x52>
  8004209c46:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209c4a:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209c4e:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209c52:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209c56:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209c5a:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209c5e:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209c62:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209c66:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209c6d:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209c74:	00 00 00 
  8004209c77:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209c7e:	00 00 00 
  8004209c81:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209c85:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209c8c:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209c93:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209c9a:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209ca1:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209ca8:	48 8b 0a             	mov    (%rdx),%rcx
  8004209cab:	48 89 08             	mov    %rcx,(%rax)
  8004209cae:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209cb2:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209cb6:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209cba:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209cbe:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209cc5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209ccc:	48 89 d6             	mov    %rdx,%rsi
  8004209ccf:	48 89 c7             	mov    %rax,%rdi
  8004209cd2:	48 b8 b5 9b 20 04 80 	movabs $0x8004209bb5,%rax
  8004209cd9:	00 00 00 
  8004209cdc:	ff d0                	callq  *%rax
  8004209cde:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209ce4:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209cea:	c9                   	leaveq 
  8004209ceb:	c3                   	retq   

0000008004209cec <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209cec:	55                   	push   %rbp
  8004209ced:	48 89 e5             	mov    %rsp,%rbp
  8004209cf0:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209cf4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209cf8:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209cfb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209cff:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d02:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d06:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d09:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209d0c:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d0f:	c9                   	leaveq 
  8004209d10:	c3                   	retq   

0000008004209d11 <lock_kernel>:
  8004209d11:	55                   	push   %rbp
  8004209d12:	48 89 e5             	mov    %rsp,%rbp
  8004209d15:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  8004209d1c:	00 00 00 
  8004209d1f:	48 b8 bd 7c 21 04 80 	movabs $0x8004217cbd,%rax
  8004209d26:	00 00 00 
  8004209d29:	ff d0                	callq  *%rax
  8004209d2b:	5d                   	pop    %rbp
  8004209d2c:	c3                   	retq   

0000008004209d2d <trapname>:
  8004209d2d:	55                   	push   %rbp
  8004209d2e:	48 89 e5             	mov    %rsp,%rbp
  8004209d31:	48 83 ec 04          	sub    $0x4,%rsp
  8004209d35:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209d38:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209d3b:	83 f8 13             	cmp    $0x13,%eax
  8004209d3e:	77 16                	ja     8004209d56 <trapname+0x29>
  8004209d40:	48 b8 40 e6 21 04 80 	movabs $0x800421e640,%rax
  8004209d47:	00 00 00 
  8004209d4a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209d4d:	48 63 d2             	movslq %edx,%rdx
  8004209d50:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209d54:	eb 34                	jmp    8004209d8a <trapname+0x5d>
  8004209d56:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209d5a:	75 0c                	jne    8004209d68 <trapname+0x3b>
  8004209d5c:	48 b8 40 e2 21 04 80 	movabs $0x800421e240,%rax
  8004209d63:	00 00 00 
  8004209d66:	eb 22                	jmp    8004209d8a <trapname+0x5d>
  8004209d68:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209d6c:	7e 12                	jle    8004209d80 <trapname+0x53>
  8004209d6e:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209d72:	7f 0c                	jg     8004209d80 <trapname+0x53>
  8004209d74:	48 b8 4c e2 21 04 80 	movabs $0x800421e24c,%rax
  8004209d7b:	00 00 00 
  8004209d7e:	eb 0a                	jmp    8004209d8a <trapname+0x5d>
  8004209d80:	48 b8 5f e2 21 04 80 	movabs $0x800421e25f,%rax
  8004209d87:	00 00 00 
  8004209d8a:	c9                   	leaveq 
  8004209d8b:	c3                   	retq   

0000008004209d8c <trap_init>:
  8004209d8c:	55                   	push   %rbp
  8004209d8d:	48 89 e5             	mov    %rsp,%rbp
  8004209d90:	48 83 ec 10          	sub    $0x10,%rsp
  8004209d94:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209d9b:	e9 7d 01 00 00       	jmpq   8004209f1d <trap_init+0x191>
  8004209da0:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  8004209da7:	00 00 00 
  8004209daa:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  8004209db1:	00 00 00 
  8004209db4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209db7:	48 63 c9             	movslq %ecx,%rcx
  8004209dba:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209dbe:	48 01 ca             	add    %rcx,%rdx
  8004209dc1:	66 89 02             	mov    %ax,(%rdx)
  8004209dc4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209dcb:	00 00 00 
  8004209dce:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209dd1:	48 63 d2             	movslq %edx,%rdx
  8004209dd4:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209dd8:	48 01 d0             	add    %rdx,%rax
  8004209ddb:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209de1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209de8:	00 00 00 
  8004209deb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209dee:	48 63 d2             	movslq %edx,%rdx
  8004209df1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209df5:	48 01 d0             	add    %rdx,%rax
  8004209df8:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209dfc:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209dff:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e02:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e09:	00 00 00 
  8004209e0c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e0f:	48 63 d2             	movslq %edx,%rdx
  8004209e12:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e16:	48 01 d0             	add    %rdx,%rax
  8004209e19:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e1d:	83 e2 07             	and    $0x7,%edx
  8004209e20:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e23:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e2a:	00 00 00 
  8004209e2d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e30:	48 63 d2             	movslq %edx,%rdx
  8004209e33:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e37:	48 01 d0             	add    %rdx,%rax
  8004209e3a:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209e3e:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209e41:	83 ca 0e             	or     $0xe,%edx
  8004209e44:	88 50 05             	mov    %dl,0x5(%rax)
  8004209e47:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e4e:	00 00 00 
  8004209e51:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e54:	48 63 d2             	movslq %edx,%rdx
  8004209e57:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e5b:	48 01 d0             	add    %rdx,%rax
  8004209e5e:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209e62:	83 e2 ef             	and    $0xffffffef,%edx
  8004209e65:	88 50 05             	mov    %dl,0x5(%rax)
  8004209e68:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e6f:	00 00 00 
  8004209e72:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e75:	48 63 d2             	movslq %edx,%rdx
  8004209e78:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e7c:	48 01 d0             	add    %rdx,%rax
  8004209e7f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209e83:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209e86:	88 50 05             	mov    %dl,0x5(%rax)
  8004209e89:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209e90:	00 00 00 
  8004209e93:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e96:	48 63 d2             	movslq %edx,%rdx
  8004209e99:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e9d:	48 01 d0             	add    %rdx,%rax
  8004209ea0:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ea4:	83 ca 80             	or     $0xffffff80,%edx
  8004209ea7:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eaa:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  8004209eb1:	00 00 00 
  8004209eb4:	48 c1 e8 10          	shr    $0x10,%rax
  8004209eb8:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  8004209ebf:	00 00 00 
  8004209ec2:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209ec5:	48 63 c9             	movslq %ecx,%rcx
  8004209ec8:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209ecc:	48 01 ca             	add    %rcx,%rdx
  8004209ecf:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209ed3:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  8004209eda:	00 00 00 
  8004209edd:	48 c1 e8 20          	shr    $0x20,%rax
  8004209ee1:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  8004209ee8:	00 00 00 
  8004209eeb:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209eee:	48 63 c9             	movslq %ecx,%rcx
  8004209ef1:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209ef5:	48 01 ca             	add    %rcx,%rdx
  8004209ef8:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209efb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f02:	00 00 00 
  8004209f05:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f08:	48 63 d2             	movslq %edx,%rdx
  8004209f0b:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f0f:	48 01 d0             	add    %rdx,%rax
  8004209f12:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f19:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f1d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f20:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209f25:	0f 86 75 fe ff ff    	jbe    8004209da0 <trap_init+0x14>
  8004209f2b:	48 b8 60 d7 20 04 80 	movabs $0x800420d760,%rax
  8004209f32:	00 00 00 
  8004209f35:	89 c2                	mov    %eax,%edx
  8004209f37:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f3e:	00 00 00 
  8004209f41:	66 89 10             	mov    %dx,(%rax)
  8004209f44:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f4b:	00 00 00 
  8004209f4e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209f54:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f5b:	00 00 00 
  8004209f5e:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209f62:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209f65:	88 50 04             	mov    %dl,0x4(%rax)
  8004209f68:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f6f:	00 00 00 
  8004209f72:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209f76:	83 e2 07             	and    $0x7,%edx
  8004209f79:	88 50 04             	mov    %dl,0x4(%rax)
  8004209f7c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f83:	00 00 00 
  8004209f86:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f8a:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209f8d:	83 ca 0e             	or     $0xe,%edx
  8004209f90:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f93:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209f9a:	00 00 00 
  8004209f9d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209fa1:	83 e2 ef             	and    $0xffffffef,%edx
  8004209fa4:	88 50 05             	mov    %dl,0x5(%rax)
  8004209fa7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fae:	00 00 00 
  8004209fb1:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209fb5:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209fb8:	88 50 05             	mov    %dl,0x5(%rax)
  8004209fbb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fc2:	00 00 00 
  8004209fc5:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209fc9:	83 ca 80             	or     $0xffffff80,%edx
  8004209fcc:	88 50 05             	mov    %dl,0x5(%rax)
  8004209fcf:	48 b8 60 d7 20 04 80 	movabs $0x800420d760,%rax
  8004209fd6:	00 00 00 
  8004209fd9:	48 c1 e8 10          	shr    $0x10,%rax
  8004209fdd:	89 c2                	mov    %eax,%edx
  8004209fdf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  8004209fe6:	00 00 00 
  8004209fe9:	66 89 50 06          	mov    %dx,0x6(%rax)
  8004209fed:	48 b8 60 d7 20 04 80 	movabs $0x800420d760,%rax
  8004209ff4:	00 00 00 
  8004209ff7:	48 c1 e8 20          	shr    $0x20,%rax
  8004209ffb:	89 c2                	mov    %eax,%edx
  8004209ffd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a004:	00 00 00 
  800420a007:	89 50 08             	mov    %edx,0x8(%rax)
  800420a00a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a011:	00 00 00 
  800420a014:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a01b:	48 b8 6a d7 20 04 80 	movabs $0x800420d76a,%rax
  800420a022:	00 00 00 
  800420a025:	89 c2                	mov    %eax,%edx
  800420a027:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a02e:	00 00 00 
  800420a031:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a035:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a03c:	00 00 00 
  800420a03f:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a045:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a04c:	00 00 00 
  800420a04f:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a053:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a056:	88 50 14             	mov    %dl,0x14(%rax)
  800420a059:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a060:	00 00 00 
  800420a063:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a067:	83 e2 07             	and    $0x7,%edx
  800420a06a:	88 50 14             	mov    %dl,0x14(%rax)
  800420a06d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a074:	00 00 00 
  800420a077:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a07b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a07e:	83 ca 0e             	or     $0xe,%edx
  800420a081:	88 50 15             	mov    %dl,0x15(%rax)
  800420a084:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a08b:	00 00 00 
  800420a08e:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a092:	83 e2 ef             	and    $0xffffffef,%edx
  800420a095:	88 50 15             	mov    %dl,0x15(%rax)
  800420a098:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a09f:	00 00 00 
  800420a0a2:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0a6:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a0a9:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0ac:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a0b3:	00 00 00 
  800420a0b6:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0ba:	83 ca 80             	or     $0xffffff80,%edx
  800420a0bd:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0c0:	48 b8 6a d7 20 04 80 	movabs $0x800420d76a,%rax
  800420a0c7:	00 00 00 
  800420a0ca:	48 c1 e8 10          	shr    $0x10,%rax
  800420a0ce:	89 c2                	mov    %eax,%edx
  800420a0d0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a0d7:	00 00 00 
  800420a0da:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a0de:	48 b8 6a d7 20 04 80 	movabs $0x800420d76a,%rax
  800420a0e5:	00 00 00 
  800420a0e8:	48 c1 e8 20          	shr    $0x20,%rax
  800420a0ec:	89 c2                	mov    %eax,%edx
  800420a0ee:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a0f5:	00 00 00 
  800420a0f8:	89 50 18             	mov    %edx,0x18(%rax)
  800420a0fb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a102:	00 00 00 
  800420a105:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a10c:	48 b8 74 d7 20 04 80 	movabs $0x800420d774,%rax
  800420a113:	00 00 00 
  800420a116:	89 c2                	mov    %eax,%edx
  800420a118:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a11f:	00 00 00 
  800420a122:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a126:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a12d:	00 00 00 
  800420a130:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a136:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a13d:	00 00 00 
  800420a140:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a144:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a147:	88 50 24             	mov    %dl,0x24(%rax)
  800420a14a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a151:	00 00 00 
  800420a154:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a158:	83 e2 07             	and    $0x7,%edx
  800420a15b:	88 50 24             	mov    %dl,0x24(%rax)
  800420a15e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a165:	00 00 00 
  800420a168:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a16c:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a16f:	83 ca 0e             	or     $0xe,%edx
  800420a172:	88 50 25             	mov    %dl,0x25(%rax)
  800420a175:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a17c:	00 00 00 
  800420a17f:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a183:	83 e2 ef             	and    $0xffffffef,%edx
  800420a186:	88 50 25             	mov    %dl,0x25(%rax)
  800420a189:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a190:	00 00 00 
  800420a193:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a197:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a19a:	88 50 25             	mov    %dl,0x25(%rax)
  800420a19d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1a4:	00 00 00 
  800420a1a7:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1ab:	83 ca 80             	or     $0xffffff80,%edx
  800420a1ae:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1b1:	48 b8 74 d7 20 04 80 	movabs $0x800420d774,%rax
  800420a1b8:	00 00 00 
  800420a1bb:	48 c1 e8 10          	shr    $0x10,%rax
  800420a1bf:	89 c2                	mov    %eax,%edx
  800420a1c1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1c8:	00 00 00 
  800420a1cb:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a1cf:	48 b8 74 d7 20 04 80 	movabs $0x800420d774,%rax
  800420a1d6:	00 00 00 
  800420a1d9:	48 c1 e8 20          	shr    $0x20,%rax
  800420a1dd:	89 c2                	mov    %eax,%edx
  800420a1df:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1e6:	00 00 00 
  800420a1e9:	89 50 28             	mov    %edx,0x28(%rax)
  800420a1ec:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a1f3:	00 00 00 
  800420a1f6:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a1fd:	48 b8 7e d7 20 04 80 	movabs $0x800420d77e,%rax
  800420a204:	00 00 00 
  800420a207:	89 c2                	mov    %eax,%edx
  800420a209:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a210:	00 00 00 
  800420a213:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a217:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a21e:	00 00 00 
  800420a221:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a227:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a22e:	00 00 00 
  800420a231:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a235:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a238:	88 50 34             	mov    %dl,0x34(%rax)
  800420a23b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a242:	00 00 00 
  800420a245:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a249:	83 e2 07             	and    $0x7,%edx
  800420a24c:	88 50 34             	mov    %dl,0x34(%rax)
  800420a24f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a256:	00 00 00 
  800420a259:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a25d:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a260:	83 ca 0e             	or     $0xe,%edx
  800420a263:	88 50 35             	mov    %dl,0x35(%rax)
  800420a266:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a26d:	00 00 00 
  800420a270:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a274:	83 e2 ef             	and    $0xffffffef,%edx
  800420a277:	88 50 35             	mov    %dl,0x35(%rax)
  800420a27a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a281:	00 00 00 
  800420a284:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a288:	83 ca 60             	or     $0x60,%edx
  800420a28b:	88 50 35             	mov    %dl,0x35(%rax)
  800420a28e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a295:	00 00 00 
  800420a298:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a29c:	83 ca 80             	or     $0xffffff80,%edx
  800420a29f:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2a2:	48 b8 7e d7 20 04 80 	movabs $0x800420d77e,%rax
  800420a2a9:	00 00 00 
  800420a2ac:	48 c1 e8 10          	shr    $0x10,%rax
  800420a2b0:	89 c2                	mov    %eax,%edx
  800420a2b2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2b9:	00 00 00 
  800420a2bc:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a2c0:	48 b8 7e d7 20 04 80 	movabs $0x800420d77e,%rax
  800420a2c7:	00 00 00 
  800420a2ca:	48 c1 e8 20          	shr    $0x20,%rax
  800420a2ce:	89 c2                	mov    %eax,%edx
  800420a2d0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2d7:	00 00 00 
  800420a2da:	89 50 38             	mov    %edx,0x38(%rax)
  800420a2dd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a2e4:	00 00 00 
  800420a2e7:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a2ee:	48 b8 88 d7 20 04 80 	movabs $0x800420d788,%rax
  800420a2f5:	00 00 00 
  800420a2f8:	89 c2                	mov    %eax,%edx
  800420a2fa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a301:	00 00 00 
  800420a304:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a308:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a30f:	00 00 00 
  800420a312:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a318:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a31f:	00 00 00 
  800420a322:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a326:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a329:	88 50 44             	mov    %dl,0x44(%rax)
  800420a32c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a333:	00 00 00 
  800420a336:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a33a:	83 e2 07             	and    $0x7,%edx
  800420a33d:	88 50 44             	mov    %dl,0x44(%rax)
  800420a340:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a347:	00 00 00 
  800420a34a:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a34e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a351:	83 ca 0e             	or     $0xe,%edx
  800420a354:	88 50 45             	mov    %dl,0x45(%rax)
  800420a357:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a35e:	00 00 00 
  800420a361:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a365:	83 e2 ef             	and    $0xffffffef,%edx
  800420a368:	88 50 45             	mov    %dl,0x45(%rax)
  800420a36b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a372:	00 00 00 
  800420a375:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a379:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a37c:	88 50 45             	mov    %dl,0x45(%rax)
  800420a37f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a386:	00 00 00 
  800420a389:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a38d:	83 ca 80             	or     $0xffffff80,%edx
  800420a390:	88 50 45             	mov    %dl,0x45(%rax)
  800420a393:	48 b8 88 d7 20 04 80 	movabs $0x800420d788,%rax
  800420a39a:	00 00 00 
  800420a39d:	48 c1 e8 10          	shr    $0x10,%rax
  800420a3a1:	89 c2                	mov    %eax,%edx
  800420a3a3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3aa:	00 00 00 
  800420a3ad:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a3b1:	48 b8 88 d7 20 04 80 	movabs $0x800420d788,%rax
  800420a3b8:	00 00 00 
  800420a3bb:	48 c1 e8 20          	shr    $0x20,%rax
  800420a3bf:	89 c2                	mov    %eax,%edx
  800420a3c1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3c8:	00 00 00 
  800420a3cb:	89 50 48             	mov    %edx,0x48(%rax)
  800420a3ce:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3d5:	00 00 00 
  800420a3d8:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a3df:	48 b8 92 d7 20 04 80 	movabs $0x800420d792,%rax
  800420a3e6:	00 00 00 
  800420a3e9:	89 c2                	mov    %eax,%edx
  800420a3eb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a3f2:	00 00 00 
  800420a3f5:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a3f9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a400:	00 00 00 
  800420a403:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a409:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a410:	00 00 00 
  800420a413:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a417:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a41a:	88 50 54             	mov    %dl,0x54(%rax)
  800420a41d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a424:	00 00 00 
  800420a427:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a42b:	83 e2 07             	and    $0x7,%edx
  800420a42e:	88 50 54             	mov    %dl,0x54(%rax)
  800420a431:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a438:	00 00 00 
  800420a43b:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a43f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a442:	83 ca 0e             	or     $0xe,%edx
  800420a445:	88 50 55             	mov    %dl,0x55(%rax)
  800420a448:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a44f:	00 00 00 
  800420a452:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a456:	83 e2 ef             	and    $0xffffffef,%edx
  800420a459:	88 50 55             	mov    %dl,0x55(%rax)
  800420a45c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a463:	00 00 00 
  800420a466:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a46a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a46d:	88 50 55             	mov    %dl,0x55(%rax)
  800420a470:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a477:	00 00 00 
  800420a47a:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a47e:	83 ca 80             	or     $0xffffff80,%edx
  800420a481:	88 50 55             	mov    %dl,0x55(%rax)
  800420a484:	48 b8 92 d7 20 04 80 	movabs $0x800420d792,%rax
  800420a48b:	00 00 00 
  800420a48e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a492:	89 c2                	mov    %eax,%edx
  800420a494:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a49b:	00 00 00 
  800420a49e:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a4a2:	48 b8 92 d7 20 04 80 	movabs $0x800420d792,%rax
  800420a4a9:	00 00 00 
  800420a4ac:	48 c1 e8 20          	shr    $0x20,%rax
  800420a4b0:	89 c2                	mov    %eax,%edx
  800420a4b2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4b9:	00 00 00 
  800420a4bc:	89 50 58             	mov    %edx,0x58(%rax)
  800420a4bf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4c6:	00 00 00 
  800420a4c9:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a4d0:	48 b8 9c d7 20 04 80 	movabs $0x800420d79c,%rax
  800420a4d7:	00 00 00 
  800420a4da:	89 c2                	mov    %eax,%edx
  800420a4dc:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4e3:	00 00 00 
  800420a4e6:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a4ea:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a4f1:	00 00 00 
  800420a4f4:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a4fa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a501:	00 00 00 
  800420a504:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a508:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a50b:	88 50 64             	mov    %dl,0x64(%rax)
  800420a50e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a515:	00 00 00 
  800420a518:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a51c:	83 e2 07             	and    $0x7,%edx
  800420a51f:	88 50 64             	mov    %dl,0x64(%rax)
  800420a522:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a529:	00 00 00 
  800420a52c:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a530:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a533:	83 ca 0e             	or     $0xe,%edx
  800420a536:	88 50 65             	mov    %dl,0x65(%rax)
  800420a539:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a540:	00 00 00 
  800420a543:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a547:	83 e2 ef             	and    $0xffffffef,%edx
  800420a54a:	88 50 65             	mov    %dl,0x65(%rax)
  800420a54d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a554:	00 00 00 
  800420a557:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a55b:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a55e:	88 50 65             	mov    %dl,0x65(%rax)
  800420a561:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a568:	00 00 00 
  800420a56b:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a56f:	83 ca 80             	or     $0xffffff80,%edx
  800420a572:	88 50 65             	mov    %dl,0x65(%rax)
  800420a575:	48 b8 9c d7 20 04 80 	movabs $0x800420d79c,%rax
  800420a57c:	00 00 00 
  800420a57f:	48 c1 e8 10          	shr    $0x10,%rax
  800420a583:	89 c2                	mov    %eax,%edx
  800420a585:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a58c:	00 00 00 
  800420a58f:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a593:	48 b8 9c d7 20 04 80 	movabs $0x800420d79c,%rax
  800420a59a:	00 00 00 
  800420a59d:	48 c1 e8 20          	shr    $0x20,%rax
  800420a5a1:	89 c2                	mov    %eax,%edx
  800420a5a3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5aa:	00 00 00 
  800420a5ad:	89 50 68             	mov    %edx,0x68(%rax)
  800420a5b0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5b7:	00 00 00 
  800420a5ba:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a5c1:	48 b8 a6 d7 20 04 80 	movabs $0x800420d7a6,%rax
  800420a5c8:	00 00 00 
  800420a5cb:	89 c2                	mov    %eax,%edx
  800420a5cd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5d4:	00 00 00 
  800420a5d7:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a5db:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5e2:	00 00 00 
  800420a5e5:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a5eb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a5f2:	00 00 00 
  800420a5f5:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a5f9:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a5fc:	88 50 74             	mov    %dl,0x74(%rax)
  800420a5ff:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a606:	00 00 00 
  800420a609:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a60d:	83 e2 07             	and    $0x7,%edx
  800420a610:	88 50 74             	mov    %dl,0x74(%rax)
  800420a613:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a61a:	00 00 00 
  800420a61d:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a621:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a624:	83 ca 0e             	or     $0xe,%edx
  800420a627:	88 50 75             	mov    %dl,0x75(%rax)
  800420a62a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a631:	00 00 00 
  800420a634:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a638:	83 e2 ef             	and    $0xffffffef,%edx
  800420a63b:	88 50 75             	mov    %dl,0x75(%rax)
  800420a63e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a645:	00 00 00 
  800420a648:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a64c:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a64f:	88 50 75             	mov    %dl,0x75(%rax)
  800420a652:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a659:	00 00 00 
  800420a65c:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a660:	83 ca 80             	or     $0xffffff80,%edx
  800420a663:	88 50 75             	mov    %dl,0x75(%rax)
  800420a666:	48 b8 a6 d7 20 04 80 	movabs $0x800420d7a6,%rax
  800420a66d:	00 00 00 
  800420a670:	48 c1 e8 10          	shr    $0x10,%rax
  800420a674:	89 c2                	mov    %eax,%edx
  800420a676:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a67d:	00 00 00 
  800420a680:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a684:	48 b8 a6 d7 20 04 80 	movabs $0x800420d7a6,%rax
  800420a68b:	00 00 00 
  800420a68e:	48 c1 e8 20          	shr    $0x20,%rax
  800420a692:	89 c2                	mov    %eax,%edx
  800420a694:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a69b:	00 00 00 
  800420a69e:	89 50 78             	mov    %edx,0x78(%rax)
  800420a6a1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6a8:	00 00 00 
  800420a6ab:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a6b2:	48 b8 b0 d7 20 04 80 	movabs $0x800420d7b0,%rax
  800420a6b9:	00 00 00 
  800420a6bc:	89 c2                	mov    %eax,%edx
  800420a6be:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6c5:	00 00 00 
  800420a6c8:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a6cf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6d6:	00 00 00 
  800420a6d9:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a6e0:	08 00 
  800420a6e2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a6e9:	00 00 00 
  800420a6ec:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a6f3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a6f6:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a6fc:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a703:	00 00 00 
  800420a706:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a70d:	83 e2 07             	and    $0x7,%edx
  800420a710:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a716:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a71d:	00 00 00 
  800420a720:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a727:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a72a:	83 ca 0e             	or     $0xe,%edx
  800420a72d:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a733:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a73a:	00 00 00 
  800420a73d:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a744:	83 e2 ef             	and    $0xffffffef,%edx
  800420a747:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a74d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a754:	00 00 00 
  800420a757:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a75e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a761:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a767:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a76e:	00 00 00 
  800420a771:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a778:	83 ca 80             	or     $0xffffff80,%edx
  800420a77b:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a781:	48 b8 b0 d7 20 04 80 	movabs $0x800420d7b0,%rax
  800420a788:	00 00 00 
  800420a78b:	48 c1 e8 10          	shr    $0x10,%rax
  800420a78f:	89 c2                	mov    %eax,%edx
  800420a791:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a798:	00 00 00 
  800420a79b:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a7a2:	48 b8 b0 d7 20 04 80 	movabs $0x800420d7b0,%rax
  800420a7a9:	00 00 00 
  800420a7ac:	48 c1 e8 20          	shr    $0x20,%rax
  800420a7b0:	89 c2                	mov    %eax,%edx
  800420a7b2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a7b9:	00 00 00 
  800420a7bc:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a7c2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a7c9:	00 00 00 
  800420a7cc:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a7d3:	00 00 00 
  800420a7d6:	48 b8 b8 d7 20 04 80 	movabs $0x800420d7b8,%rax
  800420a7dd:	00 00 00 
  800420a7e0:	89 c2                	mov    %eax,%edx
  800420a7e2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a7e9:	00 00 00 
  800420a7ec:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a7f3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a7fa:	00 00 00 
  800420a7fd:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a804:	08 00 
  800420a806:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a80d:	00 00 00 
  800420a810:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a817:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a81a:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a820:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a827:	00 00 00 
  800420a82a:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a831:	83 e2 07             	and    $0x7,%edx
  800420a834:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a83a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a841:	00 00 00 
  800420a844:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a84b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a84e:	83 ca 0e             	or     $0xe,%edx
  800420a851:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a857:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a85e:	00 00 00 
  800420a861:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a868:	83 e2 ef             	and    $0xffffffef,%edx
  800420a86b:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a871:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a878:	00 00 00 
  800420a87b:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a882:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a885:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a88b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a892:	00 00 00 
  800420a895:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a89c:	83 ca 80             	or     $0xffffff80,%edx
  800420a89f:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8a5:	48 b8 b8 d7 20 04 80 	movabs $0x800420d7b8,%rax
  800420a8ac:	00 00 00 
  800420a8af:	48 c1 e8 10          	shr    $0x10,%rax
  800420a8b3:	89 c2                	mov    %eax,%edx
  800420a8b5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a8bc:	00 00 00 
  800420a8bf:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a8c6:	48 b8 b8 d7 20 04 80 	movabs $0x800420d7b8,%rax
  800420a8cd:	00 00 00 
  800420a8d0:	48 c1 e8 20          	shr    $0x20,%rax
  800420a8d4:	89 c2                	mov    %eax,%edx
  800420a8d6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a8dd:	00 00 00 
  800420a8e0:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a8e6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a8ed:	00 00 00 
  800420a8f0:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a8f7:	00 00 00 
  800420a8fa:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a901:	00 00 00 
  800420a904:	89 c2                	mov    %eax,%edx
  800420a906:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a90d:	00 00 00 
  800420a910:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a917:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a91e:	00 00 00 
  800420a921:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a928:	08 00 
  800420a92a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a931:	00 00 00 
  800420a934:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a93b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a93e:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a944:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a94b:	00 00 00 
  800420a94e:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a955:	83 e2 07             	and    $0x7,%edx
  800420a958:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a95e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a965:	00 00 00 
  800420a968:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a96f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a972:	83 ca 0e             	or     $0xe,%edx
  800420a975:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a97b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a982:	00 00 00 
  800420a985:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a98c:	83 e2 ef             	and    $0xffffffef,%edx
  800420a98f:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a995:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a99c:	00 00 00 
  800420a99f:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9a6:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a9a9:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9af:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a9b6:	00 00 00 
  800420a9b9:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9c0:	83 ca 80             	or     $0xffffff80,%edx
  800420a9c3:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9c9:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a9d0:	00 00 00 
  800420a9d3:	48 c1 e8 10          	shr    $0x10,%rax
  800420a9d7:	89 c2                	mov    %eax,%edx
  800420a9d9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420a9e0:	00 00 00 
  800420a9e3:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420a9ea:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a9f1:	00 00 00 
  800420a9f4:	48 c1 e8 20          	shr    $0x20,%rax
  800420a9f8:	89 c2                	mov    %eax,%edx
  800420a9fa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa01:	00 00 00 
  800420aa04:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa0a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa11:	00 00 00 
  800420aa14:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa1b:	00 00 00 
  800420aa1e:	48 b8 c8 d7 20 04 80 	movabs $0x800420d7c8,%rax
  800420aa25:	00 00 00 
  800420aa28:	89 c2                	mov    %eax,%edx
  800420aa2a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa31:	00 00 00 
  800420aa34:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aa3b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa42:	00 00 00 
  800420aa45:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aa4c:	08 00 
  800420aa4e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa55:	00 00 00 
  800420aa58:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aa5f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aa62:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aa68:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa6f:	00 00 00 
  800420aa72:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aa79:	83 e2 07             	and    $0x7,%edx
  800420aa7c:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aa82:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aa89:	00 00 00 
  800420aa8c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aa93:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aa96:	83 ca 0e             	or     $0xe,%edx
  800420aa99:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420aa9f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aaa6:	00 00 00 
  800420aaa9:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aab0:	83 e2 ef             	and    $0xffffffef,%edx
  800420aab3:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420aab9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aac0:	00 00 00 
  800420aac3:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aaca:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aacd:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420aad3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aada:	00 00 00 
  800420aadd:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aae4:	83 ca 80             	or     $0xffffff80,%edx
  800420aae7:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420aaed:	48 b8 c8 d7 20 04 80 	movabs $0x800420d7c8,%rax
  800420aaf4:	00 00 00 
  800420aaf7:	48 c1 e8 10          	shr    $0x10,%rax
  800420aafb:	89 c2                	mov    %eax,%edx
  800420aafd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab04:	00 00 00 
  800420ab07:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab0e:	48 b8 c8 d7 20 04 80 	movabs $0x800420d7c8,%rax
  800420ab15:	00 00 00 
  800420ab18:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab1c:	89 c2                	mov    %eax,%edx
  800420ab1e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab25:	00 00 00 
  800420ab28:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420ab2e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab35:	00 00 00 
  800420ab38:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420ab3f:	00 00 00 
  800420ab42:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420ab49:	00 00 00 
  800420ab4c:	89 c2                	mov    %eax,%edx
  800420ab4e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab55:	00 00 00 
  800420ab58:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420ab5f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab66:	00 00 00 
  800420ab69:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420ab70:	08 00 
  800420ab72:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab79:	00 00 00 
  800420ab7c:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ab83:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ab86:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ab8c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ab93:	00 00 00 
  800420ab96:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ab9d:	83 e2 07             	and    $0x7,%edx
  800420aba0:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420aba6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abad:	00 00 00 
  800420abb0:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420abb7:	83 e2 f0             	and    $0xfffffff0,%edx
  800420abba:	83 ca 0e             	or     $0xe,%edx
  800420abbd:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420abc3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abca:	00 00 00 
  800420abcd:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420abd4:	83 e2 ef             	and    $0xffffffef,%edx
  800420abd7:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420abdd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abe4:	00 00 00 
  800420abe7:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420abee:	83 e2 9f             	and    $0xffffff9f,%edx
  800420abf1:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420abf7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420abfe:	00 00 00 
  800420ac01:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac08:	83 ca 80             	or     $0xffffff80,%edx
  800420ac0b:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac11:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420ac18:	00 00 00 
  800420ac1b:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac1f:	89 c2                	mov    %eax,%edx
  800420ac21:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac28:	00 00 00 
  800420ac2b:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420ac32:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420ac39:	00 00 00 
  800420ac3c:	48 c1 e8 20          	shr    $0x20,%rax
  800420ac40:	89 c2                	mov    %eax,%edx
  800420ac42:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac49:	00 00 00 
  800420ac4c:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420ac52:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac59:	00 00 00 
  800420ac5c:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420ac63:	00 00 00 
  800420ac66:	48 b8 d8 d7 20 04 80 	movabs $0x800420d7d8,%rax
  800420ac6d:	00 00 00 
  800420ac70:	89 c2                	mov    %eax,%edx
  800420ac72:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac79:	00 00 00 
  800420ac7c:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420ac83:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac8a:	00 00 00 
  800420ac8d:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420ac94:	08 00 
  800420ac96:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ac9d:	00 00 00 
  800420aca0:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420aca7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420acaa:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420acb0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420acb7:	00 00 00 
  800420acba:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420acc1:	83 e2 07             	and    $0x7,%edx
  800420acc4:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420acca:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420acd1:	00 00 00 
  800420acd4:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420acdb:	83 e2 f0             	and    $0xfffffff0,%edx
  800420acde:	83 ca 0e             	or     $0xe,%edx
  800420ace1:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ace7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420acee:	00 00 00 
  800420acf1:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420acf8:	83 e2 ef             	and    $0xffffffef,%edx
  800420acfb:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad01:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad08:	00 00 00 
  800420ad0b:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad12:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad15:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad1b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad22:	00 00 00 
  800420ad25:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad2c:	83 ca 80             	or     $0xffffff80,%edx
  800420ad2f:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad35:	48 b8 d8 d7 20 04 80 	movabs $0x800420d7d8,%rax
  800420ad3c:	00 00 00 
  800420ad3f:	48 c1 e8 10          	shr    $0x10,%rax
  800420ad43:	89 c2                	mov    %eax,%edx
  800420ad45:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad4c:	00 00 00 
  800420ad4f:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420ad56:	48 b8 d8 d7 20 04 80 	movabs $0x800420d7d8,%rax
  800420ad5d:	00 00 00 
  800420ad60:	48 c1 e8 20          	shr    $0x20,%rax
  800420ad64:	89 c2                	mov    %eax,%edx
  800420ad66:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad6d:	00 00 00 
  800420ad70:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420ad76:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad7d:	00 00 00 
  800420ad80:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420ad87:	00 00 00 
  800420ad8a:	48 b8 e0 d7 20 04 80 	movabs $0x800420d7e0,%rax
  800420ad91:	00 00 00 
  800420ad94:	89 c2                	mov    %eax,%edx
  800420ad96:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ad9d:	00 00 00 
  800420ada0:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ada7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420adae:	00 00 00 
  800420adb1:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420adb8:	08 00 
  800420adba:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420adc1:	00 00 00 
  800420adc4:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420adcb:	83 e2 f8             	and    $0xfffffff8,%edx
  800420adce:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420add4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420addb:	00 00 00 
  800420adde:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ade5:	83 e2 07             	and    $0x7,%edx
  800420ade8:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420adee:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420adf5:	00 00 00 
  800420adf8:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420adff:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae02:	83 ca 0e             	or     $0xe,%edx
  800420ae05:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae0b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae12:	00 00 00 
  800420ae15:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae1c:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae1f:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae25:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae2c:	00 00 00 
  800420ae2f:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae36:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae39:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae3f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae46:	00 00 00 
  800420ae49:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae50:	83 ca 80             	or     $0xffffff80,%edx
  800420ae53:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae59:	48 b8 e0 d7 20 04 80 	movabs $0x800420d7e0,%rax
  800420ae60:	00 00 00 
  800420ae63:	48 c1 e8 10          	shr    $0x10,%rax
  800420ae67:	89 c2                	mov    %eax,%edx
  800420ae69:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae70:	00 00 00 
  800420ae73:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420ae7a:	48 b8 e0 d7 20 04 80 	movabs $0x800420d7e0,%rax
  800420ae81:	00 00 00 
  800420ae84:	48 c1 e8 20          	shr    $0x20,%rax
  800420ae88:	89 c2                	mov    %eax,%edx
  800420ae8a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ae91:	00 00 00 
  800420ae94:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420ae9a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aea1:	00 00 00 
  800420aea4:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420aeab:	00 00 00 
  800420aeae:	48 b8 e6 d7 20 04 80 	movabs $0x800420d7e6,%rax
  800420aeb5:	00 00 00 
  800420aeb8:	89 c2                	mov    %eax,%edx
  800420aeba:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aec1:	00 00 00 
  800420aec4:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420aecb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aed2:	00 00 00 
  800420aed5:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420aedc:	08 00 
  800420aede:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aee5:	00 00 00 
  800420aee8:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420aeef:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aef2:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420aef8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aeff:	00 00 00 
  800420af02:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af09:	83 e2 07             	and    $0x7,%edx
  800420af0c:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af12:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af19:	00 00 00 
  800420af1c:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af23:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af26:	83 ca 0e             	or     $0xe,%edx
  800420af29:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af2f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af36:	00 00 00 
  800420af39:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af40:	83 e2 ef             	and    $0xffffffef,%edx
  800420af43:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af49:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af50:	00 00 00 
  800420af53:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af5a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420af5d:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af63:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af6a:	00 00 00 
  800420af6d:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af74:	83 ca 80             	or     $0xffffff80,%edx
  800420af77:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af7d:	48 b8 e6 d7 20 04 80 	movabs $0x800420d7e6,%rax
  800420af84:	00 00 00 
  800420af87:	48 c1 e8 10          	shr    $0x10,%rax
  800420af8b:	89 c2                	mov    %eax,%edx
  800420af8d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420af94:	00 00 00 
  800420af97:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420af9e:	48 b8 e6 d7 20 04 80 	movabs $0x800420d7e6,%rax
  800420afa5:	00 00 00 
  800420afa8:	48 c1 e8 20          	shr    $0x20,%rax
  800420afac:	89 c2                	mov    %eax,%edx
  800420afae:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420afb5:	00 00 00 
  800420afb8:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420afbe:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420afc5:	00 00 00 
  800420afc8:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420afcf:	00 00 00 
  800420afd2:	48 b8 ea d7 20 04 80 	movabs $0x800420d7ea,%rax
  800420afd9:	00 00 00 
  800420afdc:	89 c2                	mov    %eax,%edx
  800420afde:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420afe5:	00 00 00 
  800420afe8:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420afef:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420aff6:	00 00 00 
  800420aff9:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b000:	08 00 
  800420b002:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b009:	00 00 00 
  800420b00c:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b013:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b016:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b01c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b023:	00 00 00 
  800420b026:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b02d:	83 e2 07             	and    $0x7,%edx
  800420b030:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b036:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b03d:	00 00 00 
  800420b040:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b047:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b04a:	83 ca 0e             	or     $0xe,%edx
  800420b04d:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b053:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b05a:	00 00 00 
  800420b05d:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b064:	83 e2 ef             	and    $0xffffffef,%edx
  800420b067:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b06d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b074:	00 00 00 
  800420b077:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b07e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b081:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b087:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b08e:	00 00 00 
  800420b091:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b098:	83 ca 80             	or     $0xffffff80,%edx
  800420b09b:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0a1:	48 b8 ea d7 20 04 80 	movabs $0x800420d7ea,%rax
  800420b0a8:	00 00 00 
  800420b0ab:	48 c1 e8 10          	shr    $0x10,%rax
  800420b0af:	89 c2                	mov    %eax,%edx
  800420b0b1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b0b8:	00 00 00 
  800420b0bb:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b0c2:	48 b8 ea d7 20 04 80 	movabs $0x800420d7ea,%rax
  800420b0c9:	00 00 00 
  800420b0cc:	48 c1 e8 20          	shr    $0x20,%rax
  800420b0d0:	89 c2                	mov    %eax,%edx
  800420b0d2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b0d9:	00 00 00 
  800420b0dc:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b0e2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b0e9:	00 00 00 
  800420b0ec:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b0f3:	00 00 00 
  800420b0f6:	48 b8 f0 d7 20 04 80 	movabs $0x800420d7f0,%rax
  800420b0fd:	00 00 00 
  800420b100:	89 c2                	mov    %eax,%edx
  800420b102:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b109:	00 00 00 
  800420b10c:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b113:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b11a:	00 00 00 
  800420b11d:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b124:	08 00 
  800420b126:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b12d:	00 00 00 
  800420b130:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b137:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b13a:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b140:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b147:	00 00 00 
  800420b14a:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b151:	83 e2 07             	and    $0x7,%edx
  800420b154:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b15a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b161:	00 00 00 
  800420b164:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b16b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b16e:	83 ca 0e             	or     $0xe,%edx
  800420b171:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b177:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b17e:	00 00 00 
  800420b181:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b188:	83 e2 ef             	and    $0xffffffef,%edx
  800420b18b:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b191:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b198:	00 00 00 
  800420b19b:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1a2:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b1a5:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1ab:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b1b2:	00 00 00 
  800420b1b5:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1bc:	83 ca 80             	or     $0xffffff80,%edx
  800420b1bf:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1c5:	48 b8 f0 d7 20 04 80 	movabs $0x800420d7f0,%rax
  800420b1cc:	00 00 00 
  800420b1cf:	48 c1 e8 10          	shr    $0x10,%rax
  800420b1d3:	89 c2                	mov    %eax,%edx
  800420b1d5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b1dc:	00 00 00 
  800420b1df:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b1e6:	48 b8 f0 d7 20 04 80 	movabs $0x800420d7f0,%rax
  800420b1ed:	00 00 00 
  800420b1f0:	48 c1 e8 20          	shr    $0x20,%rax
  800420b1f4:	89 c2                	mov    %eax,%edx
  800420b1f6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b1fd:	00 00 00 
  800420b200:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b206:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b20d:	00 00 00 
  800420b210:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b217:	00 00 00 
  800420b21a:	48 b8 f6 d7 20 04 80 	movabs $0x800420d7f6,%rax
  800420b221:	00 00 00 
  800420b224:	89 c2                	mov    %eax,%edx
  800420b226:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b22d:	00 00 00 
  800420b230:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b237:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b23e:	00 00 00 
  800420b241:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b248:	08 00 
  800420b24a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b251:	00 00 00 
  800420b254:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b25b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b25e:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b264:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b26b:	00 00 00 
  800420b26e:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b275:	83 e2 07             	and    $0x7,%edx
  800420b278:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b27e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b285:	00 00 00 
  800420b288:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b28f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b292:	83 ca 0e             	or     $0xe,%edx
  800420b295:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b29b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b2a2:	00 00 00 
  800420b2a5:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2ac:	83 e2 ef             	and    $0xffffffef,%edx
  800420b2af:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b2b5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b2bc:	00 00 00 
  800420b2bf:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2c6:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b2c9:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b2cf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b2d6:	00 00 00 
  800420b2d9:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2e0:	83 ca 80             	or     $0xffffff80,%edx
  800420b2e3:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b2e9:	48 b8 f6 d7 20 04 80 	movabs $0x800420d7f6,%rax
  800420b2f0:	00 00 00 
  800420b2f3:	48 c1 e8 10          	shr    $0x10,%rax
  800420b2f7:	89 c2                	mov    %eax,%edx
  800420b2f9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b300:	00 00 00 
  800420b303:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b30a:	48 b8 f6 d7 20 04 80 	movabs $0x800420d7f6,%rax
  800420b311:	00 00 00 
  800420b314:	48 c1 e8 20          	shr    $0x20,%rax
  800420b318:	89 c2                	mov    %eax,%edx
  800420b31a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b321:	00 00 00 
  800420b324:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b32a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b331:	00 00 00 
  800420b334:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b33b:	00 00 00 
  800420b33e:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420b345:	00 00 00 
  800420b348:	89 c2                	mov    %eax,%edx
  800420b34a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b351:	00 00 00 
  800420b354:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b35b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b362:	00 00 00 
  800420b365:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b36c:	08 00 
  800420b36e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b375:	00 00 00 
  800420b378:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b37f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b382:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b388:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b38f:	00 00 00 
  800420b392:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b399:	83 e2 07             	and    $0x7,%edx
  800420b39c:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b3a2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3a9:	00 00 00 
  800420b3ac:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b3b3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b3b6:	83 ca 0e             	or     $0xe,%edx
  800420b3b9:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b3bf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3c6:	00 00 00 
  800420b3c9:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b3d0:	83 e2 ef             	and    $0xffffffef,%edx
  800420b3d3:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b3d9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3e0:	00 00 00 
  800420b3e3:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b3ea:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b3ed:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b3f3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b3fa:	00 00 00 
  800420b3fd:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b404:	83 ca 80             	or     $0xffffff80,%edx
  800420b407:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b40d:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420b414:	00 00 00 
  800420b417:	48 c1 e8 10          	shr    $0x10,%rax
  800420b41b:	89 c2                	mov    %eax,%edx
  800420b41d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b424:	00 00 00 
  800420b427:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b42e:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420b435:	00 00 00 
  800420b438:	48 c1 e8 20          	shr    $0x20,%rax
  800420b43c:	89 c2                	mov    %eax,%edx
  800420b43e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b445:	00 00 00 
  800420b448:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b44e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b455:	00 00 00 
  800420b458:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b45f:	00 00 00 
  800420b462:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420b469:	00 00 00 
  800420b46c:	89 c2                	mov    %eax,%edx
  800420b46e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b475:	00 00 00 
  800420b478:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b47f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b486:	00 00 00 
  800420b489:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b490:	08 00 
  800420b492:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b499:	00 00 00 
  800420b49c:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b4a3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b4a6:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b4ac:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4b3:	00 00 00 
  800420b4b6:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b4bd:	83 e2 07             	and    $0x7,%edx
  800420b4c0:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b4c6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4cd:	00 00 00 
  800420b4d0:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b4d7:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b4da:	83 ca 0e             	or     $0xe,%edx
  800420b4dd:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b4e3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b4ea:	00 00 00 
  800420b4ed:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b4f4:	83 e2 ef             	and    $0xffffffef,%edx
  800420b4f7:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b4fd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b504:	00 00 00 
  800420b507:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b50e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b511:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b517:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b51e:	00 00 00 
  800420b521:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b528:	83 ca 80             	or     $0xffffff80,%edx
  800420b52b:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b531:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420b538:	00 00 00 
  800420b53b:	48 c1 e8 10          	shr    $0x10,%rax
  800420b53f:	89 c2                	mov    %eax,%edx
  800420b541:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b548:	00 00 00 
  800420b54b:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b552:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420b559:	00 00 00 
  800420b55c:	48 c1 e8 20          	shr    $0x20,%rax
  800420b560:	89 c2                	mov    %eax,%edx
  800420b562:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b569:	00 00 00 
  800420b56c:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b572:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b579:	00 00 00 
  800420b57c:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b583:	00 00 00 
  800420b586:	48 b8 08 d8 20 04 80 	movabs $0x800420d808,%rax
  800420b58d:	00 00 00 
  800420b590:	89 c2                	mov    %eax,%edx
  800420b592:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b599:	00 00 00 
  800420b59c:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b5a3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5aa:	00 00 00 
  800420b5ad:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b5b4:	08 00 
  800420b5b6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5bd:	00 00 00 
  800420b5c0:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b5c7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b5ca:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b5d0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5d7:	00 00 00 
  800420b5da:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b5e1:	83 e2 07             	and    $0x7,%edx
  800420b5e4:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b5ea:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b5f1:	00 00 00 
  800420b5f4:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b5fb:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b5fe:	83 ca 0e             	or     $0xe,%edx
  800420b601:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b607:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b60e:	00 00 00 
  800420b611:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b618:	83 e2 ef             	and    $0xffffffef,%edx
  800420b61b:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b621:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b628:	00 00 00 
  800420b62b:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b632:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b635:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b63b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b642:	00 00 00 
  800420b645:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b64c:	83 ca 80             	or     $0xffffff80,%edx
  800420b64f:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b655:	48 b8 08 d8 20 04 80 	movabs $0x800420d808,%rax
  800420b65c:	00 00 00 
  800420b65f:	48 c1 e8 10          	shr    $0x10,%rax
  800420b663:	89 c2                	mov    %eax,%edx
  800420b665:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b66c:	00 00 00 
  800420b66f:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b676:	48 b8 08 d8 20 04 80 	movabs $0x800420d808,%rax
  800420b67d:	00 00 00 
  800420b680:	48 c1 e8 20          	shr    $0x20,%rax
  800420b684:	89 c2                	mov    %eax,%edx
  800420b686:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b68d:	00 00 00 
  800420b690:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b696:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b69d:	00 00 00 
  800420b6a0:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b6a7:	00 00 00 
  800420b6aa:	48 b8 0e d8 20 04 80 	movabs $0x800420d80e,%rax
  800420b6b1:	00 00 00 
  800420b6b4:	89 c2                	mov    %eax,%edx
  800420b6b6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b6bd:	00 00 00 
  800420b6c0:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b6c7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b6ce:	00 00 00 
  800420b6d1:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b6d8:	08 00 
  800420b6da:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b6e1:	00 00 00 
  800420b6e4:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b6eb:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b6ee:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b6f4:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b6fb:	00 00 00 
  800420b6fe:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b705:	83 e2 07             	and    $0x7,%edx
  800420b708:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b70e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b715:	00 00 00 
  800420b718:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b71f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b722:	83 ca 0e             	or     $0xe,%edx
  800420b725:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b72b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b732:	00 00 00 
  800420b735:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b73c:	83 e2 ef             	and    $0xffffffef,%edx
  800420b73f:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b745:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b74c:	00 00 00 
  800420b74f:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b756:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b759:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b75f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b766:	00 00 00 
  800420b769:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b770:	83 ca 80             	or     $0xffffff80,%edx
  800420b773:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b779:	48 b8 0e d8 20 04 80 	movabs $0x800420d80e,%rax
  800420b780:	00 00 00 
  800420b783:	48 c1 e8 10          	shr    $0x10,%rax
  800420b787:	89 c2                	mov    %eax,%edx
  800420b789:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b790:	00 00 00 
  800420b793:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b79a:	48 b8 0e d8 20 04 80 	movabs $0x800420d80e,%rax
  800420b7a1:	00 00 00 
  800420b7a4:	48 c1 e8 20          	shr    $0x20,%rax
  800420b7a8:	89 c2                	mov    %eax,%edx
  800420b7aa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b7b1:	00 00 00 
  800420b7b4:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b7ba:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b7c1:	00 00 00 
  800420b7c4:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b7cb:	00 00 00 
  800420b7ce:	48 b8 14 d8 20 04 80 	movabs $0x800420d814,%rax
  800420b7d5:	00 00 00 
  800420b7d8:	89 c2                	mov    %eax,%edx
  800420b7da:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b7e1:	00 00 00 
  800420b7e4:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b7eb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b7f2:	00 00 00 
  800420b7f5:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b7fc:	08 00 
  800420b7fe:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b805:	00 00 00 
  800420b808:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b80f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b812:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b818:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b81f:	00 00 00 
  800420b822:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b829:	83 e2 07             	and    $0x7,%edx
  800420b82c:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b832:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b839:	00 00 00 
  800420b83c:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b843:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b846:	83 ca 0e             	or     $0xe,%edx
  800420b849:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b84f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b856:	00 00 00 
  800420b859:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b860:	83 e2 ef             	and    $0xffffffef,%edx
  800420b863:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b869:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b870:	00 00 00 
  800420b873:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b87a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b87d:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b883:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b88a:	00 00 00 
  800420b88d:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b894:	83 ca 80             	or     $0xffffff80,%edx
  800420b897:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b89d:	48 b8 14 d8 20 04 80 	movabs $0x800420d814,%rax
  800420b8a4:	00 00 00 
  800420b8a7:	48 c1 e8 10          	shr    $0x10,%rax
  800420b8ab:	89 c2                	mov    %eax,%edx
  800420b8ad:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b8b4:	00 00 00 
  800420b8b7:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b8be:	48 b8 14 d8 20 04 80 	movabs $0x800420d814,%rax
  800420b8c5:	00 00 00 
  800420b8c8:	48 c1 e8 20          	shr    $0x20,%rax
  800420b8cc:	89 c2                	mov    %eax,%edx
  800420b8ce:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b8d5:	00 00 00 
  800420b8d8:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b8de:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b8e5:	00 00 00 
  800420b8e8:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b8ef:	00 00 00 
  800420b8f2:	48 b8 1a d8 20 04 80 	movabs $0x800420d81a,%rax
  800420b8f9:	00 00 00 
  800420b8fc:	89 c2                	mov    %eax,%edx
  800420b8fe:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b905:	00 00 00 
  800420b908:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b90f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b916:	00 00 00 
  800420b919:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b920:	08 00 
  800420b922:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b929:	00 00 00 
  800420b92c:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b933:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b936:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b93c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b943:	00 00 00 
  800420b946:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b94d:	83 e2 07             	and    $0x7,%edx
  800420b950:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b956:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b95d:	00 00 00 
  800420b960:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b967:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b96a:	83 ca 0e             	or     $0xe,%edx
  800420b96d:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b973:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b97a:	00 00 00 
  800420b97d:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b984:	83 e2 ef             	and    $0xffffffef,%edx
  800420b987:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b98d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b994:	00 00 00 
  800420b997:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b99e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b9a1:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9a7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b9ae:	00 00 00 
  800420b9b1:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9b8:	83 ca 80             	or     $0xffffff80,%edx
  800420b9bb:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9c1:	48 b8 1a d8 20 04 80 	movabs $0x800420d81a,%rax
  800420b9c8:	00 00 00 
  800420b9cb:	48 c1 e8 10          	shr    $0x10,%rax
  800420b9cf:	89 c2                	mov    %eax,%edx
  800420b9d1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b9d8:	00 00 00 
  800420b9db:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420b9e2:	48 b8 1a d8 20 04 80 	movabs $0x800420d81a,%rax
  800420b9e9:	00 00 00 
  800420b9ec:	48 c1 e8 20          	shr    $0x20,%rax
  800420b9f0:	89 c2                	mov    %eax,%edx
  800420b9f2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420b9f9:	00 00 00 
  800420b9fc:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba02:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba09:	00 00 00 
  800420ba0c:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba13:	00 00 00 
  800420ba16:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420ba1d:	00 00 00 
  800420ba20:	89 c2                	mov    %eax,%edx
  800420ba22:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba29:	00 00 00 
  800420ba2c:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420ba33:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba3a:	00 00 00 
  800420ba3d:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420ba44:	08 00 
  800420ba46:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba4d:	00 00 00 
  800420ba50:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420ba57:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ba5a:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420ba60:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba67:	00 00 00 
  800420ba6a:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420ba71:	83 e2 07             	and    $0x7,%edx
  800420ba74:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420ba7a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba81:	00 00 00 
  800420ba84:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420ba8b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ba8e:	83 ca 0e             	or     $0xe,%edx
  800420ba91:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420ba97:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420ba9e:	00 00 00 
  800420baa1:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420baa8:	83 e2 ef             	and    $0xffffffef,%edx
  800420baab:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bab1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bab8:	00 00 00 
  800420babb:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bac2:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bac5:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bacb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bad2:	00 00 00 
  800420bad5:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420badc:	83 ca 80             	or     $0xffffff80,%edx
  800420badf:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bae5:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420baec:	00 00 00 
  800420baef:	48 c1 e8 10          	shr    $0x10,%rax
  800420baf3:	89 c2                	mov    %eax,%edx
  800420baf5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bafc:	00 00 00 
  800420baff:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb06:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420bb0d:	00 00 00 
  800420bb10:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb14:	89 c2                	mov    %eax,%edx
  800420bb16:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb1d:	00 00 00 
  800420bb20:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bb26:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb2d:	00 00 00 
  800420bb30:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bb37:	00 00 00 
  800420bb3a:	48 b8 26 d8 20 04 80 	movabs $0x800420d826,%rax
  800420bb41:	00 00 00 
  800420bb44:	89 c2                	mov    %eax,%edx
  800420bb46:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb4d:	00 00 00 
  800420bb50:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bb57:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb5e:	00 00 00 
  800420bb61:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bb68:	08 00 
  800420bb6a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb71:	00 00 00 
  800420bb74:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bb7b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bb7e:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bb84:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bb8b:	00 00 00 
  800420bb8e:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bb95:	83 e2 07             	and    $0x7,%edx
  800420bb98:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bb9e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bba5:	00 00 00 
  800420bba8:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bbaf:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bbb2:	83 ca 0e             	or     $0xe,%edx
  800420bbb5:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bbbb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bbc2:	00 00 00 
  800420bbc5:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bbcc:	83 e2 ef             	and    $0xffffffef,%edx
  800420bbcf:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bbd5:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bbdc:	00 00 00 
  800420bbdf:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bbe6:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bbe9:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bbef:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bbf6:	00 00 00 
  800420bbf9:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc00:	83 ca 80             	or     $0xffffff80,%edx
  800420bc03:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc09:	48 b8 26 d8 20 04 80 	movabs $0x800420d826,%rax
  800420bc10:	00 00 00 
  800420bc13:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc17:	89 c2                	mov    %eax,%edx
  800420bc19:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc20:	00 00 00 
  800420bc23:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bc2a:	48 b8 26 d8 20 04 80 	movabs $0x800420d826,%rax
  800420bc31:	00 00 00 
  800420bc34:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc38:	89 c2                	mov    %eax,%edx
  800420bc3a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc41:	00 00 00 
  800420bc44:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bc4a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc51:	00 00 00 
  800420bc54:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bc5b:	00 00 00 
  800420bc5e:	48 b8 2c d8 20 04 80 	movabs $0x800420d82c,%rax
  800420bc65:	00 00 00 
  800420bc68:	89 c2                	mov    %eax,%edx
  800420bc6a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc71:	00 00 00 
  800420bc74:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bc7b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc82:	00 00 00 
  800420bc85:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bc8c:	08 00 
  800420bc8e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bc95:	00 00 00 
  800420bc98:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bc9f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bca2:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bca8:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bcaf:	00 00 00 
  800420bcb2:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bcb9:	83 e2 07             	and    $0x7,%edx
  800420bcbc:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bcc2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bcc9:	00 00 00 
  800420bccc:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bcd3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bcd6:	83 ca 0e             	or     $0xe,%edx
  800420bcd9:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bcdf:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bce6:	00 00 00 
  800420bce9:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bcf0:	83 e2 ef             	and    $0xffffffef,%edx
  800420bcf3:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bcf9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd00:	00 00 00 
  800420bd03:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd0a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd0d:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd13:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd1a:	00 00 00 
  800420bd1d:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd24:	83 ca 80             	or     $0xffffff80,%edx
  800420bd27:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd2d:	48 b8 2c d8 20 04 80 	movabs $0x800420d82c,%rax
  800420bd34:	00 00 00 
  800420bd37:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd3b:	89 c2                	mov    %eax,%edx
  800420bd3d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd44:	00 00 00 
  800420bd47:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bd4e:	48 b8 2c d8 20 04 80 	movabs $0x800420d82c,%rax
  800420bd55:	00 00 00 
  800420bd58:	48 c1 e8 20          	shr    $0x20,%rax
  800420bd5c:	89 c2                	mov    %eax,%edx
  800420bd5e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd65:	00 00 00 
  800420bd68:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bd6e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd75:	00 00 00 
  800420bd78:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bd7f:	00 00 00 
  800420bd82:	48 b8 32 d8 20 04 80 	movabs $0x800420d832,%rax
  800420bd89:	00 00 00 
  800420bd8c:	89 c2                	mov    %eax,%edx
  800420bd8e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bd95:	00 00 00 
  800420bd98:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420bd9f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bda6:	00 00 00 
  800420bda9:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420bdb0:	08 00 
  800420bdb2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bdb9:	00 00 00 
  800420bdbc:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420bdc3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bdc6:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420bdcc:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bdd3:	00 00 00 
  800420bdd6:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420bddd:	83 e2 07             	and    $0x7,%edx
  800420bde0:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420bde6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bded:	00 00 00 
  800420bdf0:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420bdf7:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bdfa:	83 ca 0e             	or     $0xe,%edx
  800420bdfd:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be03:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be0a:	00 00 00 
  800420be0d:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be14:	83 e2 ef             	and    $0xffffffef,%edx
  800420be17:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be1d:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be24:	00 00 00 
  800420be27:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be2e:	83 e2 9f             	and    $0xffffff9f,%edx
  800420be31:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be37:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be3e:	00 00 00 
  800420be41:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be48:	83 ca 80             	or     $0xffffff80,%edx
  800420be4b:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be51:	48 b8 32 d8 20 04 80 	movabs $0x800420d832,%rax
  800420be58:	00 00 00 
  800420be5b:	48 c1 e8 10          	shr    $0x10,%rax
  800420be5f:	89 c2                	mov    %eax,%edx
  800420be61:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be68:	00 00 00 
  800420be6b:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420be72:	48 b8 32 d8 20 04 80 	movabs $0x800420d832,%rax
  800420be79:	00 00 00 
  800420be7c:	48 c1 e8 20          	shr    $0x20,%rax
  800420be80:	89 c2                	mov    %eax,%edx
  800420be82:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be89:	00 00 00 
  800420be8c:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420be92:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420be99:	00 00 00 
  800420be9c:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bea3:	00 00 00 
  800420bea6:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420bead:	00 00 00 
  800420beb0:	89 c2                	mov    %eax,%edx
  800420beb2:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420beb9:	00 00 00 
  800420bebc:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bec3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420beca:	00 00 00 
  800420becd:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bed4:	08 00 
  800420bed6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bedd:	00 00 00 
  800420bee0:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bee7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420beea:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bef0:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bef7:	00 00 00 
  800420befa:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf01:	83 e2 07             	and    $0x7,%edx
  800420bf04:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf0a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf11:	00 00 00 
  800420bf14:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf1b:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf1e:	83 ca 0e             	or     $0xe,%edx
  800420bf21:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf27:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf2e:	00 00 00 
  800420bf31:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf38:	83 e2 ef             	and    $0xffffffef,%edx
  800420bf3b:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf41:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf48:	00 00 00 
  800420bf4b:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf52:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bf55:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf5b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf62:	00 00 00 
  800420bf65:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf6c:	83 ca 80             	or     $0xffffff80,%edx
  800420bf6f:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf75:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420bf7c:	00 00 00 
  800420bf7f:	48 c1 e8 10          	shr    $0x10,%rax
  800420bf83:	89 c2                	mov    %eax,%edx
  800420bf85:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bf8c:	00 00 00 
  800420bf8f:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420bf96:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420bf9d:	00 00 00 
  800420bfa0:	48 c1 e8 20          	shr    $0x20,%rax
  800420bfa4:	89 c2                	mov    %eax,%edx
  800420bfa6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bfad:	00 00 00 
  800420bfb0:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420bfb6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bfbd:	00 00 00 
  800420bfc0:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420bfc7:	00 00 00 
  800420bfca:	48 b8 3e d8 20 04 80 	movabs $0x800420d83e,%rax
  800420bfd1:	00 00 00 
  800420bfd4:	89 c2                	mov    %eax,%edx
  800420bfd6:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bfdd:	00 00 00 
  800420bfe0:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420bfe7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420bfee:	00 00 00 
  800420bff1:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420bff8:	08 00 
  800420bffa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c001:	00 00 00 
  800420c004:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c00b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c00e:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c014:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c01b:	00 00 00 
  800420c01e:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c025:	83 e2 07             	and    $0x7,%edx
  800420c028:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c02e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c035:	00 00 00 
  800420c038:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c03f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c042:	83 ca 0e             	or     $0xe,%edx
  800420c045:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c04b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c052:	00 00 00 
  800420c055:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c05c:	83 e2 ef             	and    $0xffffffef,%edx
  800420c05f:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c065:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c06c:	00 00 00 
  800420c06f:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c076:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c079:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c07f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c086:	00 00 00 
  800420c089:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c090:	83 ca 80             	or     $0xffffff80,%edx
  800420c093:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c099:	48 b8 3e d8 20 04 80 	movabs $0x800420d83e,%rax
  800420c0a0:	00 00 00 
  800420c0a3:	48 c1 e8 10          	shr    $0x10,%rax
  800420c0a7:	89 c2                	mov    %eax,%edx
  800420c0a9:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c0b0:	00 00 00 
  800420c0b3:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c0ba:	48 b8 3e d8 20 04 80 	movabs $0x800420d83e,%rax
  800420c0c1:	00 00 00 
  800420c0c4:	48 c1 e8 20          	shr    $0x20,%rax
  800420c0c8:	89 c2                	mov    %eax,%edx
  800420c0ca:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c0d1:	00 00 00 
  800420c0d4:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c0da:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c0e1:	00 00 00 
  800420c0e4:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c0eb:	00 00 00 
  800420c0ee:	48 b8 44 d8 20 04 80 	movabs $0x800420d844,%rax
  800420c0f5:	00 00 00 
  800420c0f8:	89 c2                	mov    %eax,%edx
  800420c0fa:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c101:	00 00 00 
  800420c104:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c10b:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c112:	00 00 00 
  800420c115:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c11c:	08 00 
  800420c11e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c125:	00 00 00 
  800420c128:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c12f:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c132:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c138:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c13f:	00 00 00 
  800420c142:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c149:	83 e2 07             	and    $0x7,%edx
  800420c14c:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c152:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c159:	00 00 00 
  800420c15c:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c163:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c166:	83 ca 0e             	or     $0xe,%edx
  800420c169:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c16f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c176:	00 00 00 
  800420c179:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c180:	83 e2 ef             	and    $0xffffffef,%edx
  800420c183:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c189:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c190:	00 00 00 
  800420c193:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c19a:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c19d:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1a3:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c1aa:	00 00 00 
  800420c1ad:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1b4:	83 ca 80             	or     $0xffffff80,%edx
  800420c1b7:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1bd:	48 b8 44 d8 20 04 80 	movabs $0x800420d844,%rax
  800420c1c4:	00 00 00 
  800420c1c7:	48 c1 e8 10          	shr    $0x10,%rax
  800420c1cb:	89 c2                	mov    %eax,%edx
  800420c1cd:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c1d4:	00 00 00 
  800420c1d7:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c1de:	48 b8 44 d8 20 04 80 	movabs $0x800420d844,%rax
  800420c1e5:	00 00 00 
  800420c1e8:	48 c1 e8 20          	shr    $0x20,%rax
  800420c1ec:	89 c2                	mov    %eax,%edx
  800420c1ee:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c1f5:	00 00 00 
  800420c1f8:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c1fe:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c205:	00 00 00 
  800420c208:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c20f:	00 00 00 
  800420c212:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420c219:	00 00 00 
  800420c21c:	89 c2                	mov    %eax,%edx
  800420c21e:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c225:	00 00 00 
  800420c228:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c22f:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c236:	00 00 00 
  800420c239:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c240:	08 00 
  800420c242:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c249:	00 00 00 
  800420c24c:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c253:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c256:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c25c:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c263:	00 00 00 
  800420c266:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c26d:	83 e2 07             	and    $0x7,%edx
  800420c270:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c276:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c27d:	00 00 00 
  800420c280:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c287:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c28a:	83 ca 0e             	or     $0xe,%edx
  800420c28d:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c293:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c29a:	00 00 00 
  800420c29d:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2a4:	83 e2 ef             	and    $0xffffffef,%edx
  800420c2a7:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c2ad:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c2b4:	00 00 00 
  800420c2b7:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2be:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c2c1:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c2c7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c2ce:	00 00 00 
  800420c2d1:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2d8:	83 ca 80             	or     $0xffffff80,%edx
  800420c2db:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c2e1:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420c2e8:	00 00 00 
  800420c2eb:	48 c1 e8 10          	shr    $0x10,%rax
  800420c2ef:	89 c2                	mov    %eax,%edx
  800420c2f1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c2f8:	00 00 00 
  800420c2fb:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c302:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420c309:	00 00 00 
  800420c30c:	48 c1 e8 20          	shr    $0x20,%rax
  800420c310:	89 c2                	mov    %eax,%edx
  800420c312:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c319:	00 00 00 
  800420c31c:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c322:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c329:	00 00 00 
  800420c32c:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c333:	00 00 00 
  800420c336:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420c33d:	00 00 00 
  800420c340:	89 c2                	mov    %eax,%edx
  800420c342:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c349:	00 00 00 
  800420c34c:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c353:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c35a:	00 00 00 
  800420c35d:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c364:	08 00 
  800420c366:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c36d:	00 00 00 
  800420c370:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c377:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c37a:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c380:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c387:	00 00 00 
  800420c38a:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c391:	83 e2 07             	and    $0x7,%edx
  800420c394:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c39a:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3a1:	00 00 00 
  800420c3a4:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c3ab:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c3ae:	83 ca 0e             	or     $0xe,%edx
  800420c3b1:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c3b7:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3be:	00 00 00 
  800420c3c1:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c3c8:	83 e2 ef             	and    $0xffffffef,%edx
  800420c3cb:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c3d1:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3d8:	00 00 00 
  800420c3db:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c3e2:	83 ca 60             	or     $0x60,%edx
  800420c3e5:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c3eb:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c3f2:	00 00 00 
  800420c3f5:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c3fc:	83 ca 80             	or     $0xffffff80,%edx
  800420c3ff:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c405:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420c40c:	00 00 00 
  800420c40f:	48 c1 e8 10          	shr    $0x10,%rax
  800420c413:	89 c2                	mov    %eax,%edx
  800420c415:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c41c:	00 00 00 
  800420c41f:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c426:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420c42d:	00 00 00 
  800420c430:	48 c1 e8 20          	shr    $0x20,%rax
  800420c434:	89 c2                	mov    %eax,%edx
  800420c436:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c43d:	00 00 00 
  800420c440:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c446:	48 b8 80 b2 4d 04 80 	movabs $0x80044db280,%rax
  800420c44d:	00 00 00 
  800420c450:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c457:	00 00 00 
  800420c45a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c461:	00 00 00 
  800420c464:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c469:	48 ba 80 b2 4d 04 80 	movabs $0x80044db280,%rdx
  800420c470:	00 00 00 
  800420c473:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c47a:	00 00 00 
  800420c47d:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c481:	48 b8 8f c4 20 04 80 	movabs $0x800420c48f,%rax
  800420c488:	00 00 00 
  800420c48b:	ff d0                	callq  *%rax
  800420c48d:	c9                   	leaveq 
  800420c48e:	c3                   	retq   

000000800420c48f <trap_init_percpu>:
  800420c48f:	55                   	push   %rbp
  800420c490:	48 89 e5             	mov    %rsp,%rbp
  800420c493:	53                   	push   %rbx
  800420c494:	48 83 ec 18          	sub    $0x18,%rsp
  800420c498:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c49f:	00 00 00 
  800420c4a2:	ff d0                	callq  *%rax
  800420c4a4:	01 c0                	add    %eax,%eax
  800420c4a6:	83 c0 05             	add    $0x5,%eax
  800420c4a9:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c4ac:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c4b3:	00 00 00 
  800420c4b6:	ff d0                	callq  *%rax
  800420c4b8:	89 c3                	mov    %eax,%ebx
  800420c4ba:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c4c1:	00 00 00 
  800420c4c4:	ff d0                	callq  *%rax
  800420c4c6:	89 c2                	mov    %eax,%edx
  800420c4c8:	89 d0                	mov    %edx,%eax
  800420c4ca:	01 c0                	add    %eax,%eax
  800420c4cc:	01 d0                	add    %edx,%eax
  800420c4ce:	c1 e0 0f             	shl    $0xf,%eax
  800420c4d1:	48 98                	cltq   
  800420c4d3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c4da:	00 00 00 
  800420c4dd:	48 29 c2             	sub    %rax,%rdx
  800420c4e0:	48 89 d0             	mov    %rdx,%rax
  800420c4e3:	48 89 c2             	mov    %rax,%rdx
  800420c4e6:	48 b9 20 c0 6d 04 80 	movabs $0x80046dc020,%rcx
  800420c4ed:	00 00 00 
  800420c4f0:	48 63 c3             	movslq %ebx,%rax
  800420c4f3:	48 c1 e0 03          	shl    $0x3,%rax
  800420c4f7:	48 89 c6             	mov    %rax,%rsi
  800420c4fa:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c4fe:	48 01 f0             	add    %rsi,%rax
  800420c501:	48 01 c8             	add    %rcx,%rax
  800420c504:	48 83 c0 10          	add    $0x10,%rax
  800420c508:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c50c:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c513:	00 00 00 
  800420c516:	48 8b 00             	mov    (%rax),%rax
  800420c519:	48 c1 f8 10          	sar    $0x10,%rax
  800420c51d:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c521:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c528:	00 00 00 
  800420c52b:	ff d0                	callq  *%rax
  800420c52d:	c1 e0 04             	shl    $0x4,%eax
  800420c530:	48 98                	cltq   
  800420c532:	48 01 d8             	add    %rbx,%rax
  800420c535:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c53a:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c541:	00 00 00 
  800420c544:	48 8b 00             	mov    (%rax),%rax
  800420c547:	48 c1 f8 10          	sar    $0x10,%rax
  800420c54b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c54f:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c556:	00 00 00 
  800420c559:	ff d0                	callq  *%rax
  800420c55b:	c1 e0 04             	shl    $0x4,%eax
  800420c55e:	48 98                	cltq   
  800420c560:	48 01 d8             	add    %rbx,%rax
  800420c563:	48 89 c3             	mov    %rax,%rbx
  800420c566:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c56d:	00 00 00 
  800420c570:	ff d0                	callq  *%rax
  800420c572:	48 98                	cltq   
  800420c574:	48 c1 e0 03          	shl    $0x3,%rax
  800420c578:	48 89 c2             	mov    %rax,%rdx
  800420c57b:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c57f:	48 01 d0             	add    %rdx,%rax
  800420c582:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c586:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c58d:	00 00 00 
  800420c590:	48 01 d0             	add    %rdx,%rax
  800420c593:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c597:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c59e:	00 00 00 
  800420c5a1:	48 8b 00             	mov    (%rax),%rax
  800420c5a4:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5a8:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5ac:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c5b3:	00 00 00 
  800420c5b6:	ff d0                	callq  *%rax
  800420c5b8:	c1 e0 04             	shl    $0x4,%eax
  800420c5bb:	48 98                	cltq   
  800420c5bd:	48 01 d8             	add    %rbx,%rax
  800420c5c0:	48 89 c3             	mov    %rax,%rbx
  800420c5c3:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c5ca:	00 00 00 
  800420c5cd:	ff d0                	callq  *%rax
  800420c5cf:	48 98                	cltq   
  800420c5d1:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5d5:	48 89 c2             	mov    %rax,%rdx
  800420c5d8:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5dc:	48 01 d0             	add    %rdx,%rax
  800420c5df:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c5e3:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c5ea:	00 00 00 
  800420c5ed:	48 01 d0             	add    %rdx,%rax
  800420c5f0:	48 c1 e8 10          	shr    $0x10,%rax
  800420c5f4:	88 43 04             	mov    %al,0x4(%rbx)
  800420c5f7:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c5fe:	00 00 00 
  800420c601:	48 8b 00             	mov    (%rax),%rax
  800420c604:	48 c1 f8 10          	sar    $0x10,%rax
  800420c608:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c60c:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c613:	00 00 00 
  800420c616:	ff d0                	callq  *%rax
  800420c618:	c1 e0 04             	shl    $0x4,%eax
  800420c61b:	48 98                	cltq   
  800420c61d:	48 01 d8             	add    %rbx,%rax
  800420c620:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c624:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c627:	83 ca 09             	or     $0x9,%edx
  800420c62a:	88 50 05             	mov    %dl,0x5(%rax)
  800420c62d:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c634:	00 00 00 
  800420c637:	48 8b 00             	mov    (%rax),%rax
  800420c63a:	48 c1 f8 10          	sar    $0x10,%rax
  800420c63e:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c642:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c649:	00 00 00 
  800420c64c:	ff d0                	callq  *%rax
  800420c64e:	c1 e0 04             	shl    $0x4,%eax
  800420c651:	48 98                	cltq   
  800420c653:	48 01 d8             	add    %rbx,%rax
  800420c656:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c65a:	83 e2 ef             	and    $0xffffffef,%edx
  800420c65d:	88 50 05             	mov    %dl,0x5(%rax)
  800420c660:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c667:	00 00 00 
  800420c66a:	48 8b 00             	mov    (%rax),%rax
  800420c66d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c671:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c675:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c67c:	00 00 00 
  800420c67f:	ff d0                	callq  *%rax
  800420c681:	c1 e0 04             	shl    $0x4,%eax
  800420c684:	48 98                	cltq   
  800420c686:	48 01 d8             	add    %rbx,%rax
  800420c689:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c68d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c690:	88 50 05             	mov    %dl,0x5(%rax)
  800420c693:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c69a:	00 00 00 
  800420c69d:	48 8b 00             	mov    (%rax),%rax
  800420c6a0:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6a4:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6a8:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c6af:	00 00 00 
  800420c6b2:	ff d0                	callq  *%rax
  800420c6b4:	c1 e0 04             	shl    $0x4,%eax
  800420c6b7:	48 98                	cltq   
  800420c6b9:	48 01 d8             	add    %rbx,%rax
  800420c6bc:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6c0:	83 ca 80             	or     $0xffffff80,%edx
  800420c6c3:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6c6:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c6cd:	00 00 00 
  800420c6d0:	48 8b 00             	mov    (%rax),%rax
  800420c6d3:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6d7:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6db:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c6e2:	00 00 00 
  800420c6e5:	ff d0                	callq  *%rax
  800420c6e7:	c1 e0 04             	shl    $0x4,%eax
  800420c6ea:	48 98                	cltq   
  800420c6ec:	48 01 d8             	add    %rbx,%rax
  800420c6ef:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c6f3:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c6f6:	88 50 06             	mov    %dl,0x6(%rax)
  800420c6f9:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c700:	00 00 00 
  800420c703:	48 8b 00             	mov    (%rax),%rax
  800420c706:	48 c1 f8 10          	sar    $0x10,%rax
  800420c70a:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c70e:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c715:	00 00 00 
  800420c718:	ff d0                	callq  *%rax
  800420c71a:	c1 e0 04             	shl    $0x4,%eax
  800420c71d:	48 98                	cltq   
  800420c71f:	48 01 d8             	add    %rbx,%rax
  800420c722:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c726:	83 e2 ef             	and    $0xffffffef,%edx
  800420c729:	88 50 06             	mov    %dl,0x6(%rax)
  800420c72c:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c733:	00 00 00 
  800420c736:	48 8b 00             	mov    (%rax),%rax
  800420c739:	48 c1 f8 10          	sar    $0x10,%rax
  800420c73d:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c741:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c748:	00 00 00 
  800420c74b:	ff d0                	callq  *%rax
  800420c74d:	c1 e0 04             	shl    $0x4,%eax
  800420c750:	48 98                	cltq   
  800420c752:	48 01 d8             	add    %rbx,%rax
  800420c755:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c759:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c75c:	88 50 06             	mov    %dl,0x6(%rax)
  800420c75f:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c766:	00 00 00 
  800420c769:	48 8b 00             	mov    (%rax),%rax
  800420c76c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c770:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c774:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c77b:	00 00 00 
  800420c77e:	ff d0                	callq  *%rax
  800420c780:	c1 e0 04             	shl    $0x4,%eax
  800420c783:	48 98                	cltq   
  800420c785:	48 01 d8             	add    %rbx,%rax
  800420c788:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c78c:	83 e2 7f             	and    $0x7f,%edx
  800420c78f:	88 50 06             	mov    %dl,0x6(%rax)
  800420c792:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c799:	00 00 00 
  800420c79c:	48 8b 00             	mov    (%rax),%rax
  800420c79f:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7a3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7a7:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c7ae:	00 00 00 
  800420c7b1:	ff d0                	callq  *%rax
  800420c7b3:	c1 e0 04             	shl    $0x4,%eax
  800420c7b6:	48 98                	cltq   
  800420c7b8:	48 01 d8             	add    %rbx,%rax
  800420c7bb:	48 89 c3             	mov    %rax,%rbx
  800420c7be:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c7c5:	00 00 00 
  800420c7c8:	ff d0                	callq  *%rax
  800420c7ca:	48 98                	cltq   
  800420c7cc:	48 c1 e0 03          	shl    $0x3,%rax
  800420c7d0:	48 89 c2             	mov    %rax,%rdx
  800420c7d3:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c7d7:	48 01 d0             	add    %rdx,%rax
  800420c7da:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c7de:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c7e5:	00 00 00 
  800420c7e8:	48 01 d0             	add    %rdx,%rax
  800420c7eb:	48 c1 e8 18          	shr    $0x18,%rax
  800420c7ef:	88 43 07             	mov    %al,0x7(%rbx)
  800420c7f2:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c7f9:	00 00 00 
  800420c7fc:	48 8b 00             	mov    (%rax),%rax
  800420c7ff:	48 c1 f8 10          	sar    $0x10,%rax
  800420c803:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c807:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c80e:	00 00 00 
  800420c811:	ff d0                	callq  *%rax
  800420c813:	c1 e0 04             	shl    $0x4,%eax
  800420c816:	48 98                	cltq   
  800420c818:	48 01 d8             	add    %rbx,%rax
  800420c81b:	48 89 c3             	mov    %rax,%rbx
  800420c81e:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c825:	00 00 00 
  800420c828:	ff d0                	callq  *%rax
  800420c82a:	48 98                	cltq   
  800420c82c:	48 c1 e0 03          	shl    $0x3,%rax
  800420c830:	48 89 c2             	mov    %rax,%rdx
  800420c833:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c837:	48 01 d0             	add    %rdx,%rax
  800420c83a:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c83e:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800420c845:	00 00 00 
  800420c848:	48 01 d0             	add    %rdx,%rax
  800420c84b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c84f:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c852:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c859:	00 00 00 
  800420c85c:	48 8b 00             	mov    (%rax),%rax
  800420c85f:	48 c1 f8 10          	sar    $0x10,%rax
  800420c863:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c867:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c86e:	00 00 00 
  800420c871:	ff d0                	callq  *%rax
  800420c873:	c1 e0 04             	shl    $0x4,%eax
  800420c876:	48 98                	cltq   
  800420c878:	48 01 d8             	add    %rbx,%rax
  800420c87b:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c87f:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c886:	00 00 00 
  800420c889:	48 8b 00             	mov    (%rax),%rax
  800420c88c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c890:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c894:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c89b:	00 00 00 
  800420c89e:	ff d0                	callq  *%rax
  800420c8a0:	c1 e0 04             	shl    $0x4,%eax
  800420c8a3:	48 98                	cltq   
  800420c8a5:	48 01 d8             	add    %rbx,%rax
  800420c8a8:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c8ac:	48 b8 68 36 23 04 80 	movabs $0x8004233668,%rax
  800420c8b3:	00 00 00 
  800420c8b6:	48 8b 00             	mov    (%rax),%rax
  800420c8b9:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8bd:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8c1:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c8c8:	00 00 00 
  800420c8cb:	ff d0                	callq  *%rax
  800420c8cd:	c1 e0 04             	shl    $0x4,%eax
  800420c8d0:	48 98                	cltq   
  800420c8d2:	48 01 d8             	add    %rbx,%rax
  800420c8d5:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c8db:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c8de:	c1 e0 03             	shl    $0x3,%eax
  800420c8e1:	0f b7 c0             	movzwl %ax,%eax
  800420c8e4:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c8e8:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c8ec:	0f 00 d8             	ltr    %ax
  800420c8ef:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c8f6:	00 00 00 
  800420c8f9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c8fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c901:	0f 01 18             	lidt   (%rax)
  800420c904:	48 83 c4 18          	add    $0x18,%rsp
  800420c908:	5b                   	pop    %rbx
  800420c909:	5d                   	pop    %rbp
  800420c90a:	c3                   	retq   

000000800420c90b <print_trapframe>:
  800420c90b:	55                   	push   %rbp
  800420c90c:	48 89 e5             	mov    %rsp,%rbp
  800420c90f:	48 83 ec 20          	sub    $0x20,%rsp
  800420c913:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c917:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420c91e:	00 00 00 
  800420c921:	ff d0                	callq  *%rax
  800420c923:	89 c2                	mov    %eax,%edx
  800420c925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c929:	48 89 c6             	mov    %rax,%rsi
  800420c92c:	48 bf 6e e2 21 04 80 	movabs $0x800421e26e,%rdi
  800420c933:	00 00 00 
  800420c936:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c93b:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800420c942:	00 00 00 
  800420c945:	ff d1                	callq  *%rcx
  800420c947:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c94b:	48 89 c7             	mov    %rax,%rdi
  800420c94e:	48 b8 1c cc 20 04 80 	movabs $0x800420cc1c,%rax
  800420c955:	00 00 00 
  800420c958:	ff d0                	callq  *%rax
  800420c95a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c95e:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c962:	0f b7 c0             	movzwl %ax,%eax
  800420c965:	89 c6                	mov    %eax,%esi
  800420c967:	48 bf 8c e2 21 04 80 	movabs $0x800421e28c,%rdi
  800420c96e:	00 00 00 
  800420c971:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c976:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420c97d:	00 00 00 
  800420c980:	ff d2                	callq  *%rdx
  800420c982:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c986:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c98d:	0f b7 c0             	movzwl %ax,%eax
  800420c990:	89 c6                	mov    %eax,%esi
  800420c992:	48 bf 9f e2 21 04 80 	movabs $0x800421e29f,%rdi
  800420c999:	00 00 00 
  800420c99c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9a1:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420c9a8:	00 00 00 
  800420c9ab:	ff d2                	callq  *%rdx
  800420c9ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9b1:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c9b8:	89 c7                	mov    %eax,%edi
  800420c9ba:	48 b8 2d 9d 20 04 80 	movabs $0x8004209d2d,%rax
  800420c9c1:	00 00 00 
  800420c9c4:	ff d0                	callq  *%rax
  800420c9c6:	48 89 c2             	mov    %rax,%rdx
  800420c9c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9cd:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420c9d4:	48 89 c6             	mov    %rax,%rsi
  800420c9d7:	48 bf b2 e2 21 04 80 	movabs $0x800421e2b2,%rdi
  800420c9de:	00 00 00 
  800420c9e1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9e6:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800420c9ed:	00 00 00 
  800420c9f0:	ff d1                	callq  *%rcx
  800420c9f2:	48 b8 90 c2 4d 04 80 	movabs $0x80044dc290,%rax
  800420c9f9:	00 00 00 
  800420c9fc:	48 8b 00             	mov    (%rax),%rax
  800420c9ff:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca03:	75 3a                	jne    800420ca3f <print_trapframe+0x134>
  800420ca05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca09:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca10:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca14:	75 29                	jne    800420ca3f <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca16:	0f 20 d0             	mov    %cr2,%rax
  800420ca19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca21:	48 89 c6             	mov    %rax,%rsi
  800420ca24:	48 bf c4 e2 21 04 80 	movabs $0x800421e2c4,%rdi
  800420ca2b:	00 00 00 
  800420ca2e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca33:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420ca3a:	00 00 00 
  800420ca3d:	ff d2                	callq  *%rdx
  800420ca3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca43:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420ca4a:	48 89 c6             	mov    %rax,%rsi
  800420ca4d:	48 bf d3 e2 21 04 80 	movabs $0x800421e2d3,%rdi
  800420ca54:	00 00 00 
  800420ca57:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca5c:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420ca63:	00 00 00 
  800420ca66:	ff d2                	callq  *%rdx
  800420ca68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca6c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca73:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca77:	0f 85 9c 00 00 00    	jne    800420cb19 <print_trapframe+0x20e>
  800420ca7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca81:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420ca88:	83 e0 01             	and    $0x1,%eax
  800420ca8b:	48 85 c0             	test   %rax,%rax
  800420ca8e:	74 0c                	je     800420ca9c <print_trapframe+0x191>
  800420ca90:	48 b9 e1 e2 21 04 80 	movabs $0x800421e2e1,%rcx
  800420ca97:	00 00 00 
  800420ca9a:	eb 0a                	jmp    800420caa6 <print_trapframe+0x19b>
  800420ca9c:	48 b9 ec e2 21 04 80 	movabs $0x800421e2ec,%rcx
  800420caa3:	00 00 00 
  800420caa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caaa:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cab1:	83 e0 02             	and    $0x2,%eax
  800420cab4:	48 85 c0             	test   %rax,%rax
  800420cab7:	74 0c                	je     800420cac5 <print_trapframe+0x1ba>
  800420cab9:	48 ba f8 e2 21 04 80 	movabs $0x800421e2f8,%rdx
  800420cac0:	00 00 00 
  800420cac3:	eb 0a                	jmp    800420cacf <print_trapframe+0x1c4>
  800420cac5:	48 ba fe e2 21 04 80 	movabs $0x800421e2fe,%rdx
  800420cacc:	00 00 00 
  800420cacf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cad3:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cada:	83 e0 04             	and    $0x4,%eax
  800420cadd:	48 85 c0             	test   %rax,%rax
  800420cae0:	74 0c                	je     800420caee <print_trapframe+0x1e3>
  800420cae2:	48 b8 03 e3 21 04 80 	movabs $0x800421e303,%rax
  800420cae9:	00 00 00 
  800420caec:	eb 0a                	jmp    800420caf8 <print_trapframe+0x1ed>
  800420caee:	48 b8 08 e3 21 04 80 	movabs $0x800421e308,%rax
  800420caf5:	00 00 00 
  800420caf8:	48 89 c6             	mov    %rax,%rsi
  800420cafb:	48 bf 0f e3 21 04 80 	movabs $0x800421e30f,%rdi
  800420cb02:	00 00 00 
  800420cb05:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb0a:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  800420cb11:	00 00 00 
  800420cb14:	41 ff d0             	callq  *%r8
  800420cb17:	eb 1b                	jmp    800420cb34 <print_trapframe+0x229>
  800420cb19:	48 bf 1e e3 21 04 80 	movabs $0x800421e31e,%rdi
  800420cb20:	00 00 00 
  800420cb23:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb28:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cb2f:	00 00 00 
  800420cb32:	ff d2                	callq  *%rdx
  800420cb34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb38:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cb3f:	48 89 c6             	mov    %rax,%rsi
  800420cb42:	48 bf 20 e3 21 04 80 	movabs $0x800421e320,%rdi
  800420cb49:	00 00 00 
  800420cb4c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb51:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cb58:	00 00 00 
  800420cb5b:	ff d2                	callq  *%rdx
  800420cb5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb61:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cb68:	0f b7 c0             	movzwl %ax,%eax
  800420cb6b:	89 c6                	mov    %eax,%esi
  800420cb6d:	48 bf 2f e3 21 04 80 	movabs $0x800421e32f,%rdi
  800420cb74:	00 00 00 
  800420cb77:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb7c:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cb83:	00 00 00 
  800420cb86:	ff d2                	callq  *%rdx
  800420cb88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb8c:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cb93:	48 89 c6             	mov    %rax,%rsi
  800420cb96:	48 bf 42 e3 21 04 80 	movabs $0x800421e342,%rdi
  800420cb9d:	00 00 00 
  800420cba0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cba5:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cbac:	00 00 00 
  800420cbaf:	ff d2                	callq  *%rdx
  800420cbb1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbb5:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbbc:	0f b7 c0             	movzwl %ax,%eax
  800420cbbf:	83 e0 03             	and    $0x3,%eax
  800420cbc2:	85 c0                	test   %eax,%eax
  800420cbc4:	74 54                	je     800420cc1a <print_trapframe+0x30f>
  800420cbc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbca:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cbd1:	48 89 c6             	mov    %rax,%rsi
  800420cbd4:	48 bf 51 e3 21 04 80 	movabs $0x800421e351,%rdi
  800420cbdb:	00 00 00 
  800420cbde:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbe3:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cbea:	00 00 00 
  800420cbed:	ff d2                	callq  *%rdx
  800420cbef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbf3:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cbfa:	0f b7 c0             	movzwl %ax,%eax
  800420cbfd:	89 c6                	mov    %eax,%esi
  800420cbff:	48 bf 60 e3 21 04 80 	movabs $0x800421e360,%rdi
  800420cc06:	00 00 00 
  800420cc09:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc0e:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cc15:	00 00 00 
  800420cc18:	ff d2                	callq  *%rdx
  800420cc1a:	c9                   	leaveq 
  800420cc1b:	c3                   	retq   

000000800420cc1c <print_regs>:
  800420cc1c:	55                   	push   %rbp
  800420cc1d:	48 89 e5             	mov    %rsp,%rbp
  800420cc20:	48 83 ec 10          	sub    $0x10,%rsp
  800420cc24:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cc28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc2c:	48 8b 00             	mov    (%rax),%rax
  800420cc2f:	48 89 c6             	mov    %rax,%rsi
  800420cc32:	48 bf 73 e3 21 04 80 	movabs $0x800421e373,%rdi
  800420cc39:	00 00 00 
  800420cc3c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc41:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cc48:	00 00 00 
  800420cc4b:	ff d2                	callq  *%rdx
  800420cc4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc51:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420cc55:	48 89 c6             	mov    %rax,%rsi
  800420cc58:	48 bf 82 e3 21 04 80 	movabs $0x800421e382,%rdi
  800420cc5f:	00 00 00 
  800420cc62:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc67:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cc6e:	00 00 00 
  800420cc71:	ff d2                	callq  *%rdx
  800420cc73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc77:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420cc7b:	48 89 c6             	mov    %rax,%rsi
  800420cc7e:	48 bf 91 e3 21 04 80 	movabs $0x800421e391,%rdi
  800420cc85:	00 00 00 
  800420cc88:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc8d:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cc94:	00 00 00 
  800420cc97:	ff d2                	callq  *%rdx
  800420cc99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc9d:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cca1:	48 89 c6             	mov    %rax,%rsi
  800420cca4:	48 bf a0 e3 21 04 80 	movabs $0x800421e3a0,%rdi
  800420ccab:	00 00 00 
  800420ccae:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccb3:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420ccba:	00 00 00 
  800420ccbd:	ff d2                	callq  *%rdx
  800420ccbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccc3:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420ccc7:	48 89 c6             	mov    %rax,%rsi
  800420ccca:	48 bf af e3 21 04 80 	movabs $0x800421e3af,%rdi
  800420ccd1:	00 00 00 
  800420ccd4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccd9:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cce0:	00 00 00 
  800420cce3:	ff d2                	callq  *%rdx
  800420cce5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cce9:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cced:	48 89 c6             	mov    %rax,%rsi
  800420ccf0:	48 bf be e3 21 04 80 	movabs $0x800421e3be,%rdi
  800420ccf7:	00 00 00 
  800420ccfa:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccff:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cd06:	00 00 00 
  800420cd09:	ff d2                	callq  *%rdx
  800420cd0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd0f:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd13:	48 89 c6             	mov    %rax,%rsi
  800420cd16:	48 bf cd e3 21 04 80 	movabs $0x800421e3cd,%rdi
  800420cd1d:	00 00 00 
  800420cd20:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd25:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cd2c:	00 00 00 
  800420cd2f:	ff d2                	callq  *%rdx
  800420cd31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd35:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cd39:	48 89 c6             	mov    %rax,%rsi
  800420cd3c:	48 bf db e3 21 04 80 	movabs $0x800421e3db,%rdi
  800420cd43:	00 00 00 
  800420cd46:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd4b:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cd52:	00 00 00 
  800420cd55:	ff d2                	callq  *%rdx
  800420cd57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd5b:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cd5f:	48 89 c6             	mov    %rax,%rsi
  800420cd62:	48 bf e9 e3 21 04 80 	movabs $0x800421e3e9,%rdi
  800420cd69:	00 00 00 
  800420cd6c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd71:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cd78:	00 00 00 
  800420cd7b:	ff d2                	callq  *%rdx
  800420cd7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd81:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420cd85:	48 89 c6             	mov    %rax,%rsi
  800420cd88:	48 bf f8 e3 21 04 80 	movabs $0x800421e3f8,%rdi
  800420cd8f:	00 00 00 
  800420cd92:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd97:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cd9e:	00 00 00 
  800420cda1:	ff d2                	callq  *%rdx
  800420cda3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cda7:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420cdab:	48 89 c6             	mov    %rax,%rsi
  800420cdae:	48 bf 07 e4 21 04 80 	movabs $0x800421e407,%rdi
  800420cdb5:	00 00 00 
  800420cdb8:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdbd:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cdc4:	00 00 00 
  800420cdc7:	ff d2                	callq  *%rdx
  800420cdc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdcd:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420cdd1:	48 89 c6             	mov    %rax,%rsi
  800420cdd4:	48 bf 16 e4 21 04 80 	movabs $0x800421e416,%rdi
  800420cddb:	00 00 00 
  800420cdde:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cde3:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cdea:	00 00 00 
  800420cded:	ff d2                	callq  *%rdx
  800420cdef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdf3:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420cdf7:	48 89 c6             	mov    %rax,%rsi
  800420cdfa:	48 bf 25 e4 21 04 80 	movabs $0x800421e425,%rdi
  800420ce01:	00 00 00 
  800420ce04:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce09:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420ce10:	00 00 00 
  800420ce13:	ff d2                	callq  *%rdx
  800420ce15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce19:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce1d:	48 89 c6             	mov    %rax,%rsi
  800420ce20:	48 bf 34 e4 21 04 80 	movabs $0x800421e434,%rdi
  800420ce27:	00 00 00 
  800420ce2a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce2f:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420ce36:	00 00 00 
  800420ce39:	ff d2                	callq  *%rdx
  800420ce3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce3f:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420ce43:	48 89 c6             	mov    %rax,%rsi
  800420ce46:	48 bf 43 e4 21 04 80 	movabs $0x800421e443,%rdi
  800420ce4d:	00 00 00 
  800420ce50:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce55:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420ce5c:	00 00 00 
  800420ce5f:	ff d2                	callq  *%rdx
  800420ce61:	c9                   	leaveq 
  800420ce62:	c3                   	retq   

000000800420ce63 <trap_dispatch>:
  800420ce63:	55                   	push   %rbp
  800420ce64:	48 89 e5             	mov    %rsp,%rbp
  800420ce67:	48 83 ec 10          	sub    $0x10,%rsp
  800420ce6b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ce6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce73:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ce7a:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ce7e:	75 18                	jne    800420ce98 <trap_dispatch+0x35>
  800420ce80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce84:	48 89 c7             	mov    %rax,%rdi
  800420ce87:	48 b8 e1 d3 20 04 80 	movabs $0x800420d3e1,%rax
  800420ce8e:	00 00 00 
  800420ce91:	ff d0                	callq  *%rax
  800420ce93:	e9 ea 01 00 00       	jmpq   800420d082 <trap_dispatch+0x21f>
  800420ce98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce9c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cea3:	48 83 f8 30          	cmp    $0x30,%rax
  800420cea7:	75 55                	jne    800420cefe <trap_dispatch+0x9b>
  800420cea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cead:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420ceb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ceb5:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420ceb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cebd:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cec1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cec5:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cec9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cecd:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420ced1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ced5:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420ced9:	4d 89 c1             	mov    %r8,%r9
  800420cedc:	49 89 f8             	mov    %rdi,%r8
  800420cedf:	48 89 c7             	mov    %rax,%rdi
  800420cee2:	48 b8 3f eb 20 04 80 	movabs $0x800420eb3f,%rax
  800420cee9:	00 00 00 
  800420ceec:	ff d0                	callq  *%rax
  800420ceee:	48 89 c2             	mov    %rax,%rdx
  800420cef1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cef5:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cef9:	e9 84 01 00 00       	jmpq   800420d082 <trap_dispatch+0x21f>
  800420cefe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf02:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf09:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf0d:	75 18                	jne    800420cf27 <trap_dispatch+0xc4>
  800420cf0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf13:	48 89 c7             	mov    %rax,%rdi
  800420cf16:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420cf1d:	00 00 00 
  800420cf20:	ff d0                	callq  *%rax
  800420cf22:	e9 5b 01 00 00       	jmpq   800420d082 <trap_dispatch+0x21f>
  800420cf27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf2b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf32:	48 83 f8 27          	cmp    $0x27,%rax
  800420cf36:	75 33                	jne    800420cf6b <trap_dispatch+0x108>
  800420cf38:	48 bf 52 e4 21 04 80 	movabs $0x800421e452,%rdi
  800420cf3f:	00 00 00 
  800420cf42:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cf47:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420cf4e:	00 00 00 
  800420cf51:	ff d2                	callq  *%rdx
  800420cf53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf57:	48 89 c7             	mov    %rax,%rdi
  800420cf5a:	48 b8 0b c9 20 04 80 	movabs $0x800420c90b,%rax
  800420cf61:	00 00 00 
  800420cf64:	ff d0                	callq  *%rax
  800420cf66:	e9 17 01 00 00       	jmpq   800420d082 <trap_dispatch+0x21f>
  800420cf6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf6f:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf76:	48 83 f8 20          	cmp    $0x20,%rax
  800420cf7a:	75 34                	jne    800420cfb0 <trap_dispatch+0x14d>
  800420cf7c:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420cf83:	00 00 00 
  800420cf86:	ff d0                	callq  *%rax
  800420cf88:	85 c0                	test   %eax,%eax
  800420cf8a:	75 0c                	jne    800420cf98 <trap_dispatch+0x135>
  800420cf8c:	48 b8 6e 91 21 04 80 	movabs $0x800421916e,%rax
  800420cf93:	00 00 00 
  800420cf96:	ff d0                	callq  *%rax
  800420cf98:	48 b8 67 79 21 04 80 	movabs $0x8004217967,%rax
  800420cf9f:	00 00 00 
  800420cfa2:	ff d0                	callq  *%rax
  800420cfa4:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  800420cfab:	00 00 00 
  800420cfae:	ff d0                	callq  *%rax
  800420cfb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfb4:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfbb:	48 83 f8 21          	cmp    $0x21,%rax
  800420cfbf:	75 11                	jne    800420cfd2 <trap_dispatch+0x16f>
  800420cfc1:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  800420cfc8:	00 00 00 
  800420cfcb:	ff d0                	callq  *%rax
  800420cfcd:	e9 b0 00 00 00       	jmpq   800420d082 <trap_dispatch+0x21f>
  800420cfd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfd6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfdd:	48 83 f8 24          	cmp    $0x24,%rax
  800420cfe1:	75 11                	jne    800420cff4 <trap_dispatch+0x191>
  800420cfe3:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  800420cfea:	00 00 00 
  800420cfed:	ff d0                	callq  *%rax
  800420cfef:	e9 8e 00 00 00       	jmpq   800420d082 <trap_dispatch+0x21f>
  800420cff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cff8:	48 89 c7             	mov    %rax,%rdi
  800420cffb:	48 b8 0b c9 20 04 80 	movabs $0x800420c90b,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d00b:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d012:	66 83 f8 08          	cmp    $0x8,%ax
  800420d016:	75 2a                	jne    800420d042 <trap_dispatch+0x1df>
  800420d018:	48 ba 6f e4 21 04 80 	movabs $0x800421e46f,%rdx
  800420d01f:	00 00 00 
  800420d022:	be 77 01 00 00       	mov    $0x177,%esi
  800420d027:	48 bf 88 e4 21 04 80 	movabs $0x800421e488,%rdi
  800420d02e:	00 00 00 
  800420d031:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d036:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d03d:	00 00 00 
  800420d040:	ff d1                	callq  *%rcx
  800420d042:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d049:	00 00 00 
  800420d04c:	ff d0                	callq  *%rax
  800420d04e:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d055:	00 00 00 
  800420d058:	48 98                	cltq   
  800420d05a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d05e:	48 89 c1             	mov    %rax,%rcx
  800420d061:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d065:	48 01 c8             	add    %rcx,%rax
  800420d068:	48 01 d0             	add    %rdx,%rax
  800420d06b:	48 83 c0 08          	add    $0x8,%rax
  800420d06f:	48 8b 00             	mov    (%rax),%rax
  800420d072:	48 89 c7             	mov    %rax,%rdi
  800420d075:	48 b8 c7 94 20 04 80 	movabs $0x80042094c7,%rax
  800420d07c:	00 00 00 
  800420d07f:	ff d0                	callq  *%rax
  800420d081:	90                   	nop
  800420d082:	c9                   	leaveq 
  800420d083:	c3                   	retq   

000000800420d084 <trap>:
  800420d084:	55                   	push   %rbp
  800420d085:	48 89 e5             	mov    %rsp,%rbp
  800420d088:	48 83 ec 20          	sub    $0x20,%rsp
  800420d08c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d090:	fc                   	cld    
  800420d091:	48 b8 d8 a5 6d 04 80 	movabs $0x80046da5d8,%rax
  800420d098:	00 00 00 
  800420d09b:	48 8b 00             	mov    (%rax),%rax
  800420d09e:	48 85 c0             	test   %rax,%rax
  800420d0a1:	74 01                	je     800420d0a4 <trap+0x20>
  800420d0a3:	f4                   	hlt    
  800420d0a4:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d0ab:	00 00 00 
  800420d0ae:	ff d0                	callq  *%rax
  800420d0b0:	48 98                	cltq   
  800420d0b2:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0b6:	48 89 c2             	mov    %rax,%rdx
  800420d0b9:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d0bd:	48 01 d0             	add    %rdx,%rax
  800420d0c0:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d0c7:	00 00 00 
  800420d0ca:	48 01 d0             	add    %rdx,%rax
  800420d0cd:	48 83 c0 04          	add    $0x4,%rax
  800420d0d1:	be 01 00 00 00       	mov    $0x1,%esi
  800420d0d6:	48 89 c7             	mov    %rax,%rdi
  800420d0d9:	48 b8 ec 9c 20 04 80 	movabs $0x8004209cec,%rax
  800420d0e0:	00 00 00 
  800420d0e3:	ff d0                	callq  *%rax
  800420d0e5:	83 f8 02             	cmp    $0x2,%eax
  800420d0e8:	75 0c                	jne    800420d0f6 <trap+0x72>
  800420d0ea:	48 b8 11 9d 20 04 80 	movabs $0x8004209d11,%rax
  800420d0f1:	00 00 00 
  800420d0f4:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d0f6:	9c                   	pushfq 
  800420d0f7:	58                   	pop    %rax
  800420d0f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d0fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d100:	25 00 02 00 00       	and    $0x200,%eax
  800420d105:	48 85 c0             	test   %rax,%rax
  800420d108:	74 35                	je     800420d13f <trap+0xbb>
  800420d10a:	48 b9 97 e4 21 04 80 	movabs $0x800421e497,%rcx
  800420d111:	00 00 00 
  800420d114:	48 ba b0 e4 21 04 80 	movabs $0x800421e4b0,%rdx
  800420d11b:	00 00 00 
  800420d11e:	be 94 01 00 00       	mov    $0x194,%esi
  800420d123:	48 bf 88 e4 21 04 80 	movabs $0x800421e488,%rdi
  800420d12a:	00 00 00 
  800420d12d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d132:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d139:	00 00 00 
  800420d13c:	41 ff d0             	callq  *%r8
  800420d13f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d143:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d14a:	0f b7 c0             	movzwl %ax,%eax
  800420d14d:	83 e0 03             	and    $0x3,%eax
  800420d150:	83 f8 03             	cmp    $0x3,%eax
  800420d153:	0f 85 a9 01 00 00    	jne    800420d302 <trap+0x27e>
  800420d159:	48 b8 11 9d 20 04 80 	movabs $0x8004209d11,%rax
  800420d160:	00 00 00 
  800420d163:	ff d0                	callq  *%rax
  800420d165:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d16c:	00 00 00 
  800420d16f:	ff d0                	callq  *%rax
  800420d171:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d178:	00 00 00 
  800420d17b:	48 98                	cltq   
  800420d17d:	48 c1 e0 03          	shl    $0x3,%rax
  800420d181:	48 89 c1             	mov    %rax,%rcx
  800420d184:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d188:	48 01 c8             	add    %rcx,%rax
  800420d18b:	48 01 d0             	add    %rdx,%rax
  800420d18e:	48 83 c0 08          	add    $0x8,%rax
  800420d192:	48 8b 00             	mov    (%rax),%rax
  800420d195:	48 85 c0             	test   %rax,%rax
  800420d198:	75 35                	jne    800420d1cf <trap+0x14b>
  800420d19a:	48 b9 c5 e4 21 04 80 	movabs $0x800421e4c5,%rcx
  800420d1a1:	00 00 00 
  800420d1a4:	48 ba b0 e4 21 04 80 	movabs $0x800421e4b0,%rdx
  800420d1ab:	00 00 00 
  800420d1ae:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d1b3:	48 bf 88 e4 21 04 80 	movabs $0x800421e488,%rdi
  800420d1ba:	00 00 00 
  800420d1bd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d1c2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d1c9:	00 00 00 
  800420d1cc:	41 ff d0             	callq  *%r8
  800420d1cf:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d1d6:	00 00 00 
  800420d1d9:	ff d0                	callq  *%rax
  800420d1db:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d1e2:	00 00 00 
  800420d1e5:	48 98                	cltq   
  800420d1e7:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1eb:	48 89 c1             	mov    %rax,%rcx
  800420d1ee:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d1f2:	48 01 c8             	add    %rcx,%rax
  800420d1f5:	48 01 d0             	add    %rdx,%rax
  800420d1f8:	48 83 c0 08          	add    $0x8,%rax
  800420d1fc:	48 8b 00             	mov    (%rax),%rax
  800420d1ff:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d205:	83 f8 01             	cmp    $0x1,%eax
  800420d208:	75 7f                	jne    800420d289 <trap+0x205>
  800420d20a:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d211:	00 00 00 
  800420d214:	ff d0                	callq  *%rax
  800420d216:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d21d:	00 00 00 
  800420d220:	48 98                	cltq   
  800420d222:	48 c1 e0 03          	shl    $0x3,%rax
  800420d226:	48 89 c1             	mov    %rax,%rcx
  800420d229:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d22d:	48 01 c8             	add    %rcx,%rax
  800420d230:	48 01 d0             	add    %rdx,%rax
  800420d233:	48 83 c0 08          	add    $0x8,%rax
  800420d237:	48 8b 00             	mov    (%rax),%rax
  800420d23a:	48 89 c7             	mov    %rax,%rdi
  800420d23d:	48 b8 0e 90 20 04 80 	movabs $0x800420900e,%rax
  800420d244:	00 00 00 
  800420d247:	ff d0                	callq  *%rax
  800420d249:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d250:	00 00 00 
  800420d253:	ff d0                	callq  *%rax
  800420d255:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d25c:	00 00 00 
  800420d25f:	48 98                	cltq   
  800420d261:	48 c1 e0 03          	shl    $0x3,%rax
  800420d265:	48 89 c1             	mov    %rax,%rcx
  800420d268:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d26c:	48 01 c8             	add    %rcx,%rax
  800420d26f:	48 01 d0             	add    %rdx,%rax
  800420d272:	48 83 c0 08          	add    $0x8,%rax
  800420d276:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d27d:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  800420d284:	00 00 00 
  800420d287:	ff d0                	callq  *%rax
  800420d289:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d290:	00 00 00 
  800420d293:	ff d0                	callq  *%rax
  800420d295:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d29c:	00 00 00 
  800420d29f:	48 98                	cltq   
  800420d2a1:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2a5:	48 89 c1             	mov    %rax,%rcx
  800420d2a8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2ac:	48 01 c8             	add    %rcx,%rax
  800420d2af:	48 01 d0             	add    %rdx,%rax
  800420d2b2:	48 83 c0 08          	add    $0x8,%rax
  800420d2b6:	48 8b 10             	mov    (%rax),%rdx
  800420d2b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d2bd:	48 89 c6             	mov    %rax,%rsi
  800420d2c0:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d2c5:	48 89 d7             	mov    %rdx,%rdi
  800420d2c8:	48 89 c1             	mov    %rax,%rcx
  800420d2cb:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d2ce:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d2d5:	00 00 00 
  800420d2d8:	ff d0                	callq  *%rax
  800420d2da:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d2e1:	00 00 00 
  800420d2e4:	48 98                	cltq   
  800420d2e6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2ea:	48 89 c1             	mov    %rax,%rcx
  800420d2ed:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2f1:	48 01 c8             	add    %rcx,%rax
  800420d2f4:	48 01 d0             	add    %rdx,%rax
  800420d2f7:	48 83 c0 08          	add    $0x8,%rax
  800420d2fb:	48 8b 00             	mov    (%rax),%rax
  800420d2fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d302:	48 b8 90 c2 4d 04 80 	movabs $0x80044dc290,%rax
  800420d309:	00 00 00 
  800420d30c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d310:	48 89 10             	mov    %rdx,(%rax)
  800420d313:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d317:	48 89 c7             	mov    %rax,%rdi
  800420d31a:	48 b8 63 ce 20 04 80 	movabs $0x800420ce63,%rax
  800420d321:	00 00 00 
  800420d324:	ff d0                	callq  *%rax
  800420d326:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d32d:	00 00 00 
  800420d330:	ff d0                	callq  *%rax
  800420d332:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d339:	00 00 00 
  800420d33c:	48 98                	cltq   
  800420d33e:	48 c1 e0 03          	shl    $0x3,%rax
  800420d342:	48 89 c1             	mov    %rax,%rcx
  800420d345:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d349:	48 01 c8             	add    %rcx,%rax
  800420d34c:	48 01 d0             	add    %rdx,%rax
  800420d34f:	48 83 c0 08          	add    $0x8,%rax
  800420d353:	48 8b 00             	mov    (%rax),%rax
  800420d356:	48 85 c0             	test   %rax,%rax
  800420d359:	74 7a                	je     800420d3d5 <trap+0x351>
  800420d35b:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d362:	00 00 00 
  800420d365:	ff d0                	callq  *%rax
  800420d367:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d36e:	00 00 00 
  800420d371:	48 98                	cltq   
  800420d373:	48 c1 e0 03          	shl    $0x3,%rax
  800420d377:	48 89 c1             	mov    %rax,%rcx
  800420d37a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d37e:	48 01 c8             	add    %rcx,%rax
  800420d381:	48 01 d0             	add    %rdx,%rax
  800420d384:	48 83 c0 08          	add    $0x8,%rax
  800420d388:	48 8b 00             	mov    (%rax),%rax
  800420d38b:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d391:	83 f8 03             	cmp    $0x3,%eax
  800420d394:	75 3f                	jne    800420d3d5 <trap+0x351>
  800420d396:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d39d:	00 00 00 
  800420d3a0:	ff d0                	callq  *%rax
  800420d3a2:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d3a9:	00 00 00 
  800420d3ac:	48 98                	cltq   
  800420d3ae:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3b2:	48 89 c1             	mov    %rax,%rcx
  800420d3b5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3b9:	48 01 c8             	add    %rcx,%rax
  800420d3bc:	48 01 d0             	add    %rdx,%rax
  800420d3bf:	48 83 c0 08          	add    $0x8,%rax
  800420d3c3:	48 8b 00             	mov    (%rax),%rax
  800420d3c6:	48 89 c7             	mov    %rax,%rdi
  800420d3c9:	48 b8 92 96 20 04 80 	movabs $0x8004209692,%rax
  800420d3d0:	00 00 00 
  800420d3d3:	ff d0                	callq  *%rax
  800420d3d5:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  800420d3dc:	00 00 00 
  800420d3df:	ff d0                	callq  *%rax

000000800420d3e1 <page_fault_handler>:
  800420d3e1:	55                   	push   %rbp
  800420d3e2:	48 89 e5             	mov    %rsp,%rbp
  800420d3e5:	53                   	push   %rbx
  800420d3e6:	48 83 ec 38          	sub    $0x38,%rsp
  800420d3ea:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d3ee:	0f 20 d0             	mov    %cr2,%rax
  800420d3f1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d3f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d3f9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d3fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d401:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d408:	0f b7 c0             	movzwl %ax,%eax
  800420d40b:	83 e0 03             	and    $0x3,%eax
  800420d40e:	85 c0                	test   %eax,%eax
  800420d410:	75 3d                	jne    800420d44f <page_fault_handler+0x6e>
  800420d412:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d416:	48 89 c7             	mov    %rax,%rdi
  800420d419:	48 b8 0b c9 20 04 80 	movabs $0x800420c90b,%rax
  800420d420:	00 00 00 
  800420d423:	ff d0                	callq  *%rax
  800420d425:	48 ba cc e4 21 04 80 	movabs $0x800421e4cc,%rdx
  800420d42c:	00 00 00 
  800420d42f:	be de 01 00 00       	mov    $0x1de,%esi
  800420d434:	48 bf 88 e4 21 04 80 	movabs $0x800421e488,%rdi
  800420d43b:	00 00 00 
  800420d43e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d443:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d44a:	00 00 00 
  800420d44d:	ff d1                	callq  *%rcx
  800420d44f:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d456:	00 00 00 
  800420d459:	ff d0                	callq  *%rax
  800420d45b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d462:	00 00 00 
  800420d465:	48 98                	cltq   
  800420d467:	48 c1 e0 03          	shl    $0x3,%rax
  800420d46b:	48 89 c1             	mov    %rax,%rcx
  800420d46e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d472:	48 01 c8             	add    %rcx,%rax
  800420d475:	48 01 d0             	add    %rdx,%rax
  800420d478:	48 83 c0 08          	add    $0x8,%rax
  800420d47c:	48 8b 00             	mov    (%rax),%rax
  800420d47f:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d486:	48 85 c0             	test   %rax,%rax
  800420d489:	0f 85 b8 00 00 00    	jne    800420d547 <page_fault_handler+0x166>
  800420d48f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d493:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d49a:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d4a1:	00 00 00 
  800420d4a4:	ff d0                	callq  *%rax
  800420d4a6:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d4ad:	00 00 00 
  800420d4b0:	48 98                	cltq   
  800420d4b2:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4b6:	48 89 c1             	mov    %rax,%rcx
  800420d4b9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4bd:	48 01 c8             	add    %rcx,%rax
  800420d4c0:	48 01 d0             	add    %rdx,%rax
  800420d4c3:	48 83 c0 08          	add    $0x8,%rax
  800420d4c7:	48 8b 00             	mov    (%rax),%rax
  800420d4ca:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d4d0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d4d4:	48 89 d9             	mov    %rbx,%rcx
  800420d4d7:	89 c6                	mov    %eax,%esi
  800420d4d9:	48 bf d8 e4 21 04 80 	movabs $0x800421e4d8,%rdi
  800420d4e0:	00 00 00 
  800420d4e3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4e8:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  800420d4ef:	00 00 00 
  800420d4f2:	41 ff d0             	callq  *%r8
  800420d4f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d4f9:	48 89 c7             	mov    %rax,%rdi
  800420d4fc:	48 b8 0b c9 20 04 80 	movabs $0x800420c90b,%rax
  800420d503:	00 00 00 
  800420d506:	ff d0                	callq  *%rax
  800420d508:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d50f:	00 00 00 
  800420d512:	ff d0                	callq  *%rax
  800420d514:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d51b:	00 00 00 
  800420d51e:	48 98                	cltq   
  800420d520:	48 c1 e0 03          	shl    $0x3,%rax
  800420d524:	48 89 c1             	mov    %rax,%rcx
  800420d527:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d52b:	48 01 c8             	add    %rcx,%rax
  800420d52e:	48 01 d0             	add    %rdx,%rax
  800420d531:	48 83 c0 08          	add    $0x8,%rax
  800420d535:	48 8b 00             	mov    (%rax),%rax
  800420d538:	48 89 c7             	mov    %rax,%rdi
  800420d53b:	48 b8 c7 94 20 04 80 	movabs $0x80042094c7,%rax
  800420d542:	00 00 00 
  800420d545:	ff d0                	callq  *%rax
  800420d547:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d54b:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d552:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d557:	48 39 c2             	cmp    %rax,%rdx
  800420d55a:	76 2c                	jbe    800420d588 <page_fault_handler+0x1a7>
  800420d55c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d560:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d567:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d56c:	48 39 c2             	cmp    %rax,%rdx
  800420d56f:	77 17                	ja     800420d588 <page_fault_handler+0x1a7>
  800420d571:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d575:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d57c:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d582:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d586:	eb 09                	jmp    800420d591 <page_fault_handler+0x1b0>
  800420d588:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d58d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d591:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d598:	00 00 00 
  800420d59b:	ff d0                	callq  *%rax
  800420d59d:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d5a4:	00 00 00 
  800420d5a7:	48 98                	cltq   
  800420d5a9:	48 c1 e0 03          	shl    $0x3,%rax
  800420d5ad:	48 89 c1             	mov    %rax,%rcx
  800420d5b0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d5b4:	48 01 c8             	add    %rcx,%rax
  800420d5b7:	48 01 d0             	add    %rdx,%rax
  800420d5ba:	48 83 c0 08          	add    $0x8,%rax
  800420d5be:	48 8b 00             	mov    (%rax),%rax
  800420d5c1:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d5c5:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d5ca:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d5cf:	48 89 c7             	mov    %rax,%rdi
  800420d5d2:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420d5d9:	00 00 00 
  800420d5dc:	ff d0                	callq  *%rax
  800420d5de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d5e2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d5e6:	48 89 10             	mov    %rdx,(%rax)
  800420d5e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ed:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d5f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d5f8:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d5fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d600:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d604:	48 8b 0a             	mov    (%rdx),%rcx
  800420d607:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d60b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d60f:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d613:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d617:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d61b:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d61f:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d623:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d627:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d62b:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d62f:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d633:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d637:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d63b:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d63f:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d643:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d647:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d64b:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d64f:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d653:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d657:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d65b:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d65f:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d663:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d667:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d66b:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d66f:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d673:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d677:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d67e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d682:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d689:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d68d:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d694:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d698:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d69f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6a3:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d6aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6ae:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d6b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6b9:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d6c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d6c4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6c8:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d6cf:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d6d6:	00 00 00 
  800420d6d9:	ff d0                	callq  *%rax
  800420d6db:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d6e2:	00 00 00 
  800420d6e5:	48 98                	cltq   
  800420d6e7:	48 c1 e0 03          	shl    $0x3,%rax
  800420d6eb:	48 89 c1             	mov    %rax,%rcx
  800420d6ee:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d6f2:	48 01 c8             	add    %rcx,%rax
  800420d6f5:	48 01 d0             	add    %rdx,%rax
  800420d6f8:	48 83 c0 08          	add    $0x8,%rax
  800420d6fc:	48 8b 00             	mov    (%rax),%rax
  800420d6ff:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d706:	48 89 c2             	mov    %rax,%rdx
  800420d709:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d70d:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d714:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d71b:	00 00 00 
  800420d71e:	ff d0                	callq  *%rax
  800420d720:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d727:	00 00 00 
  800420d72a:	48 98                	cltq   
  800420d72c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d730:	48 89 c1             	mov    %rax,%rcx
  800420d733:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d737:	48 01 c8             	add    %rcx,%rax
  800420d73a:	48 01 d0             	add    %rdx,%rax
  800420d73d:	48 83 c0 08          	add    $0x8,%rax
  800420d741:	48 8b 00             	mov    (%rax),%rax
  800420d744:	48 89 c7             	mov    %rax,%rdi
  800420d747:	48 b8 92 96 20 04 80 	movabs $0x8004209692,%rax
  800420d74e:	00 00 00 
  800420d751:	ff d0                	callq  *%rax
  800420d753:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d75a:	00 00 00 
  800420d75d:	0f 1f 00             	nopl   (%rax)

000000800420d760 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d760:	6a 00                	pushq  $0x0
  800420d762:	6a 00                	pushq  $0x0
  800420d764:	e9 f7 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d769:	90                   	nop

000000800420d76a <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d76a:	6a 00                	pushq  $0x0
  800420d76c:	6a 01                	pushq  $0x1
  800420d76e:	e9 ed 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d773:	90                   	nop

000000800420d774 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d774:	6a 00                	pushq  $0x0
  800420d776:	6a 02                	pushq  $0x2
  800420d778:	e9 e3 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d77d:	90                   	nop

000000800420d77e <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d77e:	6a 00                	pushq  $0x0
  800420d780:	6a 03                	pushq  $0x3
  800420d782:	e9 d9 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d787:	90                   	nop

000000800420d788 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d788:	6a 00                	pushq  $0x0
  800420d78a:	6a 04                	pushq  $0x4
  800420d78c:	e9 cf 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d791:	90                   	nop

000000800420d792 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d792:	6a 00                	pushq  $0x0
  800420d794:	6a 05                	pushq  $0x5
  800420d796:	e9 c5 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d79b:	90                   	nop

000000800420d79c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d79c:	6a 00                	pushq  $0x0
  800420d79e:	6a 06                	pushq  $0x6
  800420d7a0:	e9 bb 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7a5:	90                   	nop

000000800420d7a6 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d7a6:	6a 00                	pushq  $0x0
  800420d7a8:	6a 07                	pushq  $0x7
  800420d7aa:	e9 b1 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7af:	90                   	nop

000000800420d7b0 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d7b0:	6a 08                	pushq  $0x8
  800420d7b2:	e9 a9 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7b7:	90                   	nop

000000800420d7b8 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d7b8:	6a 0a                	pushq  $0xa
  800420d7ba:	e9 a1 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7bf:	90                   	nop

000000800420d7c0 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d7c0:	6a 0b                	pushq  $0xb
  800420d7c2:	e9 99 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7c7:	90                   	nop

000000800420d7c8 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d7c8:	6a 0c                	pushq  $0xc
  800420d7ca:	e9 91 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7cf:	90                   	nop

000000800420d7d0 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d7d0:	6a 0d                	pushq  $0xd
  800420d7d2:	e9 89 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7d7:	90                   	nop

000000800420d7d8 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d7d8:	6a 0e                	pushq  $0xe
  800420d7da:	e9 81 00 00 00       	jmpq   800420d860 <_alltraps>
  800420d7df:	90                   	nop

000000800420d7e0 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d7e0:	6a 00                	pushq  $0x0
  800420d7e2:	6a 10                	pushq  $0x10
  800420d7e4:	eb 7a                	jmp    800420d860 <_alltraps>

000000800420d7e6 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d7e6:	6a 11                	pushq  $0x11
  800420d7e8:	eb 76                	jmp    800420d860 <_alltraps>

000000800420d7ea <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d7ea:	6a 00                	pushq  $0x0
  800420d7ec:	6a 12                	pushq  $0x12
  800420d7ee:	eb 70                	jmp    800420d860 <_alltraps>

000000800420d7f0 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d7f0:	6a 00                	pushq  $0x0
  800420d7f2:	6a 20                	pushq  $0x20
  800420d7f4:	eb 6a                	jmp    800420d860 <_alltraps>

000000800420d7f6 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d7f6:	6a 00                	pushq  $0x0
  800420d7f8:	6a 21                	pushq  $0x21
  800420d7fa:	eb 64                	jmp    800420d860 <_alltraps>

000000800420d7fc <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d7fc:	6a 00                	pushq  $0x0
  800420d7fe:	6a 22                	pushq  $0x22
  800420d800:	eb 5e                	jmp    800420d860 <_alltraps>

000000800420d802 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d802:	6a 00                	pushq  $0x0
  800420d804:	6a 23                	pushq  $0x23
  800420d806:	eb 58                	jmp    800420d860 <_alltraps>

000000800420d808 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d808:	6a 00                	pushq  $0x0
  800420d80a:	6a 24                	pushq  $0x24
  800420d80c:	eb 52                	jmp    800420d860 <_alltraps>

000000800420d80e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d80e:	6a 00                	pushq  $0x0
  800420d810:	6a 25                	pushq  $0x25
  800420d812:	eb 4c                	jmp    800420d860 <_alltraps>

000000800420d814 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d814:	6a 00                	pushq  $0x0
  800420d816:	6a 26                	pushq  $0x26
  800420d818:	eb 46                	jmp    800420d860 <_alltraps>

000000800420d81a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d81a:	6a 00                	pushq  $0x0
  800420d81c:	6a 27                	pushq  $0x27
  800420d81e:	eb 40                	jmp    800420d860 <_alltraps>

000000800420d820 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d820:	6a 00                	pushq  $0x0
  800420d822:	6a 28                	pushq  $0x28
  800420d824:	eb 3a                	jmp    800420d860 <_alltraps>

000000800420d826 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d826:	6a 00                	pushq  $0x0
  800420d828:	6a 29                	pushq  $0x29
  800420d82a:	eb 34                	jmp    800420d860 <_alltraps>

000000800420d82c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d82c:	6a 00                	pushq  $0x0
  800420d82e:	6a 2a                	pushq  $0x2a
  800420d830:	eb 2e                	jmp    800420d860 <_alltraps>

000000800420d832 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d832:	6a 00                	pushq  $0x0
  800420d834:	6a 2b                	pushq  $0x2b
  800420d836:	eb 28                	jmp    800420d860 <_alltraps>

000000800420d838 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d838:	6a 00                	pushq  $0x0
  800420d83a:	6a 2c                	pushq  $0x2c
  800420d83c:	eb 22                	jmp    800420d860 <_alltraps>

000000800420d83e <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d83e:	6a 00                	pushq  $0x0
  800420d840:	6a 2d                	pushq  $0x2d
  800420d842:	eb 1c                	jmp    800420d860 <_alltraps>

000000800420d844 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d844:	6a 00                	pushq  $0x0
  800420d846:	6a 2e                	pushq  $0x2e
  800420d848:	eb 16                	jmp    800420d860 <_alltraps>

000000800420d84a <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d84a:	6a 00                	pushq  $0x0
  800420d84c:	6a 2f                	pushq  $0x2f
  800420d84e:	eb 10                	jmp    800420d860 <_alltraps>

000000800420d850 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d850:	6a 00                	pushq  $0x0
  800420d852:	6a 30                	pushq  $0x30
  800420d854:	eb 0a                	jmp    800420d860 <_alltraps>

000000800420d856 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d856:	68 f4 01 00 00       	pushq  $0x1f4
  800420d85b:	eb 03                	jmp    800420d860 <_alltraps>
  800420d85d:	0f 1f 00             	nopl   (%rax)

000000800420d860 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d860:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d864:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d868:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d86b:	48 83 ec 78          	sub    $0x78,%rsp
  800420d86f:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d874:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d879:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d87e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d883:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d888:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d88d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d892:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d897:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d89c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d8a1:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d8a6:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d8ab:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d8b0:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d8b5:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d8b9:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d8be:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d8c0:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d8c2:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d8c4:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d8c6:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d8c8:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d8cb:	e8 b4 f7 ff ff       	callq  800420d084 <trap>

000000800420d8d0 <spin>:
spin:	jmp spin
  800420d8d0:	eb fe                	jmp    800420d8d0 <spin>

000000800420d8d2 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d8d2:	55                   	push   %rbp
  800420d8d3:	48 89 e5             	mov    %rsp,%rbp
  800420d8d6:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d8da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d8de:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d8e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d8e5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d8e8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d8ec:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d8ef:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d8f2:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d8f5:	c9                   	leaveq 
  800420d8f6:	c3                   	retq   

000000800420d8f7 <unlock_kernel>:
  800420d8f7:	55                   	push   %rbp
  800420d8f8:	48 89 e5             	mov    %rsp,%rbp
  800420d8fb:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  800420d902:	00 00 00 
  800420d905:	48 b8 94 7d 21 04 80 	movabs $0x8004217d94,%rax
  800420d90c:	00 00 00 
  800420d90f:	ff d0                	callq  *%rax
  800420d911:	f3 90                	pause  
  800420d913:	5d                   	pop    %rbp
  800420d914:	c3                   	retq   

000000800420d915 <vmxon>:
  800420d915:	55                   	push   %rbp
  800420d916:	48 89 e5             	mov    %rsp,%rbp
  800420d919:	48 83 ec 10          	sub    $0x10,%rsp
  800420d91d:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d924:	00 00 00 
  800420d927:	ff d0                	callq  *%rax
  800420d929:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d930:	00 00 00 
  800420d933:	48 98                	cltq   
  800420d935:	48 c1 e0 03          	shl    $0x3,%rax
  800420d939:	48 89 c1             	mov    %rax,%rcx
  800420d93c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d940:	48 01 c8             	add    %rcx,%rax
  800420d943:	48 01 d0             	add    %rdx,%rax
  800420d946:	48 83 c0 70          	add    $0x70,%rax
  800420d94a:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420d94e:	83 f0 01             	xor    $0x1,%eax
  800420d951:	84 c0                	test   %al,%al
  800420d953:	74 5a                	je     800420d9af <vmxon+0x9a>
  800420d955:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d95a:	48 ba 9b 9d 21 04 80 	movabs $0x8004219d9b,%rdx
  800420d961:	00 00 00 
  800420d964:	ff d2                	callq  *%rdx
  800420d966:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d969:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d96d:	79 25                	jns    800420d994 <vmxon+0x7f>
  800420d96f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d972:	89 c6                	mov    %eax,%esi
  800420d974:	48 bf e0 e6 21 04 80 	movabs $0x800421e6e0,%rdi
  800420d97b:	00 00 00 
  800420d97e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d983:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420d98a:	00 00 00 
  800420d98d:	ff d2                	callq  *%rdx
  800420d98f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d992:	eb 20                	jmp    800420d9b4 <vmxon+0x9f>
  800420d994:	48 bf fb e6 21 04 80 	movabs $0x800421e6fb,%rdi
  800420d99b:	00 00 00 
  800420d99e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9a3:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420d9aa:	00 00 00 
  800420d9ad:	ff d2                	callq  *%rdx
  800420d9af:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9b4:	c9                   	leaveq 
  800420d9b5:	c3                   	retq   

000000800420d9b6 <sched_yield>:
  800420d9b6:	55                   	push   %rbp
  800420d9b7:	48 89 e5             	mov    %rsp,%rbp
  800420d9ba:	48 83 ec 10          	sub    $0x10,%rsp
  800420d9be:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d9c5:	00 00 00 
  800420d9c8:	ff d0                	callq  *%rax
  800420d9ca:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420d9d1:	00 00 00 
  800420d9d4:	48 98                	cltq   
  800420d9d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d9da:	48 89 c1             	mov    %rax,%rcx
  800420d9dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d9e1:	48 01 c8             	add    %rcx,%rax
  800420d9e4:	48 01 d0             	add    %rdx,%rax
  800420d9e7:	48 83 c0 08          	add    $0x8,%rax
  800420d9eb:	48 8b 00             	mov    (%rax),%rax
  800420d9ee:	48 85 c0             	test   %rax,%rax
  800420d9f1:	74 60                	je     800420da53 <sched_yield+0x9d>
  800420d9f3:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420d9fa:	00 00 00 
  800420d9fd:	ff d0                	callq  *%rax
  800420d9ff:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420da06:	00 00 00 
  800420da09:	48 98                	cltq   
  800420da0b:	48 c1 e0 03          	shl    $0x3,%rax
  800420da0f:	48 89 c1             	mov    %rax,%rcx
  800420da12:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da16:	48 01 c8             	add    %rcx,%rax
  800420da19:	48 01 d0             	add    %rdx,%rax
  800420da1c:	48 83 c0 08          	add    $0x8,%rax
  800420da20:	48 8b 00             	mov    (%rax),%rax
  800420da23:	48 89 c2             	mov    %rax,%rdx
  800420da26:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420da2d:	00 00 00 
  800420da30:	48 8b 00             	mov    (%rax),%rax
  800420da33:	48 29 c2             	sub    %rax,%rdx
  800420da36:	48 89 d0             	mov    %rdx,%rax
  800420da39:	48 c1 f8 03          	sar    $0x3,%rax
  800420da3d:	48 89 c2             	mov    %rax,%rdx
  800420da40:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420da47:	fa a4 4f 
  800420da4a:	48 0f af c2          	imul   %rdx,%rax
  800420da4e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da51:	eb 07                	jmp    800420da5a <sched_yield+0xa4>
  800420da53:	c7 45 fc ff 03 00 00 	movl   $0x3ff,-0x4(%rbp)
  800420da5a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800420da61:	eb 75                	jmp    800420dad8 <sched_yield+0x122>
  800420da63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da66:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420da69:	01 c2                	add    %eax,%edx
  800420da6b:	89 d0                	mov    %edx,%eax
  800420da6d:	c1 f8 1f             	sar    $0x1f,%eax
  800420da70:	c1 e8 16             	shr    $0x16,%eax
  800420da73:	01 c2                	add    %eax,%edx
  800420da75:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420da7b:	29 c2                	sub    %eax,%edx
  800420da7d:	89 d0                	mov    %edx,%eax
  800420da7f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800420da82:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420da89:	00 00 00 
  800420da8c:	48 8b 10             	mov    (%rax),%rdx
  800420da8f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420da92:	48 98                	cltq   
  800420da94:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420da9b:	48 01 d0             	add    %rdx,%rax
  800420da9e:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420daa4:	83 f8 02             	cmp    $0x2,%eax
  800420daa7:	75 2b                	jne    800420dad4 <sched_yield+0x11e>
  800420daa9:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dab0:	00 00 00 
  800420dab3:	48 8b 10             	mov    (%rax),%rdx
  800420dab6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420dab9:	48 98                	cltq   
  800420dabb:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dac2:	48 01 d0             	add    %rdx,%rax
  800420dac5:	48 89 c7             	mov    %rax,%rdi
  800420dac8:	48 b8 92 96 20 04 80 	movabs $0x8004209692,%rax
  800420dacf:	00 00 00 
  800420dad2:	ff d0                	callq  *%rax
  800420dad4:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800420dad8:	81 7d f8 00 04 00 00 	cmpl   $0x400,-0x8(%rbp)
  800420dadf:	7e 82                	jle    800420da63 <sched_yield+0xad>
  800420dae1:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420dae8:	00 00 00 
  800420daeb:	ff d0                	callq  *%rax
  800420daed:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420daf4:	00 00 00 
  800420daf7:	48 98                	cltq   
  800420daf9:	48 c1 e0 03          	shl    $0x3,%rax
  800420dafd:	48 89 c1             	mov    %rax,%rcx
  800420db00:	48 c1 e1 04          	shl    $0x4,%rcx
  800420db04:	48 01 c8             	add    %rcx,%rax
  800420db07:	48 01 d0             	add    %rdx,%rax
  800420db0a:	48 83 c0 08          	add    $0x8,%rax
  800420db0e:	48 8b 00             	mov    (%rax),%rax
  800420db11:	48 85 c0             	test   %rax,%rax
  800420db14:	74 7a                	je     800420db90 <sched_yield+0x1da>
  800420db16:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420db1d:	00 00 00 
  800420db20:	ff d0                	callq  *%rax
  800420db22:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420db29:	00 00 00 
  800420db2c:	48 98                	cltq   
  800420db2e:	48 c1 e0 03          	shl    $0x3,%rax
  800420db32:	48 89 c1             	mov    %rax,%rcx
  800420db35:	48 c1 e1 04          	shl    $0x4,%rcx
  800420db39:	48 01 c8             	add    %rcx,%rax
  800420db3c:	48 01 d0             	add    %rdx,%rax
  800420db3f:	48 83 c0 08          	add    $0x8,%rax
  800420db43:	48 8b 00             	mov    (%rax),%rax
  800420db46:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db4c:	83 f8 03             	cmp    $0x3,%eax
  800420db4f:	75 3f                	jne    800420db90 <sched_yield+0x1da>
  800420db51:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420db58:	00 00 00 
  800420db5b:	ff d0                	callq  *%rax
  800420db5d:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420db64:	00 00 00 
  800420db67:	48 98                	cltq   
  800420db69:	48 c1 e0 03          	shl    $0x3,%rax
  800420db6d:	48 89 c1             	mov    %rax,%rcx
  800420db70:	48 c1 e1 04          	shl    $0x4,%rcx
  800420db74:	48 01 c8             	add    %rcx,%rax
  800420db77:	48 01 d0             	add    %rdx,%rax
  800420db7a:	48 83 c0 08          	add    $0x8,%rax
  800420db7e:	48 8b 00             	mov    (%rax),%rax
  800420db81:	48 89 c7             	mov    %rax,%rdi
  800420db84:	48 b8 92 96 20 04 80 	movabs $0x8004209692,%rax
  800420db8b:	00 00 00 
  800420db8e:	ff d0                	callq  *%rax
  800420db90:	48 b8 9e db 20 04 80 	movabs $0x800420db9e,%rax
  800420db97:	00 00 00 
  800420db9a:	ff d0                	callq  *%rax
  800420db9c:	c9                   	leaveq 
  800420db9d:	c3                   	retq   

000000800420db9e <sched_halt>:
  800420db9e:	55                   	push   %rbp
  800420db9f:	48 89 e5             	mov    %rsp,%rbp
  800420dba2:	48 83 ec 20          	sub    $0x20,%rsp
  800420dba6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420dbad:	eb 79                	jmp    800420dc28 <sched_halt+0x8a>
  800420dbaf:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dbb6:	00 00 00 
  800420dbb9:	48 8b 10             	mov    (%rax),%rdx
  800420dbbc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dbbf:	48 98                	cltq   
  800420dbc1:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbc8:	48 01 d0             	add    %rdx,%rax
  800420dbcb:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dbd1:	83 f8 02             	cmp    $0x2,%eax
  800420dbd4:	74 5f                	je     800420dc35 <sched_halt+0x97>
  800420dbd6:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dbdd:	00 00 00 
  800420dbe0:	48 8b 10             	mov    (%rax),%rdx
  800420dbe3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dbe6:	48 98                	cltq   
  800420dbe8:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbef:	48 01 d0             	add    %rdx,%rax
  800420dbf2:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dbf8:	83 f8 03             	cmp    $0x3,%eax
  800420dbfb:	74 38                	je     800420dc35 <sched_halt+0x97>
  800420dbfd:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  800420dc04:	00 00 00 
  800420dc07:	48 8b 10             	mov    (%rax),%rdx
  800420dc0a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dc0d:	48 98                	cltq   
  800420dc0f:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc16:	48 01 d0             	add    %rdx,%rax
  800420dc19:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc1f:	83 f8 01             	cmp    $0x1,%eax
  800420dc22:	74 11                	je     800420dc35 <sched_halt+0x97>
  800420dc24:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420dc28:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420dc2f:	0f 8e 7a ff ff ff    	jle    800420dbaf <sched_halt+0x11>
  800420dc35:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420dc3c:	75 2e                	jne    800420dc6c <sched_halt+0xce>
  800420dc3e:	48 bf 08 e7 21 04 80 	movabs $0x800421e708,%rdi
  800420dc45:	00 00 00 
  800420dc48:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dc4d:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420dc54:	00 00 00 
  800420dc57:	ff d2                	callq  *%rdx
  800420dc59:	bf 00 00 00 00       	mov    $0x0,%edi
  800420dc5e:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420dc65:	00 00 00 
  800420dc68:	ff d0                	callq  *%rax
  800420dc6a:	eb ed                	jmp    800420dc59 <sched_halt+0xbb>
  800420dc6c:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420dc73:	00 00 00 
  800420dc76:	ff d0                	callq  *%rax
  800420dc78:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420dc7f:	00 00 00 
  800420dc82:	48 98                	cltq   
  800420dc84:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc88:	48 89 c1             	mov    %rax,%rcx
  800420dc8b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc8f:	48 01 c8             	add    %rcx,%rax
  800420dc92:	48 01 d0             	add    %rdx,%rax
  800420dc95:	48 83 c0 08          	add    $0x8,%rax
  800420dc99:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420dca0:	48 b8 f0 a5 6d 04 80 	movabs $0x80046da5f0,%rax
  800420dca7:	00 00 00 
  800420dcaa:	48 8b 00             	mov    (%rax),%rax
  800420dcad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420dcb1:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420dcb8:	00 00 00 
  800420dcbb:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420dcbf:	77 32                	ja     800420dcf3 <sched_halt+0x155>
  800420dcc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dcc5:	48 89 c1             	mov    %rax,%rcx
  800420dcc8:	48 ba 38 e7 21 04 80 	movabs $0x800421e738,%rdx
  800420dccf:	00 00 00 
  800420dcd2:	be 5a 00 00 00       	mov    $0x5a,%esi
  800420dcd7:	48 bf 5c e7 21 04 80 	movabs $0x800421e75c,%rdi
  800420dcde:	00 00 00 
  800420dce1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dce6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420dced:	00 00 00 
  800420dcf0:	41 ff d0             	callq  *%r8
  800420dcf3:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420dcfa:	ff ff ff 
  800420dcfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dd01:	48 01 d0             	add    %rdx,%rax
  800420dd04:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420dd08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420dd0c:	0f 22 d8             	mov    %rax,%cr3
  800420dd0f:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420dd16:	00 00 00 
  800420dd19:	ff d0                	callq  *%rax
  800420dd1b:	48 98                	cltq   
  800420dd1d:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd21:	48 89 c2             	mov    %rax,%rdx
  800420dd24:	48 c1 e2 04          	shl    $0x4,%rdx
  800420dd28:	48 01 d0             	add    %rdx,%rax
  800420dd2b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420dd32:	00 00 00 
  800420dd35:	48 01 d0             	add    %rdx,%rax
  800420dd38:	48 83 c0 04          	add    $0x4,%rax
  800420dd3c:	be 02 00 00 00       	mov    $0x2,%esi
  800420dd41:	48 89 c7             	mov    %rax,%rdi
  800420dd44:	48 b8 d2 d8 20 04 80 	movabs $0x800420d8d2,%rax
  800420dd4b:	00 00 00 
  800420dd4e:	ff d0                	callq  *%rax
  800420dd50:	48 b8 f7 d8 20 04 80 	movabs $0x800420d8f7,%rax
  800420dd57:	00 00 00 
  800420dd5a:	ff d0                	callq  *%rax
  800420dd5c:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420dd63:	00 00 00 
  800420dd66:	ff d0                	callq  *%rax
  800420dd68:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420dd6f:	00 00 00 
  800420dd72:	48 98                	cltq   
  800420dd74:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd78:	48 89 c1             	mov    %rax,%rcx
  800420dd7b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd7f:	48 01 c8             	add    %rcx,%rax
  800420dd82:	48 01 d0             	add    %rdx,%rax
  800420dd85:	48 83 c0 10          	add    $0x10,%rax
  800420dd89:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420dd8d:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420dd94:	48 89 c4             	mov    %rax,%rsp
  800420dd97:	6a 00                	pushq  $0x0
  800420dd99:	6a 00                	pushq  $0x0
  800420dd9b:	fb                   	sti    
  800420dd9c:	f4                   	hlt    
  800420dd9d:	c9                   	leaveq 
  800420dd9e:	c3                   	retq   

000000800420dd9f <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420dd9f:	55                   	push   %rbp
  800420dda0:	48 89 e5             	mov    %rsp,%rbp
  800420dda3:	48 83 ec 10          	sub    $0x10,%rsp
  800420dda7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ddab:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420ddaf:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420ddb6:	00 00 00 
  800420ddb9:	ff d0                	callq  *%rax
  800420ddbb:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420ddc2:	00 00 00 
  800420ddc5:	48 98                	cltq   
  800420ddc7:	48 c1 e0 03          	shl    $0x3,%rax
  800420ddcb:	48 89 c1             	mov    %rax,%rcx
  800420ddce:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ddd2:	48 01 c8             	add    %rcx,%rax
  800420ddd5:	48 01 d0             	add    %rdx,%rax
  800420ddd8:	48 83 c0 08          	add    $0x8,%rax
  800420dddc:	48 8b 00             	mov    (%rax),%rax
  800420dddf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420dde3:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420dde7:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420ddec:	48 89 c7             	mov    %rax,%rdi
  800420ddef:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420ddf6:	00 00 00 
  800420ddf9:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420ddfb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420ddff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420de03:	48 89 c6             	mov    %rax,%rsi
  800420de06:	48 bf 70 e7 21 04 80 	movabs $0x800421e770,%rdi
  800420de0d:	00 00 00 
  800420de10:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de15:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800420de1c:	00 00 00 
  800420de1f:	ff d1                	callq  *%rcx
}
  800420de21:	c9                   	leaveq 
  800420de22:	c3                   	retq   

000000800420de23 <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420de23:	55                   	push   %rbp
  800420de24:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420de27:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  800420de2e:	00 00 00 
  800420de31:	ff d0                	callq  *%rax
}
  800420de33:	5d                   	pop    %rbp
  800420de34:	c3                   	retq   

000000800420de35 <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420de35:	55                   	push   %rbp
  800420de36:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420de39:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420de40:	00 00 00 
  800420de43:	ff d0                	callq  *%rax
  800420de45:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420de4c:	00 00 00 
  800420de4f:	48 98                	cltq   
  800420de51:	48 c1 e0 03          	shl    $0x3,%rax
  800420de55:	48 89 c1             	mov    %rax,%rcx
  800420de58:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de5c:	48 01 c8             	add    %rcx,%rax
  800420de5f:	48 01 d0             	add    %rdx,%rax
  800420de62:	48 83 c0 08          	add    $0x8,%rax
  800420de66:	48 8b 00             	mov    (%rax),%rax
  800420de69:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420de6f:	5d                   	pop    %rbp
  800420de70:	c3                   	retq   

000000800420de71 <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420de71:	55                   	push   %rbp
  800420de72:	48 89 e5             	mov    %rsp,%rbp
  800420de75:	48 83 ec 20          	sub    $0x20,%rsp
  800420de79:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420de7c:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420de80:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420de83:	ba 01 00 00 00       	mov    $0x1,%edx
  800420de88:	48 89 ce             	mov    %rcx,%rsi
  800420de8b:	89 c7                	mov    %eax,%edi
  800420de8d:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420de94:	00 00 00 
  800420de97:	ff d0                	callq  *%rax
  800420de99:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420de9c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dea0:	79 05                	jns    800420dea7 <sys_env_destroy+0x36>
		return r;
  800420dea2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dea5:	eb 18                	jmp    800420debf <sys_env_destroy+0x4e>
	env_destroy(e);
  800420dea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420deab:	48 89 c7             	mov    %rax,%rdi
  800420deae:	48 b8 c7 94 20 04 80 	movabs $0x80042094c7,%rax
  800420deb5:	00 00 00 
  800420deb8:	ff d0                	callq  *%rax
	return 0;
  800420deba:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420debf:	c9                   	leaveq 
  800420dec0:	c3                   	retq   

000000800420dec1 <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420dec1:	55                   	push   %rbp
  800420dec2:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420dec5:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  800420decc:	00 00 00 
  800420decf:	ff d0                	callq  *%rax

000000800420ded1 <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420ded1:	55                   	push   %rbp
  800420ded2:	48 89 e5             	mov    %rsp,%rbp
  800420ded5:	53                   	push   %rbx
  800420ded6:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420deda:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420dee1:	00 00 00 
  800420dee4:	ff d0                	callq  *%rax
  800420dee6:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420deed:	00 00 00 
  800420def0:	48 98                	cltq   
  800420def2:	48 c1 e0 03          	shl    $0x3,%rax
  800420def6:	48 89 c1             	mov    %rax,%rcx
  800420def9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420defd:	48 01 c8             	add    %rcx,%rax
  800420df00:	48 01 d0             	add    %rdx,%rax
  800420df03:	48 83 c0 08          	add    $0x8,%rax
  800420df07:	48 8b 00             	mov    (%rax),%rax
  800420df0a:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420df10:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420df14:	89 d6                	mov    %edx,%esi
  800420df16:	48 89 c7             	mov    %rax,%rdi
  800420df19:	48 b8 05 89 20 04 80 	movabs $0x8004208905,%rax
  800420df20:	00 00 00 
  800420df23:	ff d0                	callq  *%rax
  800420df25:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420df28:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420df2c:	79 05                	jns    800420df33 <sys_exofork+0x62>
		return r;
  800420df2e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420df31:	eb 6c                	jmp    800420df9f <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420df33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420df37:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420df3e:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420df41:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420df45:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420df4c:	00 00 00 
  800420df4f:	ff d0                	callq  *%rax
  800420df51:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420df58:	00 00 00 
  800420df5b:	48 98                	cltq   
  800420df5d:	48 c1 e0 03          	shl    $0x3,%rax
  800420df61:	48 89 c1             	mov    %rax,%rcx
  800420df64:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df68:	48 01 c8             	add    %rcx,%rax
  800420df6b:	48 01 d0             	add    %rdx,%rax
  800420df6e:	48 83 c0 08          	add    $0x8,%rax
  800420df72:	48 8b 00             	mov    (%rax),%rax
  800420df75:	48 89 da             	mov    %rbx,%rdx
  800420df78:	48 89 c6             	mov    %rax,%rsi
  800420df7b:	b8 18 00 00 00       	mov    $0x18,%eax
  800420df80:	48 89 d7             	mov    %rdx,%rdi
  800420df83:	48 89 c1             	mov    %rax,%rcx
  800420df86:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420df89:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420df8d:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420df94:	00 
	return e->env_id;
  800420df95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420df99:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420df9f:	48 83 c4 18          	add    $0x18,%rsp
  800420dfa3:	5b                   	pop    %rbx
  800420dfa4:	5d                   	pop    %rbp
  800420dfa5:	c3                   	retq   

000000800420dfa6 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420dfa6:	55                   	push   %rbp
  800420dfa7:	48 89 e5             	mov    %rsp,%rbp
  800420dfaa:	48 83 ec 20          	sub    $0x20,%rsp
  800420dfae:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420dfb1:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420dfb4:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420dfb8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dfbb:	ba 01 00 00 00       	mov    $0x1,%edx
  800420dfc0:	48 89 ce             	mov    %rcx,%rsi
  800420dfc3:	89 c7                	mov    %eax,%edi
  800420dfc5:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420dfcc:	00 00 00 
  800420dfcf:	ff d0                	callq  *%rax
  800420dfd1:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420dfd4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420dfd8:	79 05                	jns    800420dfdf <sys_env_set_status+0x39>
		return r;
  800420dfda:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dfdd:	eb 25                	jmp    800420e004 <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420dfdf:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420dfe3:	74 0d                	je     800420dff2 <sys_env_set_status+0x4c>
  800420dfe5:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420dfe9:	74 07                	je     800420dff2 <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420dfeb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420dff0:	eb 12                	jmp    800420e004 <sys_env_set_status+0x5e>
	e->env_status = status;
  800420dff2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dff6:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420dff9:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420dfff:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e004:	c9                   	leaveq 
  800420e005:	c3                   	retq   

000000800420e006 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420e006:	55                   	push   %rbp
  800420e007:	48 89 e5             	mov    %rsp,%rbp
  800420e00a:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e011:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e017:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420e01e:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e025:	00 00 00 
  800420e028:	ff d0                	callq  *%rax
  800420e02a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e031:	00 00 00 
  800420e034:	48 98                	cltq   
  800420e036:	48 c1 e0 03          	shl    $0x3,%rax
  800420e03a:	48 89 c1             	mov    %rax,%rcx
  800420e03d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e041:	48 01 c8             	add    %rcx,%rax
  800420e044:	48 01 d0             	add    %rdx,%rax
  800420e047:	48 83 c0 08          	add    $0x8,%rax
  800420e04b:	48 8b 00             	mov    (%rax),%rax
  800420e04e:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e055:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e05a:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e05f:	48 89 c7             	mov    %rax,%rdi
  800420e062:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e069:	00 00 00 
  800420e06c:	ff d0                	callq  *%rax
	ltf = *tf;
  800420e06e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e075:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e07c:	48 89 c6             	mov    %rax,%rsi
  800420e07f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e084:	48 89 d7             	mov    %rdx,%rdi
  800420e087:	48 89 c1             	mov    %rax,%rcx
  800420e08a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420e08d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e091:	80 cc 02             	or     $0x2,%ah
  800420e094:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420e098:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e09c:	83 c8 03             	or     $0x3,%eax
  800420e09f:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e0a3:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e0a7:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e0ad:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e0b2:	48 89 ce             	mov    %rcx,%rsi
  800420e0b5:	89 c7                	mov    %eax,%edi
  800420e0b7:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e0be:	00 00 00 
  800420e0c1:	ff d0                	callq  *%rax
  800420e0c3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e0c6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e0ca:	79 05                	jns    800420e0d1 <sys_env_set_trapframe+0xcb>
		return r;
  800420e0cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e0cf:	eb 21                	jmp    800420e0f2 <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420e0d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e0d5:	48 89 c2             	mov    %rax,%rdx
  800420e0d8:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e0df:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e0e4:	48 89 d7             	mov    %rdx,%rdi
  800420e0e7:	48 89 c1             	mov    %rax,%rcx
  800420e0ea:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420e0ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e0f2:	c9                   	leaveq 
  800420e0f3:	c3                   	retq   

000000800420e0f4 <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420e0f4:	55                   	push   %rbp
  800420e0f5:	48 89 e5             	mov    %rsp,%rbp
  800420e0f8:	48 83 ec 20          	sub    $0x20,%rsp
  800420e0fc:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e0ff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e103:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e107:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e10a:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e10f:	48 89 ce             	mov    %rcx,%rsi
  800420e112:	89 c7                	mov    %eax,%edi
  800420e114:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e11b:	00 00 00 
  800420e11e:	ff d0                	callq  *%rax
  800420e120:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e123:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e127:	79 05                	jns    800420e12e <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420e129:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e12c:	eb 14                	jmp    800420e142 <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420e12e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e132:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e136:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420e13d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e142:	c9                   	leaveq 
  800420e143:	c3                   	retq   

000000800420e144 <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420e144:	55                   	push   %rbp
  800420e145:	48 89 e5             	mov    %rsp,%rbp
  800420e148:	48 83 ec 30          	sub    $0x30,%rsp
  800420e14c:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e14f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e153:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e156:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e15a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e15d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e162:	48 89 ce             	mov    %rcx,%rsi
  800420e165:	89 c7                	mov    %eax,%edi
  800420e167:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e16e:	00 00 00 
  800420e171:	ff d0                	callq  *%rax
  800420e173:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e176:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e17a:	79 08                	jns    800420e184 <sys_page_alloc+0x40>
		return r;
  800420e17c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e17f:	e9 a7 00 00 00       	jmpq   800420e22b <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e184:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e187:	f7 d0                	not    %eax
  800420e189:	83 e0 05             	and    $0x5,%eax
  800420e18c:	85 c0                	test   %eax,%eax
  800420e18e:	75 0c                	jne    800420e19c <sys_page_alloc+0x58>
  800420e190:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e193:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e198:	85 c0                	test   %eax,%eax
  800420e19a:	74 0a                	je     800420e1a6 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420e19c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e1a1:	e9 85 00 00 00       	jmpq   800420e22b <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420e1a6:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e1ad:	00 00 00 
  800420e1b0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e1b4:	76 07                	jbe    800420e1bd <sys_page_alloc+0x79>
		return -E_INVAL;
  800420e1b6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e1bb:	eb 6e                	jmp    800420e22b <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420e1bd:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e1c2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420e1c9:	00 00 00 
  800420e1cc:	ff d0                	callq  *%rax
  800420e1ce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e1d2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e1d7:	75 07                	jne    800420e1e0 <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420e1d9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e1de:	eb 4b                	jmp    800420e22b <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420e1e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e1e4:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e1eb:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e1ee:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e1f2:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e1f6:	48 89 c7             	mov    %rax,%rdi
  800420e1f9:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e200:	00 00 00 
  800420e203:	ff d0                	callq  *%rax
  800420e205:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e208:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e20c:	79 18                	jns    800420e226 <sys_page_alloc+0xe2>
		page_free(pp);
  800420e20e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e212:	48 89 c7             	mov    %rax,%rdi
  800420e215:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420e21c:	00 00 00 
  800420e21f:	ff d0                	callq  *%rax
		return r;
  800420e221:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e224:	eb 05                	jmp    800420e22b <sys_page_alloc+0xe7>
	}
	return 0;
  800420e226:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e22b:	c9                   	leaveq 
  800420e22c:	c3                   	retq   

000000800420e22d <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420e22d:	55                   	push   %rbp
  800420e22e:	48 89 e5             	mov    %rsp,%rbp
  800420e231:	48 83 ec 60          	sub    $0x60,%rsp
  800420e235:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e238:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e23c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e23f:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e243:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420e247:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e24e:	00 00 00 
  800420e251:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e255:	77 10                	ja     800420e267 <sys_page_map+0x3a>
  800420e257:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e25e:	00 00 00 
  800420e261:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e265:	76 0a                	jbe    800420e271 <sys_page_map+0x44>
		return -E_INVAL;
  800420e267:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e26c:	e9 3f 01 00 00       	jmpq   800420e3b0 <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420e271:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e275:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e279:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e27d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e283:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e287:	75 18                	jne    800420e2a1 <sys_page_map+0x74>
  800420e289:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e28d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e291:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e295:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e29b:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e29f:	74 0a                	je     800420e2ab <sys_page_map+0x7e>
		return -E_INVAL;
  800420e2a1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e2a6:	e9 05 01 00 00       	jmpq   800420e3b0 <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420e2ab:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e2af:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e2b2:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e2b7:	48 89 ce             	mov    %rcx,%rsi
  800420e2ba:	89 c7                	mov    %eax,%edi
  800420e2bc:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e2c3:	00 00 00 
  800420e2c6:	ff d0                	callq  *%rax
  800420e2c8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e2cb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e2cf:	78 26                	js     800420e2f7 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420e2d1:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e2d5:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e2d8:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e2dd:	48 89 ce             	mov    %rcx,%rsi
  800420e2e0:	89 c7                	mov    %eax,%edi
  800420e2e2:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e2e9:	00 00 00 
  800420e2ec:	ff d0                	callq  *%rax
  800420e2ee:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e2f1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e2f5:	79 08                	jns    800420e2ff <sys_page_map+0xd2>
		return r;
  800420e2f7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e2fa:	e9 b1 00 00 00       	jmpq   800420e3b0 <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e2ff:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e302:	f7 d0                	not    %eax
  800420e304:	83 e0 05             	and    $0x5,%eax
  800420e307:	85 c0                	test   %eax,%eax
  800420e309:	75 0c                	jne    800420e317 <sys_page_map+0xea>
  800420e30b:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e30e:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e313:	85 c0                	test   %eax,%eax
  800420e315:	74 0a                	je     800420e321 <sys_page_map+0xf4>
		return -E_INVAL;
  800420e317:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e31c:	e9 8f 00 00 00       	jmpq   800420e3b0 <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420e321:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e325:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e32c:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e330:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e334:	48 89 ce             	mov    %rcx,%rsi
  800420e337:	48 89 c7             	mov    %rax,%rdi
  800420e33a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e341:	00 00 00 
  800420e344:	ff d0                	callq  *%rax
  800420e346:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e34a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e34f:	75 07                	jne    800420e358 <sys_page_map+0x12b>
		return -E_INVAL;
  800420e351:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e356:	eb 58                	jmp    800420e3b0 <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e358:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e35b:	83 e0 02             	and    $0x2,%eax
  800420e35e:	85 c0                	test   %eax,%eax
  800420e360:	74 16                	je     800420e378 <sys_page_map+0x14b>
  800420e362:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e366:	48 8b 00             	mov    (%rax),%rax
  800420e369:	83 e0 02             	and    $0x2,%eax
  800420e36c:	48 85 c0             	test   %rax,%rax
  800420e36f:	75 07                	jne    800420e378 <sys_page_map+0x14b>
		return -E_INVAL;
  800420e371:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e376:	eb 38                	jmp    800420e3b0 <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420e378:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e37c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e383:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e386:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e38a:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e38e:	48 89 c7             	mov    %rax,%rdi
  800420e391:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e398:	00 00 00 
  800420e39b:	ff d0                	callq  *%rax
  800420e39d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e3a0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e3a4:	79 05                	jns    800420e3ab <sys_page_map+0x17e>
		return r;
  800420e3a6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e3a9:	eb 05                	jmp    800420e3b0 <sys_page_map+0x183>
	return 0;
  800420e3ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e3b0:	c9                   	leaveq 
  800420e3b1:	c3                   	retq   

000000800420e3b2 <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420e3b2:	55                   	push   %rbp
  800420e3b3:	48 89 e5             	mov    %rsp,%rbp
  800420e3b6:	48 83 ec 20          	sub    $0x20,%rsp
  800420e3ba:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e3bd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e3c1:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e3c5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e3c8:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e3cd:	48 89 ce             	mov    %rcx,%rsi
  800420e3d0:	89 c7                	mov    %eax,%edi
  800420e3d2:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e3d9:	00 00 00 
  800420e3dc:	ff d0                	callq  *%rax
  800420e3de:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e3e1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e3e5:	79 05                	jns    800420e3ec <sys_page_unmap+0x3a>
		return r;
  800420e3e7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e3ea:	eb 4b                	jmp    800420e437 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420e3ec:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e3f3:	00 00 00 
  800420e3f6:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e3fa:	77 0e                	ja     800420e40a <sys_page_unmap+0x58>
  800420e3fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e400:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e405:	48 85 c0             	test   %rax,%rax
  800420e408:	74 07                	je     800420e411 <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420e40a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e40f:	eb 26                	jmp    800420e437 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420e411:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e415:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e41c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e420:	48 89 d6             	mov    %rdx,%rsi
  800420e423:	48 89 c7             	mov    %rax,%rdi
  800420e426:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420e42d:	00 00 00 
  800420e430:	ff d0                	callq  *%rax
	return 0;
  800420e432:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e437:	c9                   	leaveq 
  800420e438:	c3                   	retq   

000000800420e439 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420e439:	55                   	push   %rbp
  800420e43a:	48 89 e5             	mov    %rsp,%rbp
  800420e43d:	53                   	push   %rbx
  800420e43e:	48 83 ec 48          	sub    $0x48,%rsp
  800420e442:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420e445:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420e448:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420e44c:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420e44f:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e453:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420e456:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e45b:	48 89 ce             	mov    %rcx,%rsi
  800420e45e:	89 c7                	mov    %eax,%edi
  800420e460:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e467:	00 00 00 
  800420e46a:	ff d0                	callq  *%rax
  800420e46c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e46f:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e473:	79 08                	jns    800420e47d <sys_ipc_try_send+0x44>
        return r;
  800420e475:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e478:	e9 25 03 00 00       	jmpq   800420e7a2 <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420e47d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e481:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e488:	83 f0 01             	xor    $0x1,%eax
  800420e48b:	84 c0                	test   %al,%al
  800420e48d:	74 0a                	je     800420e499 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420e48f:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e494:	e9 09 03 00 00       	jmpq   800420e7a2 <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420e499:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e4a0:	00 00 00 
  800420e4a3:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420e4a7:	0f 87 70 02 00 00    	ja     800420e71d <sys_ipc_try_send+0x2e4>
  800420e4ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e4b1:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e4b8:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e4bf:	00 00 00 
  800420e4c2:	48 39 c2             	cmp    %rax,%rdx
  800420e4c5:	0f 87 52 02 00 00    	ja     800420e71d <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420e4cb:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e4ce:	f7 d0                	not    %eax
  800420e4d0:	83 e0 05             	and    $0x5,%eax
  800420e4d3:	85 c0                	test   %eax,%eax
  800420e4d5:	75 0c                	jne    800420e4e3 <sys_ipc_try_send+0xaa>
  800420e4d7:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e4da:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e4df:	85 c0                	test   %eax,%eax
  800420e4e1:	74 60                	je     800420e543 <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420e4e3:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e4ea:	00 00 00 
  800420e4ed:	ff d0                	callq  *%rax
  800420e4ef:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e4f6:	00 00 00 
  800420e4f9:	48 98                	cltq   
  800420e4fb:	48 c1 e0 03          	shl    $0x3,%rax
  800420e4ff:	48 89 c1             	mov    %rax,%rcx
  800420e502:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e506:	48 01 c8             	add    %rcx,%rax
  800420e509:	48 01 d0             	add    %rdx,%rax
  800420e50c:	48 83 c0 08          	add    $0x8,%rax
  800420e510:	48 8b 00             	mov    (%rax),%rax
  800420e513:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e519:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e51c:	89 c6                	mov    %eax,%esi
  800420e51e:	48 bf 78 e7 21 04 80 	movabs $0x800421e778,%rdi
  800420e525:	00 00 00 
  800420e528:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e52d:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800420e534:	00 00 00 
  800420e537:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e539:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e53e:	e9 5f 02 00 00       	jmpq   800420e7a2 <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420e543:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e54a:	00 00 00 
  800420e54d:	ff d0                	callq  *%rax
  800420e54f:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e556:	00 00 00 
  800420e559:	48 98                	cltq   
  800420e55b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e55f:	48 89 c1             	mov    %rax,%rcx
  800420e562:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e566:	48 01 c8             	add    %rcx,%rax
  800420e569:	48 01 d0             	add    %rdx,%rax
  800420e56c:	48 83 c0 08          	add    $0x8,%rax
  800420e570:	48 8b 00             	mov    (%rax),%rax
  800420e573:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e57a:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e57e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e582:	48 89 ce             	mov    %rcx,%rsi
  800420e585:	48 89 c7             	mov    %rax,%rdi
  800420e588:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e58f:	00 00 00 
  800420e592:	ff d0                	callq  *%rax
  800420e594:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420e598:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e59d:	75 61                	jne    800420e600 <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420e59f:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e5a6:	00 00 00 
  800420e5a9:	ff d0                	callq  *%rax
  800420e5ab:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e5b2:	00 00 00 
  800420e5b5:	48 98                	cltq   
  800420e5b7:	48 c1 e0 03          	shl    $0x3,%rax
  800420e5bb:	48 89 c1             	mov    %rax,%rcx
  800420e5be:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e5c2:	48 01 c8             	add    %rcx,%rax
  800420e5c5:	48 01 d0             	add    %rdx,%rax
  800420e5c8:	48 83 c0 08          	add    $0x8,%rax
  800420e5cc:	48 8b 00             	mov    (%rax),%rax
  800420e5cf:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e5d5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e5d9:	89 c6                	mov    %eax,%esi
  800420e5db:	48 bf a0 e7 21 04 80 	movabs $0x800421e7a0,%rdi
  800420e5e2:	00 00 00 
  800420e5e5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e5ea:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800420e5f1:	00 00 00 
  800420e5f4:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e5f6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e5fb:	e9 a2 01 00 00       	jmpq   800420e7a2 <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420e600:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e603:	83 e0 02             	and    $0x2,%eax
  800420e606:	85 c0                	test   %eax,%eax
  800420e608:	74 6c                	je     800420e676 <sys_ipc_try_send+0x23d>
  800420e60a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e60e:	48 8b 00             	mov    (%rax),%rax
  800420e611:	83 e0 02             	and    $0x2,%eax
  800420e614:	48 85 c0             	test   %rax,%rax
  800420e617:	75 5d                	jne    800420e676 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420e619:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e620:	00 00 00 
  800420e623:	ff d0                	callq  *%rax
  800420e625:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e62c:	00 00 00 
  800420e62f:	48 98                	cltq   
  800420e631:	48 c1 e0 03          	shl    $0x3,%rax
  800420e635:	48 89 c1             	mov    %rax,%rcx
  800420e638:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e63c:	48 01 c8             	add    %rcx,%rax
  800420e63f:	48 01 d0             	add    %rdx,%rax
  800420e642:	48 83 c0 08          	add    $0x8,%rax
  800420e646:	48 8b 00             	mov    (%rax),%rax
  800420e649:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e64f:	89 c6                	mov    %eax,%esi
  800420e651:	48 bf d8 e7 21 04 80 	movabs $0x800421e7d8,%rdi
  800420e658:	00 00 00 
  800420e65b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e660:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800420e667:	00 00 00 
  800420e66a:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420e66c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e671:	e9 2c 01 00 00       	jmpq   800420e7a2 <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420e676:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e679:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e67d:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e684:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e688:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e68f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e693:	48 89 c7             	mov    %rax,%rdi
  800420e696:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e69d:	00 00 00 
  800420e6a0:	ff d0                	callq  *%rax
  800420e6a2:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420e6a5:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e6a9:	79 63                	jns    800420e70e <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e6ab:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e6b2:	00 00 00 
  800420e6b5:	ff d0                	callq  *%rax
  800420e6b7:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e6be:	00 00 00 
  800420e6c1:	48 98                	cltq   
  800420e6c3:	48 c1 e0 03          	shl    $0x3,%rax
  800420e6c7:	48 89 c1             	mov    %rax,%rcx
  800420e6ca:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e6ce:	48 01 c8             	add    %rcx,%rax
  800420e6d1:	48 01 d0             	add    %rdx,%rax
  800420e6d4:	48 83 c0 08          	add    $0x8,%rax
  800420e6d8:	48 8b 00             	mov    (%rax),%rax
  800420e6db:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e6e1:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e6e4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e6e8:	89 c6                	mov    %eax,%esi
  800420e6ea:	48 bf 20 e8 21 04 80 	movabs $0x800421e820,%rdi
  800420e6f1:	00 00 00 
  800420e6f4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e6f9:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  800420e700:	00 00 00 
  800420e703:	41 ff d0             	callq  *%r8
            return r;
  800420e706:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e709:	e9 94 00 00 00       	jmpq   800420e7a2 <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420e70e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e712:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e715:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e71b:	eb 0e                	jmp    800420e72b <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420e71d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e721:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e728:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420e72b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e72f:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420e736:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420e73a:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e741:	00 00 00 
  800420e744:	ff d0                	callq  *%rax
  800420e746:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e74d:	00 00 00 
  800420e750:	48 98                	cltq   
  800420e752:	48 c1 e0 03          	shl    $0x3,%rax
  800420e756:	48 89 c1             	mov    %rax,%rcx
  800420e759:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e75d:	48 01 c8             	add    %rcx,%rax
  800420e760:	48 01 d0             	add    %rdx,%rax
  800420e763:	48 83 c0 08          	add    $0x8,%rax
  800420e767:	48 8b 00             	mov    (%rax),%rax
  800420e76a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e770:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420e776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e77a:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e77d:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420e783:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e787:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e78e:	00 
    e->env_status = ENV_RUNNABLE;
  800420e78f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e793:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e79a:	00 00 00 
    return 0;
  800420e79d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e7a2:	48 83 c4 48          	add    $0x48,%rsp
  800420e7a6:	5b                   	pop    %rbx
  800420e7a7:	5d                   	pop    %rbp
  800420e7a8:	c3                   	retq   

000000800420e7a9 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420e7a9:	55                   	push   %rbp
  800420e7aa:	48 89 e5             	mov    %rsp,%rbp
  800420e7ad:	48 83 ec 10          	sub    $0x10,%rsp
  800420e7b1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420e7b5:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e7bc:	00 00 00 
  800420e7bf:	ff d0                	callq  *%rax
  800420e7c1:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e7c8:	00 00 00 
  800420e7cb:	48 98                	cltq   
  800420e7cd:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7d1:	48 89 c1             	mov    %rax,%rcx
  800420e7d4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e7d8:	48 01 c8             	add    %rcx,%rax
  800420e7db:	48 01 d0             	add    %rdx,%rax
  800420e7de:	48 83 c0 08          	add    $0x8,%rax
  800420e7e2:	48 8b 00             	mov    (%rax),%rax
  800420e7e5:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e7ec:	84 c0                	test   %al,%al
  800420e7ee:	74 2a                	je     800420e81a <sys_ipc_recv+0x71>
		panic("already recving!");
  800420e7f0:	48 ba 59 e8 21 04 80 	movabs $0x800421e859,%rdx
  800420e7f7:	00 00 00 
  800420e7fa:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420e7ff:	48 bf 6a e8 21 04 80 	movabs $0x800421e86a,%rdi
  800420e806:	00 00 00 
  800420e809:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e80e:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420e815:	00 00 00 
  800420e818:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420e81a:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e821:	00 00 00 
  800420e824:	ff d0                	callq  *%rax
  800420e826:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e82d:	00 00 00 
  800420e830:	48 98                	cltq   
  800420e832:	48 c1 e0 03          	shl    $0x3,%rax
  800420e836:	48 89 c1             	mov    %rax,%rcx
  800420e839:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e83d:	48 01 c8             	add    %rcx,%rax
  800420e840:	48 01 d0             	add    %rdx,%rax
  800420e843:	48 83 c0 08          	add    $0x8,%rax
  800420e847:	48 8b 00             	mov    (%rax),%rax
  800420e84a:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420e851:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e858:	00 00 00 
  800420e85b:	ff d0                	callq  *%rax
  800420e85d:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e864:	00 00 00 
  800420e867:	48 98                	cltq   
  800420e869:	48 c1 e0 03          	shl    $0x3,%rax
  800420e86d:	48 89 c1             	mov    %rax,%rcx
  800420e870:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e874:	48 01 c8             	add    %rcx,%rax
  800420e877:	48 01 d0             	add    %rdx,%rax
  800420e87a:	48 83 c0 08          	add    $0x8,%rax
  800420e87e:	48 8b 00             	mov    (%rax),%rax
  800420e881:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e885:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420e88c:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e893:	00 00 00 
  800420e896:	ff d0                	callq  *%rax
  800420e898:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e89f:	00 00 00 
  800420e8a2:	48 98                	cltq   
  800420e8a4:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8a8:	48 89 c1             	mov    %rax,%rcx
  800420e8ab:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e8af:	48 01 c8             	add    %rcx,%rax
  800420e8b2:	48 01 d0             	add    %rdx,%rax
  800420e8b5:	48 83 c0 08          	add    $0x8,%rax
  800420e8b9:	48 8b 00             	mov    (%rax),%rax
  800420e8bc:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e8c3:	00 00 00 
	sched_yield();
  800420e8c6:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  800420e8cd:	00 00 00 
  800420e8d0:	ff d0                	callq  *%rax

000000800420e8d2 <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420e8d2:	55                   	push   %rbp
  800420e8d3:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420e8d6:	48 b8 e0 91 21 04 80 	movabs $0x80042191e0,%rax
  800420e8dd:	00 00 00 
  800420e8e0:	ff d0                	callq  *%rax
}
  800420e8e2:	5d                   	pop    %rbp
  800420e8e3:	c3                   	retq   

000000800420e8e4 <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420e8e4:	55                   	push   %rbp
  800420e8e5:	48 89 e5             	mov    %rsp,%rbp
  800420e8e8:	48 83 ec 10          	sub    $0x10,%rsp
  800420e8ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e8f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420e8f4:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e8fb:	00 00 00 
  800420e8fe:	ff d0                	callq  *%rax
  800420e900:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e907:	00 00 00 
  800420e90a:	48 98                	cltq   
  800420e90c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e910:	48 89 c1             	mov    %rax,%rcx
  800420e913:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e917:	48 01 c8             	add    %rcx,%rax
  800420e91a:	48 01 d0             	add    %rdx,%rax
  800420e91d:	48 83 c0 08          	add    $0x8,%rax
  800420e921:	48 8b 00             	mov    (%rax),%rax
  800420e924:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e928:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e92c:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420e931:	48 89 c7             	mov    %rax,%rdi
  800420e934:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e93b:	00 00 00 
  800420e93e:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420e940:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e944:	89 c2                	mov    %eax,%edx
  800420e946:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e94a:	89 d6                	mov    %edx,%esi
  800420e94c:	48 89 c7             	mov    %rax,%rdi
  800420e94f:	48 b8 69 83 21 04 80 	movabs $0x8004218369,%rax
  800420e956:	00 00 00 
  800420e959:	ff d0                	callq  *%rax
}
  800420e95b:	c9                   	leaveq 
  800420e95c:	c3                   	retq   

000000800420e95d <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420e95d:	55                   	push   %rbp
  800420e95e:	48 89 e5             	mov    %rsp,%rbp
  800420e961:	48 83 ec 10          	sub    $0x10,%rsp
  800420e965:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420e969:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420e96d:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420e974:	00 00 00 
  800420e977:	ff d0                	callq  *%rax
  800420e979:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420e980:	00 00 00 
  800420e983:	48 98                	cltq   
  800420e985:	48 c1 e0 03          	shl    $0x3,%rax
  800420e989:	48 89 c1             	mov    %rax,%rcx
  800420e98c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e990:	48 01 c8             	add    %rcx,%rax
  800420e993:	48 01 d0             	add    %rdx,%rax
  800420e996:	48 83 c0 08          	add    $0x8,%rax
  800420e99a:	48 8b 00             	mov    (%rax),%rax
  800420e99d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e9a1:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e9a5:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420e9aa:	48 89 c7             	mov    %rax,%rdi
  800420e9ad:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e9b4:	00 00 00 
  800420e9b7:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420e9b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e9bd:	89 c2                	mov    %eax,%edx
  800420e9bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420e9c3:	89 d6                	mov    %edx,%esi
  800420e9c5:	48 89 c7             	mov    %rax,%rdi
  800420e9c8:	48 b8 d8 84 21 04 80 	movabs $0x80042184d8,%rax
  800420e9cf:	00 00 00 
  800420e9d2:	ff d0                	callq  *%rax
}
  800420e9d4:	c9                   	leaveq 
  800420e9d5:	c3                   	retq   

000000800420e9d6 <sys_vmx_list_vms>:

#ifndef VMM_GUEST
static void
sys_vmx_list_vms() {
  800420e9d6:	55                   	push   %rbp
  800420e9d7:	48 89 e5             	mov    %rsp,%rbp
	vmx_list_vms();
  800420e9da:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e9df:	48 ba af 99 21 04 80 	movabs $0x80042199af,%rdx
  800420e9e6:	00 00 00 
  800420e9e9:	ff d2                	callq  *%rdx
}
  800420e9eb:	5d                   	pop    %rbp
  800420e9ec:	c3                   	retq   

000000800420e9ed <sys_vmx_sel_resume>:

static bool
sys_vmx_sel_resume(int i) {
  800420e9ed:	55                   	push   %rbp
  800420e9ee:	48 89 e5             	mov    %rsp,%rbp
  800420e9f1:	48 83 ec 10          	sub    $0x10,%rsp
  800420e9f5:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return vmx_sel_resume(i);
  800420e9f8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e9fb:	89 c7                	mov    %eax,%edi
  800420e9fd:	48 b8 6f 9a 21 04 80 	movabs $0x8004219a6f,%rax
  800420ea04:	00 00 00 
  800420ea07:	ff d0                	callq  *%rax
}
  800420ea09:	c9                   	leaveq 
  800420ea0a:	c3                   	retq   

000000800420ea0b <sys_vmx_get_vmdisk_number>:

static int
sys_vmx_get_vmdisk_number() {
  800420ea0b:	55                   	push   %rbp
  800420ea0c:	48 89 e5             	mov    %rsp,%rbp
	return vmx_get_vmdisk_number();
  800420ea0f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea14:	48 ba d3 c3 21 04 80 	movabs $0x800421c3d3,%rdx
  800420ea1b:	00 00 00 
  800420ea1e:	ff d2                	callq  *%rdx
}
  800420ea20:	5d                   	pop    %rbp
  800420ea21:	c3                   	retq   

000000800420ea22 <sys_vmx_incr_vmdisk_number>:

static void
sys_vmx_incr_vmdisk_number() {
  800420ea22:	55                   	push   %rbp
  800420ea23:	48 89 e5             	mov    %rsp,%rbp
	vmx_incr_vmdisk_number();
  800420ea26:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea2b:	48 ba e5 c3 21 04 80 	movabs $0x800421c3e5,%rdx
  800420ea32:	00 00 00 
  800420ea35:	ff d2                	callq  *%rdx
}
  800420ea37:	5d                   	pop    %rbp
  800420ea38:	c3                   	retq   

000000800420ea39 <sys_ept_map>:
//       instead of the normal page table. 
// 
static int
sys_ept_map(envid_t srcenvid, void *srcva,
	    envid_t guest, void* guest_pa, int perm)
{
  800420ea39:	55                   	push   %rbp
  800420ea3a:	48 89 e5             	mov    %rsp,%rbp
  800420ea3d:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420ea41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420ea44:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420ea48:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420ea4b:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420ea4f:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
    /* Your code here */
    return 0;
  800420ea53:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ea58:	c9                   	leaveq 
  800420ea59:	c3                   	retq   

000000800420ea5a <sys_env_mkguest>:

static envid_t
	sys_env_mkguest(uint64_t gphysz, uint64_t gRIP) {
  800420ea5a:	55                   	push   %rbp
  800420ea5b:	48 89 e5             	mov    %rsp,%rbp
  800420ea5e:	48 83 ec 20          	sub    $0x20,%rsp
  800420ea62:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ea66:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	// Check if the processor has VMX support.
	if ( !vmx_check_support() ) {
  800420ea6a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea6f:	48 ba 45 9b 21 04 80 	movabs $0x8004219b45,%rdx
  800420ea76:	00 00 00 
  800420ea79:	ff d2                	callq  *%rdx
  800420ea7b:	83 f0 01             	xor    $0x1,%eax
  800420ea7e:	84 c0                	test   %al,%al
  800420ea80:	74 0a                	je     800420ea8c <sys_env_mkguest+0x32>
		return -E_NO_VMX;
  800420ea82:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420ea87:	e9 b1 00 00 00       	jmpq   800420eb3d <sys_env_mkguest+0xe3>
	} else if ( !vmx_check_ept() ) {
  800420ea8c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea91:	48 ba 9e 9b 21 04 80 	movabs $0x8004219b9e,%rdx
  800420ea98:	00 00 00 
  800420ea9b:	ff d2                	callq  *%rdx
  800420ea9d:	83 f0 01             	xor    $0x1,%eax
  800420eaa0:	84 c0                	test   %al,%al
  800420eaa2:	74 0a                	je     800420eaae <sys_env_mkguest+0x54>
		return -E_NO_EPT;
  800420eaa4:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420eaa9:	e9 8f 00 00 00       	jmpq   800420eb3d <sys_env_mkguest+0xe3>
	} 
	if ((r = env_guest_alloc(&e, curenv->env_id)) < 0)
  800420eaae:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420eab5:	00 00 00 
  800420eab8:	ff d0                	callq  *%rax
  800420eaba:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420eac1:	00 00 00 
  800420eac4:	48 98                	cltq   
  800420eac6:	48 c1 e0 03          	shl    $0x3,%rax
  800420eaca:	48 89 c1             	mov    %rax,%rcx
  800420eacd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ead1:	48 01 c8             	add    %rcx,%rax
  800420ead4:	48 01 d0             	add    %rdx,%rax
  800420ead7:	48 83 c0 08          	add    $0x8,%rax
  800420eadb:	48 8b 00             	mov    (%rax),%rax
  800420eade:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420eae4:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420eae8:	89 d6                	mov    %edx,%esi
  800420eaea:	48 89 c7             	mov    %rax,%rdi
  800420eaed:	48 b8 44 81 20 04 80 	movabs $0x8004208144,%rax
  800420eaf4:	00 00 00 
  800420eaf7:	ff d0                	callq  *%rax
  800420eaf9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420eafc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420eb00:	79 05                	jns    800420eb07 <sys_env_mkguest+0xad>
		return r;
  800420eb02:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420eb05:	eb 36                	jmp    800420eb3d <sys_env_mkguest+0xe3>
	e->env_status = ENV_NOT_RUNNABLE;
  800420eb07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb0b:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420eb12:	00 00 00 
	e->env_vmxinfo.phys_sz = gphysz;
  800420eb15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eb1d:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	e->env_tf.tf_rip = gRIP;
  800420eb24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb28:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420eb2c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	return e->env_id;
  800420eb33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb37:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420eb3d:	c9                   	leaveq 
  800420eb3e:	c3                   	retq   

000000800420eb3f <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420eb3f:	55                   	push   %rbp
  800420eb40:	48 89 e5             	mov    %rsp,%rbp
  800420eb43:	48 83 ec 30          	sub    $0x30,%rsp
  800420eb47:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420eb4b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420eb4f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420eb53:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420eb57:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420eb5b:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420eb5f:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420eb64:	0f 87 c6 02 00 00    	ja     800420ee30 <syscall+0x2f1>
  800420eb6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420eb6e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420eb75:	00 
  800420eb76:	48 b8 80 e8 21 04 80 	movabs $0x800421e880,%rax
  800420eb7d:	00 00 00 
  800420eb80:	48 01 d0             	add    %rdx,%rax
  800420eb83:	48 8b 00             	mov    (%rax),%rax
  800420eb86:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420eb88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb8c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eb90:	48 89 d6             	mov    %rdx,%rsi
  800420eb93:	48 89 c7             	mov    %rax,%rdi
  800420eb96:	48 b8 9f dd 20 04 80 	movabs $0x800420dd9f,%rax
  800420eb9d:	00 00 00 
  800420eba0:	ff d0                	callq  *%rax
		return 0;
  800420eba2:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eba7:	e9 8b 02 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_cgetc:
		return sys_cgetc();
  800420ebac:	48 b8 23 de 20 04 80 	movabs $0x800420de23,%rax
  800420ebb3:	00 00 00 
  800420ebb6:	ff d0                	callq  *%rax
  800420ebb8:	48 98                	cltq   
  800420ebba:	e9 78 02 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_getenvid:
		return sys_getenvid();
  800420ebbf:	48 b8 35 de 20 04 80 	movabs $0x800420de35,%rax
  800420ebc6:	00 00 00 
  800420ebc9:	ff d0                	callq  *%rax
  800420ebcb:	48 98                	cltq   
  800420ebcd:	e9 65 02 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420ebd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ebd6:	89 c7                	mov    %eax,%edi
  800420ebd8:	48 b8 71 de 20 04 80 	movabs $0x800420de71,%rax
  800420ebdf:	00 00 00 
  800420ebe2:	ff d0                	callq  *%rax
  800420ebe4:	48 98                	cltq   
  800420ebe6:	e9 4c 02 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420ebeb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ebef:	89 c2                	mov    %eax,%edx
  800420ebf1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420ebf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ebf9:	48 89 ce             	mov    %rcx,%rsi
  800420ebfc:	89 c7                	mov    %eax,%edi
  800420ebfe:	48 b8 44 e1 20 04 80 	movabs $0x800420e144,%rax
  800420ec05:	00 00 00 
  800420ec08:	ff d0                	callq  *%rax
  800420ec0a:	48 98                	cltq   
  800420ec0c:	e9 26 02 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420ec11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ec15:	89 c7                	mov    %eax,%edi
  800420ec17:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420ec1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ec1f:	89 c2                	mov    %eax,%edx
  800420ec21:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420ec25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec29:	41 89 f8             	mov    %edi,%r8d
  800420ec2c:	89 c7                	mov    %eax,%edi
  800420ec2e:	48 b8 2d e2 20 04 80 	movabs $0x800420e22d,%rax
  800420ec35:	00 00 00 
  800420ec38:	ff d0                	callq  *%rax
  800420ec3a:	48 98                	cltq   
  800420ec3c:	e9 f6 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420ec41:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ec45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec49:	48 89 d6             	mov    %rdx,%rsi
  800420ec4c:	89 c7                	mov    %eax,%edi
  800420ec4e:	48 b8 b2 e3 20 04 80 	movabs $0x800420e3b2,%rax
  800420ec55:	00 00 00 
  800420ec58:	ff d0                	callq  *%rax
  800420ec5a:	48 98                	cltq   
  800420ec5c:	e9 d6 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_exofork:
		return sys_exofork();
  800420ec61:	48 b8 d1 de 20 04 80 	movabs $0x800420ded1,%rax
  800420ec68:	00 00 00 
  800420ec6b:	ff d0                	callq  *%rax
  800420ec6d:	48 98                	cltq   
  800420ec6f:	e9 c3 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420ec74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ec78:	89 c2                	mov    %eax,%edx
  800420ec7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec7e:	89 d6                	mov    %edx,%esi
  800420ec80:	89 c7                	mov    %eax,%edi
  800420ec82:	48 b8 a6 df 20 04 80 	movabs $0x800420dfa6,%rax
  800420ec89:	00 00 00 
  800420ec8c:	ff d0                	callq  *%rax
  800420ec8e:	48 98                	cltq   
  800420ec90:	e9 a2 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420ec95:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ec99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ec9d:	48 89 d6             	mov    %rdx,%rsi
  800420eca0:	89 c7                	mov    %eax,%edi
  800420eca2:	48 b8 06 e0 20 04 80 	movabs $0x800420e006,%rax
  800420eca9:	00 00 00 
  800420ecac:	ff d0                	callq  *%rax
  800420ecae:	48 98                	cltq   
  800420ecb0:	e9 82 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420ecb5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ecb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ecbd:	48 89 d6             	mov    %rdx,%rsi
  800420ecc0:	89 c7                	mov    %eax,%edi
  800420ecc2:	48 b8 f4 e0 20 04 80 	movabs $0x800420e0f4,%rax
  800420ecc9:	00 00 00 
  800420eccc:	ff d0                	callq  *%rax
  800420ecce:	48 98                	cltq   
  800420ecd0:	e9 62 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_yield:
		sys_yield();
  800420ecd5:	48 b8 c1 de 20 04 80 	movabs $0x800420dec1,%rax
  800420ecdc:	00 00 00 
  800420ecdf:	ff d0                	callq  *%rax
		return 0;
  800420ece1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ece6:	e9 4c 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420eceb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ecef:	89 c1                	mov    %eax,%ecx
  800420ecf1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ecf5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ecf9:	89 c6                	mov    %eax,%esi
  800420ecfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ecff:	89 c7                	mov    %eax,%edi
  800420ed01:	48 b8 39 e4 20 04 80 	movabs $0x800420e439,%rax
  800420ed08:	00 00 00 
  800420ed0b:	ff d0                	callq  *%rax
  800420ed0d:	48 98                	cltq   
  800420ed0f:	e9 23 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420ed14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed18:	48 89 c7             	mov    %rax,%rdi
  800420ed1b:	48 b8 a9 e7 20 04 80 	movabs $0x800420e7a9,%rax
  800420ed22:	00 00 00 
  800420ed25:	ff d0                	callq  *%rax
		return 0;
  800420ed27:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ed2c:	e9 06 01 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_time_msec:
		return sys_time_msec();
  800420ed31:	48 b8 d2 e8 20 04 80 	movabs $0x800420e8d2,%rax
  800420ed38:	00 00 00 
  800420ed3b:	ff d0                	callq  *%rax
  800420ed3d:	48 98                	cltq   
  800420ed3f:	e9 f3 00 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420ed44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ed4c:	48 89 d6             	mov    %rdx,%rsi
  800420ed4f:	48 89 c7             	mov    %rax,%rdi
  800420ed52:	48 b8 e4 e8 20 04 80 	movabs $0x800420e8e4,%rax
  800420ed59:	00 00 00 
  800420ed5c:	ff d0                	callq  *%rax
  800420ed5e:	48 98                	cltq   
  800420ed60:	e9 d2 00 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420ed65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ed6d:	48 89 d6             	mov    %rdx,%rsi
  800420ed70:	48 89 c7             	mov    %rax,%rdi
  800420ed73:	48 b8 5d e9 20 04 80 	movabs $0x800420e95d,%rax
  800420ed7a:	00 00 00 
  800420ed7d:	ff d0                	callq  *%rax
  800420ed7f:	48 98                	cltq   
  800420ed81:	e9 b1 00 00 00       	jmpq   800420ee37 <syscall+0x2f8>
#ifndef VMM_GUEST
	case SYS_ept_map:
		return sys_ept_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420ed86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ed8a:	89 c7                	mov    %eax,%edi
  800420ed8c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420ed90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ed94:	89 c2                	mov    %eax,%edx
  800420ed96:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420ed9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed9e:	41 89 f8             	mov    %edi,%r8d
  800420eda1:	89 c7                	mov    %eax,%edi
  800420eda3:	48 b8 39 ea 20 04 80 	movabs $0x800420ea39,%rax
  800420edaa:	00 00 00 
  800420edad:	ff d0                	callq  *%rax
  800420edaf:	48 98                	cltq   
  800420edb1:	e9 81 00 00 00       	jmpq   800420ee37 <syscall+0x2f8>
	case SYS_env_mkguest:
		return sys_env_mkguest(a1, a2);
  800420edb6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420edba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edbe:	48 89 d6             	mov    %rdx,%rsi
  800420edc1:	48 89 c7             	mov    %rax,%rdi
  800420edc4:	48 b8 5a ea 20 04 80 	movabs $0x800420ea5a,%rax
  800420edcb:	00 00 00 
  800420edce:	ff d0                	callq  *%rax
  800420edd0:	48 98                	cltq   
  800420edd2:	eb 63                	jmp    800420ee37 <syscall+0x2f8>
	case SYS_vmx_list_vms:
		sys_vmx_list_vms();
  800420edd4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420edd9:	48 ba d6 e9 20 04 80 	movabs $0x800420e9d6,%rdx
  800420ede0:	00 00 00 
  800420ede3:	ff d2                	callq  *%rdx
		return 0;
  800420ede5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420edea:	eb 4b                	jmp    800420ee37 <syscall+0x2f8>
	case SYS_vmx_sel_resume:
		return sys_vmx_sel_resume(a1);
  800420edec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edf0:	89 c7                	mov    %eax,%edi
  800420edf2:	48 b8 ed e9 20 04 80 	movabs $0x800420e9ed,%rax
  800420edf9:	00 00 00 
  800420edfc:	ff d0                	callq  *%rax
  800420edfe:	0f b6 c0             	movzbl %al,%eax
  800420ee01:	eb 34                	jmp    800420ee37 <syscall+0x2f8>
	case SYS_vmx_get_vmdisk_number:
		return sys_vmx_get_vmdisk_number();
  800420ee03:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee08:	48 ba 0b ea 20 04 80 	movabs $0x800420ea0b,%rdx
  800420ee0f:	00 00 00 
  800420ee12:	ff d2                	callq  *%rdx
  800420ee14:	48 98                	cltq   
  800420ee16:	eb 1f                	jmp    800420ee37 <syscall+0x2f8>
	case SYS_vmx_incr_vmdisk_number:
		sys_vmx_incr_vmdisk_number();
  800420ee18:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee1d:	48 ba 22 ea 20 04 80 	movabs $0x800420ea22,%rdx
  800420ee24:	00 00 00 
  800420ee27:	ff d2                	callq  *%rdx
		return 0;
  800420ee29:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ee2e:	eb 07                	jmp    800420ee37 <syscall+0x2f8>
#endif

	default:
		return -E_NO_SYS;
  800420ee30:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420ee37:	c9                   	leaveq 
  800420ee38:	c3                   	retq   

000000800420ee39 <list_func_die>:
  800420ee39:	55                   	push   %rbp
  800420ee3a:	48 89 e5             	mov    %rsp,%rbp
  800420ee3d:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420ee44:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420ee4b:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420ee52:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420ee59:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ee60:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420ee67:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420ee6b:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ee72:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420ee79:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420ee7d:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420ee84:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420ee8b:	48 89 d1             	mov    %rdx,%rcx
  800420ee8e:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420ee93:	48 89 ce             	mov    %rcx,%rsi
  800420ee96:	48 89 c7             	mov    %rax,%rdi
  800420ee99:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  800420eea0:	00 00 00 
  800420eea3:	ff d0                	callq  *%rax
  800420eea5:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420eeac:	00 
  800420eead:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420eeb4:	00 
  800420eeb5:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420eebc:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420eec0:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420eec4:	74 0a                	je     800420eed0 <list_func_die+0x97>
  800420eec6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eecb:	e9 cd 06 00 00       	jmpq   800420f59d <list_func_die+0x764>
  800420eed0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420eed7:	ba 38 00 00 00       	mov    $0x38,%edx
  800420eedc:	be 00 00 00 00       	mov    $0x0,%esi
  800420eee1:	48 89 c7             	mov    %rax,%rdi
  800420eee4:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  800420eeeb:	00 00 00 
  800420eeee:	ff d0                	callq  *%rax
  800420eef0:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420eef7:	be 11 00 00 00       	mov    $0x11,%esi
  800420eefc:	48 89 c7             	mov    %rax,%rdi
  800420eeff:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420ef06:	00 00 00 
  800420ef09:	ff d0                	callq  *%rax
  800420ef0b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420ef0f:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ef16:	be 12 00 00 00       	mov    $0x12,%esi
  800420ef1b:	48 89 c7             	mov    %rax,%rdi
  800420ef1e:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420ef25:	00 00 00 
  800420ef28:	ff d0                	callq  *%rax
  800420ef2a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420ef2e:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420ef33:	0f 84 5f 06 00 00    	je     800420f598 <list_func_die+0x75f>
  800420ef39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ef3d:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ef41:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420ef48:	0f 83 4a 06 00 00    	jae    800420f598 <list_func_die+0x75f>
  800420ef4e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420ef53:	0f 84 3f 06 00 00    	je     800420f598 <list_func_die+0x75f>
  800420ef59:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420ef5d:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420ef61:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420ef68:	0f 86 2a 06 00 00    	jbe    800420f598 <list_func_die+0x75f>
  800420ef6e:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ef75:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420ef7c:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420ef83:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420ef8a:	48 89 10             	mov    %rdx,(%rax)
  800420ef8d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420ef94:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420ef9b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420efa2:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420efa6:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420efad:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420efb4:	48 89 c7             	mov    %rax,%rdi
  800420efb7:	48 b8 2e 06 21 04 80 	movabs $0x800421062e,%rax
  800420efbe:	00 00 00 
  800420efc1:	ff d0                	callq  *%rax
  800420efc3:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420efca:	89 42 18             	mov    %eax,0x18(%rdx)
  800420efcd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420efd1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420efd5:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420efdc:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420efe0:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420efe7:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420efee:	48 85 c0             	test   %rax,%rax
  800420eff1:	75 35                	jne    800420f028 <list_func_die+0x1ef>
  800420eff3:	48 b9 60 ec 21 04 80 	movabs $0x800421ec60,%rcx
  800420effa:	00 00 00 
  800420effd:	48 ba 6c ec 21 04 80 	movabs $0x800421ec6c,%rdx
  800420f004:	00 00 00 
  800420f007:	be 95 00 00 00       	mov    $0x95,%esi
  800420f00c:	48 bf 81 ec 21 04 80 	movabs $0x800421ec81,%rdi
  800420f013:	00 00 00 
  800420f016:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f01b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f022:	00 00 00 
  800420f025:	41 ff d0             	callq  *%r8
  800420f028:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f02f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f036:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f03d:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f044:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f049:	48 89 c7             	mov    %rax,%rdi
  800420f04c:	48 b8 8f 5e 21 04 80 	movabs $0x8004215e8f,%rax
  800420f053:	00 00 00 
  800420f056:	ff d0                	callq  *%rax
  800420f058:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f05f:	89 c2                	mov    %eax,%edx
  800420f061:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f068:	89 50 08             	mov    %edx,0x8(%rax)
  800420f06b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f072:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f079:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f080:	00 00 00 
  800420f083:	48 8b 00             	mov    (%rax),%rax
  800420f086:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f08d:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f094:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f098:	48 89 c7             	mov    %rax,%rdi
  800420f09b:	48 b8 3f 2b 21 04 80 	movabs $0x8004212b3f,%rax
  800420f0a2:	00 00 00 
  800420f0a5:	ff d0                	callq  *%rax
  800420f0a7:	83 f8 04             	cmp    $0x4,%eax
  800420f0aa:	0f 84 e1 04 00 00    	je     800420f591 <list_func_die+0x758>
  800420f0b0:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f0b7:	48 83 f8 05          	cmp    $0x5,%rax
  800420f0bb:	74 05                	je     800420f0c2 <list_func_die+0x289>
  800420f0bd:	e9 cf 04 00 00       	jmpq   800420f591 <list_func_die+0x758>
  800420f0c2:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f0c9:	be 49 00 00 00       	mov    $0x49,%esi
  800420f0ce:	48 89 c7             	mov    %rax,%rdi
  800420f0d1:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420f0d8:	00 00 00 
  800420f0db:	ff d0                	callq  *%rax
  800420f0dd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f0e1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f0e6:	0f 84 d7 00 00 00    	je     800420f1c3 <list_func_die+0x38a>
  800420f0ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f0f0:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f0f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f0f8:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f0fc:	48 01 d0             	add    %rdx,%rax
  800420f0ff:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f103:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f10a:	00 00 00 
  800420f10d:	48 8b 08             	mov    (%rax),%rcx
  800420f110:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f117:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f11b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f11f:	48 8b 38             	mov    (%rax),%rdi
  800420f122:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f126:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f12a:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f12f:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f133:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f138:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f13c:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f141:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f145:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f14a:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f14e:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f153:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f157:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f15c:	48 89 cf             	mov    %rcx,%rdi
  800420f15f:	48 b8 65 27 21 04 80 	movabs $0x8004212765,%rax
  800420f166:	00 00 00 
  800420f169:	ff d0                	callq  *%rax
  800420f16b:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f172:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f177:	48 89 c7             	mov    %rax,%rdi
  800420f17a:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420f181:	00 00 00 
  800420f184:	ff d0                	callq  *%rax
  800420f186:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f18a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f18f:	74 0e                	je     800420f19f <list_func_die+0x366>
  800420f191:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f195:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f199:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f19d:	eb 24                	jmp    800420f1c3 <list_func_die+0x38a>
  800420f19f:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f1a6:	be 49 00 00 00       	mov    $0x49,%esi
  800420f1ab:	48 89 c7             	mov    %rax,%rdi
  800420f1ae:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420f1b5:	00 00 00 
  800420f1b8:	ff d0                	callq  *%rax
  800420f1ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f1be:	e9 1e ff ff ff       	jmpq   800420f0e1 <list_func_die+0x2a8>
  800420f1c3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f1ca:	00 
  800420f1cb:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f1d2:	be 02 00 00 00       	mov    $0x2,%esi
  800420f1d7:	48 89 c7             	mov    %rax,%rdi
  800420f1da:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420f1e1:	00 00 00 
  800420f1e4:	ff d0                	callq  *%rax
  800420f1e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f1ea:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f1ef:	0f 84 a2 00 00 00    	je     800420f297 <list_func_die+0x45e>
  800420f1f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f1f9:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f1fd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420f201:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f205:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f209:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f20d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f211:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f215:	48 83 f8 03          	cmp    $0x3,%rax
  800420f219:	72 7c                	jb     800420f297 <list_func_die+0x45e>
  800420f21b:	48 83 f8 04          	cmp    $0x4,%rax
  800420f21f:	76 06                	jbe    800420f227 <list_func_die+0x3ee>
  800420f221:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f225:	75 70                	jne    800420f297 <list_func_die+0x45e>
  800420f227:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f22e:	00 
  800420f22f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f233:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f237:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420f23b:	0f b6 00             	movzbl (%rax),%eax
  800420f23e:	88 45 af             	mov    %al,-0x51(%rbp)
  800420f241:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f246:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420f24a:	75 4a                	jne    800420f296 <list_func_die+0x45d>
  800420f24c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f250:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420f257:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420f25e:	48 89 c7             	mov    %rax,%rdi
  800420f261:	48 b8 c4 14 21 04 80 	movabs $0x80042114c4,%rax
  800420f268:	00 00 00 
  800420f26b:	ff d0                	callq  *%rax
  800420f26d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f271:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f278:	48 89 c2             	mov    %rax,%rdx
  800420f27b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f27f:	48 29 c2             	sub    %rax,%rdx
  800420f282:	48 89 d0             	mov    %rdx,%rax
  800420f285:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f289:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f290:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f294:	eb 00                	jmp    800420f296 <list_func_die+0x45d>
  800420f296:	90                   	nop
  800420f297:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f29e:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f2a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f2a5:	89 c2                	mov    %eax,%edx
  800420f2a7:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2ae:	48 63 c9             	movslq %ecx,%rcx
  800420f2b1:	48 83 c1 08          	add    $0x8,%rcx
  800420f2b5:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f2b9:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2c0:	8b 50 28             	mov    0x28(%rax),%edx
  800420f2c3:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2ca:	48 63 d2             	movslq %edx,%rdx
  800420f2cd:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f2d1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f2d5:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f2da:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2e1:	8b 40 28             	mov    0x28(%rax),%eax
  800420f2e4:	8d 50 01             	lea    0x1(%rax),%edx
  800420f2e7:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2ee:	89 50 28             	mov    %edx,0x28(%rax)
  800420f2f1:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f2f8:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f2ff:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f304:	48 89 ce             	mov    %rcx,%rsi
  800420f307:	48 89 c7             	mov    %rax,%rdi
  800420f30a:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  800420f311:	00 00 00 
  800420f314:	ff d0                	callq  *%rax
  800420f316:	e9 40 02 00 00       	jmpq   800420f55b <list_func_die+0x722>
  800420f31b:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f322:	48 83 f8 05          	cmp    $0x5,%rax
  800420f326:	74 05                	je     800420f32d <list_func_die+0x4f4>
  800420f328:	e9 64 02 00 00       	jmpq   800420f591 <list_func_die+0x758>
  800420f32d:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f334:	be 49 00 00 00       	mov    $0x49,%esi
  800420f339:	48 89 c7             	mov    %rax,%rdi
  800420f33c:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420f343:	00 00 00 
  800420f346:	ff d0                	callq  *%rax
  800420f348:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f34c:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f351:	0f 84 b1 00 00 00    	je     800420f408 <list_func_die+0x5cf>
  800420f357:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f35b:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f35f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f363:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f367:	48 01 d0             	add    %rdx,%rax
  800420f36a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f36e:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f375:	00 00 00 
  800420f378:	48 8b 08             	mov    (%rax),%rcx
  800420f37b:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f382:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f386:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f38a:	48 8b 38             	mov    (%rax),%rdi
  800420f38d:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f391:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f395:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f39a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f39e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f3a3:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f3a7:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f3ac:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f3b0:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f3b5:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f3b9:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f3be:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f3c2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f3c7:	48 89 cf             	mov    %rcx,%rdi
  800420f3ca:	48 b8 65 27 21 04 80 	movabs $0x8004212765,%rax
  800420f3d1:	00 00 00 
  800420f3d4:	ff d0                	callq  *%rax
  800420f3d6:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f3dd:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f3e2:	48 89 c7             	mov    %rax,%rdi
  800420f3e5:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420f3ec:	00 00 00 
  800420f3ef:	ff d0                	callq  *%rax
  800420f3f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f3f5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f3fa:	74 0c                	je     800420f408 <list_func_die+0x5cf>
  800420f3fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f400:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f404:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f408:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f40f:	00 
  800420f410:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f417:	be 02 00 00 00       	mov    $0x2,%esi
  800420f41c:	48 89 c7             	mov    %rax,%rdi
  800420f41f:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  800420f426:	00 00 00 
  800420f429:	ff d0                	callq  *%rax
  800420f42b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f42f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f434:	0f 84 a2 00 00 00    	je     800420f4dc <list_func_die+0x6a3>
  800420f43a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f43e:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f442:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420f446:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f44a:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f44e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f452:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f456:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f45a:	48 83 f8 03          	cmp    $0x3,%rax
  800420f45e:	72 7c                	jb     800420f4dc <list_func_die+0x6a3>
  800420f460:	48 83 f8 04          	cmp    $0x4,%rax
  800420f464:	76 06                	jbe    800420f46c <list_func_die+0x633>
  800420f466:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f46a:	75 70                	jne    800420f4dc <list_func_die+0x6a3>
  800420f46c:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f473:	00 
  800420f474:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f478:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f47c:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f480:	0f b6 00             	movzbl (%rax),%eax
  800420f483:	88 45 97             	mov    %al,-0x69(%rbp)
  800420f486:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f48b:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420f48f:	75 4a                	jne    800420f4db <list_func_die+0x6a2>
  800420f491:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f495:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420f49c:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420f4a3:	48 89 c7             	mov    %rax,%rdi
  800420f4a6:	48 b8 c4 14 21 04 80 	movabs $0x80042114c4,%rax
  800420f4ad:	00 00 00 
  800420f4b0:	ff d0                	callq  *%rax
  800420f4b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f4b6:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f4bd:	48 89 c2             	mov    %rax,%rdx
  800420f4c0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f4c4:	48 29 c2             	sub    %rax,%rdx
  800420f4c7:	48 89 d0             	mov    %rdx,%rax
  800420f4ca:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f4ce:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f4d5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f4d9:	eb 00                	jmp    800420f4db <list_func_die+0x6a2>
  800420f4db:	90                   	nop
  800420f4dc:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4e3:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f4e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f4ea:	89 c2                	mov    %eax,%edx
  800420f4ec:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4f3:	48 63 c9             	movslq %ecx,%rcx
  800420f4f6:	48 83 c1 08          	add    $0x8,%rcx
  800420f4fa:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f4fe:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f505:	8b 50 28             	mov    0x28(%rax),%edx
  800420f508:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f50f:	48 63 d2             	movslq %edx,%rdx
  800420f512:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f516:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f51a:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f51f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f526:	8b 40 28             	mov    0x28(%rax),%eax
  800420f529:	8d 50 01             	lea    0x1(%rax),%edx
  800420f52c:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f533:	89 50 28             	mov    %edx,0x28(%rax)
  800420f536:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f53d:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f544:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f549:	48 89 ce             	mov    %rcx,%rsi
  800420f54c:	48 89 c7             	mov    %rax,%rdi
  800420f54f:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  800420f556:	00 00 00 
  800420f559:	ff d0                	callq  *%rax
  800420f55b:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f562:	00 00 00 
  800420f565:	48 8b 00             	mov    (%rax),%rax
  800420f568:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f56c:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420f573:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420f57a:	48 89 c7             	mov    %rax,%rdi
  800420f57d:	48 b8 fb 28 21 04 80 	movabs $0x80042128fb,%rax
  800420f584:	00 00 00 
  800420f587:	ff d0                	callq  *%rax
  800420f589:	85 c0                	test   %eax,%eax
  800420f58b:	0f 84 8a fd ff ff    	je     800420f31b <list_func_die+0x4e2>
  800420f591:	b8 01 00 00 00       	mov    $0x1,%eax
  800420f596:	eb 05                	jmp    800420f59d <list_func_die+0x764>
  800420f598:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f59d:	c9                   	leaveq 
  800420f59e:	c3                   	retq   

000000800420f59f <debuginfo_rip>:
  800420f59f:	55                   	push   %rbp
  800420f5a0:	48 89 e5             	mov    %rsp,%rbp
  800420f5a3:	53                   	push   %rbx
  800420f5a4:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420f5ab:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420f5b2:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420f5b9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420f5c0:	00 
  800420f5c1:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420f5c8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f5cc:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f5d3:	48 bb 92 ec 21 04 80 	movabs $0x800421ec92,%rbx
  800420f5da:	00 00 00 
  800420f5dd:	48 89 18             	mov    %rbx,(%rax)
  800420f5e0:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f5e7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420f5ee:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f5f5:	48 bb 92 ec 21 04 80 	movabs $0x800421ec92,%rbx
  800420f5fc:	00 00 00 
  800420f5ff:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420f603:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f60a:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420f611:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f618:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f61f:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f623:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f62a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f631:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420f638:	00 00 00 
  800420f63b:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420f642:	76 13                	jbe    800420f657 <debuginfo_rip+0xb8>
  800420f644:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420f64b:	00 00 00 
  800420f64e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f652:	e9 04 01 00 00       	jmpq   800420f75b <debuginfo_rip+0x1bc>
  800420f657:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420f65e:	00 00 00 
  800420f661:	ff d0                	callq  *%rax
  800420f663:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f66a:	00 00 00 
  800420f66d:	48 98                	cltq   
  800420f66f:	48 c1 e0 03          	shl    $0x3,%rax
  800420f673:	48 89 c1             	mov    %rax,%rcx
  800420f676:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f67a:	48 01 c8             	add    %rcx,%rax
  800420f67d:	48 01 d0             	add    %rdx,%rax
  800420f680:	48 83 c0 08          	add    $0x8,%rax
  800420f684:	48 8b 10             	mov    (%rax),%rdx
  800420f687:	48 b8 98 c2 4d 04 80 	movabs $0x80044dc298,%rax
  800420f68e:	00 00 00 
  800420f691:	48 8b 00             	mov    (%rax),%rax
  800420f694:	48 39 c2             	cmp    %rax,%rdx
  800420f697:	0f 84 83 00 00 00    	je     800420f720 <debuginfo_rip+0x181>
  800420f69d:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420f6a4:	00 00 00 
  800420f6a7:	ff d0                	callq  *%rax
  800420f6a9:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f6b0:	00 00 00 
  800420f6b3:	48 98                	cltq   
  800420f6b5:	48 c1 e0 03          	shl    $0x3,%rax
  800420f6b9:	48 89 c1             	mov    %rax,%rcx
  800420f6bc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f6c0:	48 01 c8             	add    %rcx,%rax
  800420f6c3:	48 01 d0             	add    %rdx,%rax
  800420f6c6:	48 83 c0 08          	add    $0x8,%rax
  800420f6ca:	48 8b 00             	mov    (%rax),%rax
  800420f6cd:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f6d4:	48 89 c7             	mov    %rax,%rdi
  800420f6d7:	48 b8 8a 60 21 04 80 	movabs $0x800421608a,%rax
  800420f6de:	00 00 00 
  800420f6e1:	ff d0                	callq  *%rax
  800420f6e3:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420f6ea:	00 00 00 
  800420f6ed:	ff d0                	callq  *%rax
  800420f6ef:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f6f6:	00 00 00 
  800420f6f9:	48 98                	cltq   
  800420f6fb:	48 c1 e0 03          	shl    $0x3,%rax
  800420f6ff:	48 89 c1             	mov    %rax,%rcx
  800420f702:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f706:	48 01 c8             	add    %rcx,%rax
  800420f709:	48 01 d0             	add    %rdx,%rax
  800420f70c:	48 83 c0 08          	add    $0x8,%rax
  800420f710:	48 8b 10             	mov    (%rax),%rdx
  800420f713:	48 b8 98 c2 4d 04 80 	movabs $0x80044dc298,%rax
  800420f71a:	00 00 00 
  800420f71d:	48 89 10             	mov    %rdx,(%rax)
  800420f720:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800420f727:	00 00 00 
  800420f72a:	ff d0                	callq  *%rax
  800420f72c:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800420f733:	00 00 00 
  800420f736:	48 98                	cltq   
  800420f738:	48 c1 e0 03          	shl    $0x3,%rax
  800420f73c:	48 89 c1             	mov    %rax,%rcx
  800420f73f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f743:	48 01 c8             	add    %rcx,%rax
  800420f746:	48 01 d0             	add    %rdx,%rax
  800420f749:	48 83 c0 08          	add    $0x8,%rax
  800420f74d:	48 8b 00             	mov    (%rax),%rax
  800420f750:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f757:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f75b:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f762:	00 00 00 
  800420f765:	48 8b 00             	mov    (%rax),%rax
  800420f768:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f76c:	48 89 d6             	mov    %rdx,%rsi
  800420f76f:	48 89 c7             	mov    %rax,%rdi
  800420f772:	48 b8 73 17 21 04 80 	movabs $0x8004211773,%rax
  800420f779:	00 00 00 
  800420f77c:	ff d0                	callq  *%rax
  800420f77e:	48 bf 9c ec 21 04 80 	movabs $0x800421ec9c,%rdi
  800420f785:	00 00 00 
  800420f788:	48 b8 0a 60 21 04 80 	movabs $0x800421600a,%rax
  800420f78f:	00 00 00 
  800420f792:	ff d0                	callq  *%rax
  800420f794:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f798:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f79f:	00 00 00 
  800420f7a2:	48 8b 00             	mov    (%rax),%rax
  800420f7a5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f7a9:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420f7ad:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420f7b1:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f7b8:	00 00 00 
  800420f7bb:	48 8b 00             	mov    (%rax),%rax
  800420f7be:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f7c2:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420f7c6:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f7ca:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f7d1:	00 00 00 
  800420f7d4:	48 8b 00             	mov    (%rax),%rax
  800420f7d7:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420f7db:	48 85 c0             	test   %rax,%rax
  800420f7de:	75 35                	jne    800420f815 <debuginfo_rip+0x276>
  800420f7e0:	48 b9 a8 ec 21 04 80 	movabs $0x800421eca8,%rcx
  800420f7e7:	00 00 00 
  800420f7ea:	48 ba 6c ec 21 04 80 	movabs $0x800421ec6c,%rdx
  800420f7f1:	00 00 00 
  800420f7f4:	be 40 01 00 00       	mov    $0x140,%esi
  800420f7f9:	48 bf 81 ec 21 04 80 	movabs $0x800421ec81,%rdi
  800420f800:	00 00 00 
  800420f803:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f808:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f80f:	00 00 00 
  800420f812:	41 ff d0             	callq  *%r8
  800420f815:	e9 6f 01 00 00       	jmpq   800420f989 <debuginfo_rip+0x3ea>
  800420f81a:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f821:	00 00 00 
  800420f824:	48 8b 00             	mov    (%rax),%rax
  800420f827:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420f82b:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420f832:	be 00 00 00 00       	mov    $0x0,%esi
  800420f837:	48 89 c7             	mov    %rax,%rdi
  800420f83a:	48 b8 fb 28 21 04 80 	movabs $0x80042128fb,%rax
  800420f841:	00 00 00 
  800420f844:	ff d0                	callq  *%rax
  800420f846:	83 f8 04             	cmp    $0x4,%eax
  800420f849:	75 05                	jne    800420f850 <debuginfo_rip+0x2b1>
  800420f84b:	e9 39 01 00 00       	jmpq   800420f989 <debuginfo_rip+0x3ea>
  800420f850:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f854:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420f85b:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420f862:	00 00 00 00 
  800420f866:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f86d:	00 00 00 
  800420f870:	48 8b 00             	mov    (%rax),%rax
  800420f873:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420f87a:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420f881:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420f885:	48 89 c7             	mov    %rax,%rdi
  800420f888:	48 b8 3f 2b 21 04 80 	movabs $0x8004212b3f,%rax
  800420f88f:	00 00 00 
  800420f892:	ff d0                	callq  *%rax
  800420f894:	83 f8 04             	cmp    $0x4,%eax
  800420f897:	75 05                	jne    800420f89e <debuginfo_rip+0x2ff>
  800420f899:	e9 eb 00 00 00       	jmpq   800420f989 <debuginfo_rip+0x3ea>
  800420f89e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f8a2:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f8a9:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f8b0:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f8b7:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f8be:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420f8c5:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f8cc:	48 89 ce             	mov    %rcx,%rsi
  800420f8cf:	48 89 c7             	mov    %rax,%rdi
  800420f8d2:	48 b8 39 ee 20 04 80 	movabs $0x800420ee39,%rax
  800420f8d9:	00 00 00 
  800420f8dc:	ff d0                	callq  *%rax
  800420f8de:	85 c0                	test   %eax,%eax
  800420f8e0:	74 30                	je     800420f912 <debuginfo_rip+0x373>
  800420f8e2:	90                   	nop
  800420f8e3:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f8ea:	00 00 00 
  800420f8ed:	48 8b 00             	mov    (%rax),%rax
  800420f8f0:	be 00 00 00 00       	mov    $0x0,%esi
  800420f8f5:	48 89 c7             	mov    %rax,%rdi
  800420f8f8:	48 b8 17 52 21 04 80 	movabs $0x8004215217,%rax
  800420f8ff:	00 00 00 
  800420f902:	ff d0                	callq  *%rax
  800420f904:	83 f8 01             	cmp    $0x1,%eax
  800420f907:	0f 85 bb 00 00 00    	jne    800420f9c8 <debuginfo_rip+0x429>
  800420f90d:	e9 ac 00 00 00       	jmpq   800420f9be <debuginfo_rip+0x41f>
  800420f912:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f919:	00 00 00 
  800420f91c:	48 8b 00             	mov    (%rax),%rax
  800420f91f:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420f923:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420f92a:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420f931:	48 89 c7             	mov    %rax,%rdi
  800420f934:	48 b8 fb 28 21 04 80 	movabs $0x80042128fb,%rax
  800420f93b:	00 00 00 
  800420f93e:	ff d0                	callq  *%rax
  800420f940:	85 c0                	test   %eax,%eax
  800420f942:	79 02                	jns    800420f946 <debuginfo_rip+0x3a7>
  800420f944:	eb 43                	jmp    800420f989 <debuginfo_rip+0x3ea>
  800420f946:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420f94d:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420f954:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f959:	48 89 ce             	mov    %rcx,%rsi
  800420f95c:	48 89 c7             	mov    %rax,%rdi
  800420f95f:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  800420f966:	00 00 00 
  800420f969:	ff d0                	callq  *%rax
  800420f96b:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420f96f:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420f976:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420f97d:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420f984:	e9 2e ff ff ff       	jmpq   800420f8b7 <debuginfo_rip+0x318>
  800420f989:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f990:	00 00 00 
  800420f993:	48 8b 00             	mov    (%rax),%rax
  800420f996:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420f99a:	48 89 d6             	mov    %rdx,%rsi
  800420f99d:	48 89 c7             	mov    %rax,%rdi
  800420f9a0:	48 b8 55 18 21 04 80 	movabs $0x8004211855,%rax
  800420f9a7:	00 00 00 
  800420f9aa:	ff d0                	callq  *%rax
  800420f9ac:	85 c0                	test   %eax,%eax
  800420f9ae:	0f 84 66 fe ff ff    	je     800420f81a <debuginfo_rip+0x27b>
  800420f9b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f9b9:	e9 a0 00 00 00       	jmpq   800420fa5e <debuginfo_rip+0x4bf>
  800420f9be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420f9c3:	e9 96 00 00 00       	jmpq   800420fa5e <debuginfo_rip+0x4bf>
  800420f9c8:	48 b8 80 36 23 04 80 	movabs $0x8004233680,%rax
  800420f9cf:	00 00 00 
  800420f9d2:	48 8b 08             	mov    (%rax),%rcx
  800420f9d5:	48 b8 78 36 23 04 80 	movabs $0x8004233678,%rax
  800420f9dc:	00 00 00 
  800420f9df:	48 8b 10             	mov    (%rax),%rdx
  800420f9e2:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420f9e9:	00 00 00 
  800420f9ec:	48 8b 00             	mov    (%rax),%rax
  800420f9ef:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420f9f6:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420f9fc:	48 89 c7             	mov    %rax,%rdi
  800420f9ff:	48 b8 80 2d 21 04 80 	movabs $0x8004212d80,%rax
  800420fa06:	00 00 00 
  800420fa09:	ff d0                	callq  *%rax
  800420fa0b:	85 c0                	test   %eax,%eax
  800420fa0d:	75 4a                	jne    800420fa59 <debuginfo_rip+0x4ba>
  800420fa0f:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fa16:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420fa1d:	48 b8 78 36 23 04 80 	movabs $0x8004233678,%rax
  800420fa24:	00 00 00 
  800420fa27:	48 8b 30             	mov    (%rax),%rsi
  800420fa2a:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800420fa31:	00 00 00 
  800420fa34:	48 8b 00             	mov    (%rax),%rax
  800420fa37:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fa3e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420fa44:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fa4a:	48 89 c7             	mov    %rax,%rdi
  800420fa4d:	48 b8 8c 40 21 04 80 	movabs $0x800421408c,%rax
  800420fa54:	00 00 00 
  800420fa57:	ff d0                	callq  *%rax
  800420fa59:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fa5e:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420fa65:	5b                   	pop    %rbx
  800420fa66:	5d                   	pop    %rbp
  800420fa67:	c3                   	retq   

000000800420fa68 <printnum>:
  800420fa68:	55                   	push   %rbp
  800420fa69:	48 89 e5             	mov    %rsp,%rbp
  800420fa6c:	53                   	push   %rbx
  800420fa6d:	48 83 ec 38          	sub    $0x38,%rsp
  800420fa71:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fa75:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fa79:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fa7d:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420fa80:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420fa84:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420fa88:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420fa8b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420fa8f:	77 3b                	ja     800420facc <printnum+0x64>
  800420fa91:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420fa94:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420fa98:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420fa9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fa9f:	ba 00 00 00 00       	mov    $0x0,%edx
  800420faa4:	48 f7 f3             	div    %rbx
  800420faa7:	48 89 c2             	mov    %rax,%rdx
  800420faaa:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420faad:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fab0:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420fab4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fab8:	41 89 f9             	mov    %edi,%r9d
  800420fabb:	48 89 c7             	mov    %rax,%rdi
  800420fabe:	48 b8 68 fa 20 04 80 	movabs $0x800420fa68,%rax
  800420fac5:	00 00 00 
  800420fac8:	ff d0                	callq  *%rax
  800420faca:	eb 1e                	jmp    800420faea <printnum+0x82>
  800420facc:	eb 12                	jmp    800420fae0 <printnum+0x78>
  800420face:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fad2:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420fad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fad9:	48 89 ce             	mov    %rcx,%rsi
  800420fadc:	89 d7                	mov    %edx,%edi
  800420fade:	ff d0                	callq  *%rax
  800420fae0:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420fae4:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420fae8:	7f e4                	jg     800420face <printnum+0x66>
  800420faea:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420faed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420faf1:	ba 00 00 00 00       	mov    $0x0,%edx
  800420faf6:	48 f7 f1             	div    %rcx
  800420faf9:	48 89 d0             	mov    %rdx,%rax
  800420fafc:	48 ba b0 ee 21 04 80 	movabs $0x800421eeb0,%rdx
  800420fb03:	00 00 00 
  800420fb06:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420fb0a:	0f be d0             	movsbl %al,%edx
  800420fb0d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fb11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb15:	48 89 ce             	mov    %rcx,%rsi
  800420fb18:	89 d7                	mov    %edx,%edi
  800420fb1a:	ff d0                	callq  *%rax
  800420fb1c:	48 83 c4 38          	add    $0x38,%rsp
  800420fb20:	5b                   	pop    %rbx
  800420fb21:	5d                   	pop    %rbp
  800420fb22:	c3                   	retq   

000000800420fb23 <getuint>:
  800420fb23:	55                   	push   %rbp
  800420fb24:	48 89 e5             	mov    %rsp,%rbp
  800420fb27:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fb2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fb2f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420fb32:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420fb36:	7e 52                	jle    800420fb8a <getuint+0x67>
  800420fb38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb3c:	8b 00                	mov    (%rax),%eax
  800420fb3e:	83 f8 30             	cmp    $0x30,%eax
  800420fb41:	73 24                	jae    800420fb67 <getuint+0x44>
  800420fb43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb47:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fb4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb4f:	8b 00                	mov    (%rax),%eax
  800420fb51:	89 c0                	mov    %eax,%eax
  800420fb53:	48 01 d0             	add    %rdx,%rax
  800420fb56:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fb5a:	8b 12                	mov    (%rdx),%edx
  800420fb5c:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fb5f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fb63:	89 0a                	mov    %ecx,(%rdx)
  800420fb65:	eb 17                	jmp    800420fb7e <getuint+0x5b>
  800420fb67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb6b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fb6f:	48 89 d0             	mov    %rdx,%rax
  800420fb72:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fb76:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fb7a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fb7e:	48 8b 00             	mov    (%rax),%rax
  800420fb81:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fb85:	e9 a3 00 00 00       	jmpq   800420fc2d <getuint+0x10a>
  800420fb8a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420fb8e:	74 4f                	je     800420fbdf <getuint+0xbc>
  800420fb90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb94:	8b 00                	mov    (%rax),%eax
  800420fb96:	83 f8 30             	cmp    $0x30,%eax
  800420fb99:	73 24                	jae    800420fbbf <getuint+0x9c>
  800420fb9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fb9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fba7:	8b 00                	mov    (%rax),%eax
  800420fba9:	89 c0                	mov    %eax,%eax
  800420fbab:	48 01 d0             	add    %rdx,%rax
  800420fbae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fbb2:	8b 12                	mov    (%rdx),%edx
  800420fbb4:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fbb7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fbbb:	89 0a                	mov    %ecx,(%rdx)
  800420fbbd:	eb 17                	jmp    800420fbd6 <getuint+0xb3>
  800420fbbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbc3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fbc7:	48 89 d0             	mov    %rdx,%rax
  800420fbca:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fbce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fbd2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fbd6:	48 8b 00             	mov    (%rax),%rax
  800420fbd9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fbdd:	eb 4e                	jmp    800420fc2d <getuint+0x10a>
  800420fbdf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbe3:	8b 00                	mov    (%rax),%eax
  800420fbe5:	83 f8 30             	cmp    $0x30,%eax
  800420fbe8:	73 24                	jae    800420fc0e <getuint+0xeb>
  800420fbea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbee:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fbf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fbf6:	8b 00                	mov    (%rax),%eax
  800420fbf8:	89 c0                	mov    %eax,%eax
  800420fbfa:	48 01 d0             	add    %rdx,%rax
  800420fbfd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc01:	8b 12                	mov    (%rdx),%edx
  800420fc03:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fc06:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc0a:	89 0a                	mov    %ecx,(%rdx)
  800420fc0c:	eb 17                	jmp    800420fc25 <getuint+0x102>
  800420fc0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc12:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fc16:	48 89 d0             	mov    %rdx,%rax
  800420fc19:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fc1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc21:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fc25:	8b 00                	mov    (%rax),%eax
  800420fc27:	89 c0                	mov    %eax,%eax
  800420fc29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fc2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fc31:	c9                   	leaveq 
  800420fc32:	c3                   	retq   

000000800420fc33 <getint>:
  800420fc33:	55                   	push   %rbp
  800420fc34:	48 89 e5             	mov    %rsp,%rbp
  800420fc37:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fc3b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fc3f:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420fc42:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420fc46:	7e 52                	jle    800420fc9a <getint+0x67>
  800420fc48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc4c:	8b 00                	mov    (%rax),%eax
  800420fc4e:	83 f8 30             	cmp    $0x30,%eax
  800420fc51:	73 24                	jae    800420fc77 <getint+0x44>
  800420fc53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc57:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fc5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc5f:	8b 00                	mov    (%rax),%eax
  800420fc61:	89 c0                	mov    %eax,%eax
  800420fc63:	48 01 d0             	add    %rdx,%rax
  800420fc66:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc6a:	8b 12                	mov    (%rdx),%edx
  800420fc6c:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fc6f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc73:	89 0a                	mov    %ecx,(%rdx)
  800420fc75:	eb 17                	jmp    800420fc8e <getint+0x5b>
  800420fc77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fc7b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fc7f:	48 89 d0             	mov    %rdx,%rax
  800420fc82:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fc86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fc8a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fc8e:	48 8b 00             	mov    (%rax),%rax
  800420fc91:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fc95:	e9 a3 00 00 00       	jmpq   800420fd3d <getint+0x10a>
  800420fc9a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420fc9e:	74 4f                	je     800420fcef <getint+0xbc>
  800420fca0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fca4:	8b 00                	mov    (%rax),%eax
  800420fca6:	83 f8 30             	cmp    $0x30,%eax
  800420fca9:	73 24                	jae    800420fccf <getint+0x9c>
  800420fcab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcaf:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fcb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcb7:	8b 00                	mov    (%rax),%eax
  800420fcb9:	89 c0                	mov    %eax,%eax
  800420fcbb:	48 01 d0             	add    %rdx,%rax
  800420fcbe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fcc2:	8b 12                	mov    (%rdx),%edx
  800420fcc4:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fcc7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fccb:	89 0a                	mov    %ecx,(%rdx)
  800420fccd:	eb 17                	jmp    800420fce6 <getint+0xb3>
  800420fccf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcd3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fcd7:	48 89 d0             	mov    %rdx,%rax
  800420fcda:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fcde:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fce2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fce6:	48 8b 00             	mov    (%rax),%rax
  800420fce9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fced:	eb 4e                	jmp    800420fd3d <getint+0x10a>
  800420fcef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcf3:	8b 00                	mov    (%rax),%eax
  800420fcf5:	83 f8 30             	cmp    $0x30,%eax
  800420fcf8:	73 24                	jae    800420fd1e <getint+0xeb>
  800420fcfa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcfe:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fd02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd06:	8b 00                	mov    (%rax),%eax
  800420fd08:	89 c0                	mov    %eax,%eax
  800420fd0a:	48 01 d0             	add    %rdx,%rax
  800420fd0d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd11:	8b 12                	mov    (%rdx),%edx
  800420fd13:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fd16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd1a:	89 0a                	mov    %ecx,(%rdx)
  800420fd1c:	eb 17                	jmp    800420fd35 <getint+0x102>
  800420fd1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd22:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fd26:	48 89 d0             	mov    %rdx,%rax
  800420fd29:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fd2d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd31:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fd35:	8b 00                	mov    (%rax),%eax
  800420fd37:	48 98                	cltq   
  800420fd39:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fd3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fd41:	c9                   	leaveq 
  800420fd42:	c3                   	retq   

000000800420fd43 <vprintfmt>:
  800420fd43:	55                   	push   %rbp
  800420fd44:	48 89 e5             	mov    %rsp,%rbp
  800420fd47:	41 54                	push   %r12
  800420fd49:	53                   	push   %rbx
  800420fd4a:	48 83 ec 60          	sub    $0x60,%rsp
  800420fd4e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420fd52:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420fd56:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fd5a:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420fd5e:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420fd62:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420fd66:	48 8b 0a             	mov    (%rdx),%rcx
  800420fd69:	48 89 08             	mov    %rcx,(%rax)
  800420fd6c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420fd70:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420fd74:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fd78:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fd7c:	eb 17                	jmp    800420fd95 <vprintfmt+0x52>
  800420fd7e:	85 db                	test   %ebx,%ebx
  800420fd80:	0f 84 cc 04 00 00    	je     8004210252 <vprintfmt+0x50f>
  800420fd86:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420fd8a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420fd8e:	48 89 d6             	mov    %rdx,%rsi
  800420fd91:	89 df                	mov    %ebx,%edi
  800420fd93:	ff d0                	callq  *%rax
  800420fd95:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fd99:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fd9d:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fda1:	0f b6 00             	movzbl (%rax),%eax
  800420fda4:	0f b6 d8             	movzbl %al,%ebx
  800420fda7:	83 fb 25             	cmp    $0x25,%ebx
  800420fdaa:	75 d2                	jne    800420fd7e <vprintfmt+0x3b>
  800420fdac:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420fdb0:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420fdb7:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420fdbe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420fdc5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  800420fdcc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fdd0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420fdd4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420fdd8:	0f b6 00             	movzbl (%rax),%eax
  800420fddb:	0f b6 d8             	movzbl %al,%ebx
  800420fdde:	8d 43 dd             	lea    -0x23(%rbx),%eax
  800420fde1:	83 f8 55             	cmp    $0x55,%eax
  800420fde4:	0f 87 34 04 00 00    	ja     800421021e <vprintfmt+0x4db>
  800420fdea:	89 c0                	mov    %eax,%eax
  800420fdec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420fdf3:	00 
  800420fdf4:	48 b8 d8 ee 21 04 80 	movabs $0x800421eed8,%rax
  800420fdfb:	00 00 00 
  800420fdfe:	48 01 d0             	add    %rdx,%rax
  800420fe01:	48 8b 00             	mov    (%rax),%rax
  800420fe04:	ff e0                	jmpq   *%rax
  800420fe06:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  800420fe0a:	eb c0                	jmp    800420fdcc <vprintfmt+0x89>
  800420fe0c:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  800420fe10:	eb ba                	jmp    800420fdcc <vprintfmt+0x89>
  800420fe12:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  800420fe19:	8b 55 d8             	mov    -0x28(%rbp),%edx
  800420fe1c:	89 d0                	mov    %edx,%eax
  800420fe1e:	c1 e0 02             	shl    $0x2,%eax
  800420fe21:	01 d0                	add    %edx,%eax
  800420fe23:	01 c0                	add    %eax,%eax
  800420fe25:	01 d8                	add    %ebx,%eax
  800420fe27:	83 e8 30             	sub    $0x30,%eax
  800420fe2a:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420fe2d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420fe31:	0f b6 00             	movzbl (%rax),%eax
  800420fe34:	0f be d8             	movsbl %al,%ebx
  800420fe37:	83 fb 2f             	cmp    $0x2f,%ebx
  800420fe3a:	7e 0c                	jle    800420fe48 <vprintfmt+0x105>
  800420fe3c:	83 fb 39             	cmp    $0x39,%ebx
  800420fe3f:	7f 07                	jg     800420fe48 <vprintfmt+0x105>
  800420fe41:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800420fe46:	eb d1                	jmp    800420fe19 <vprintfmt+0xd6>
  800420fe48:	eb 58                	jmp    800420fea2 <vprintfmt+0x15f>
  800420fe4a:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fe4d:	83 f8 30             	cmp    $0x30,%eax
  800420fe50:	73 17                	jae    800420fe69 <vprintfmt+0x126>
  800420fe52:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420fe56:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fe59:	89 c0                	mov    %eax,%eax
  800420fe5b:	48 01 d0             	add    %rdx,%rax
  800420fe5e:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420fe61:	83 c2 08             	add    $0x8,%edx
  800420fe64:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420fe67:	eb 0f                	jmp    800420fe78 <vprintfmt+0x135>
  800420fe69:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420fe6d:	48 89 d0             	mov    %rdx,%rax
  800420fe70:	48 83 c2 08          	add    $0x8,%rdx
  800420fe74:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420fe78:	8b 00                	mov    (%rax),%eax
  800420fe7a:	89 45 d8             	mov    %eax,-0x28(%rbp)
  800420fe7d:	eb 23                	jmp    800420fea2 <vprintfmt+0x15f>
  800420fe7f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420fe83:	79 0c                	jns    800420fe91 <vprintfmt+0x14e>
  800420fe85:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  800420fe8c:	e9 3b ff ff ff       	jmpq   800420fdcc <vprintfmt+0x89>
  800420fe91:	e9 36 ff ff ff       	jmpq   800420fdcc <vprintfmt+0x89>
  800420fe96:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  800420fe9d:	e9 2a ff ff ff       	jmpq   800420fdcc <vprintfmt+0x89>
  800420fea2:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420fea6:	79 12                	jns    800420feba <vprintfmt+0x177>
  800420fea8:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420feab:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420feae:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420feb5:	e9 12 ff ff ff       	jmpq   800420fdcc <vprintfmt+0x89>
  800420feba:	e9 0d ff ff ff       	jmpq   800420fdcc <vprintfmt+0x89>
  800420febf:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800420fec3:	e9 04 ff ff ff       	jmpq   800420fdcc <vprintfmt+0x89>
  800420fec8:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fecb:	83 f8 30             	cmp    $0x30,%eax
  800420fece:	73 17                	jae    800420fee7 <vprintfmt+0x1a4>
  800420fed0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420fed4:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420fed7:	89 c0                	mov    %eax,%eax
  800420fed9:	48 01 d0             	add    %rdx,%rax
  800420fedc:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420fedf:	83 c2 08             	add    $0x8,%edx
  800420fee2:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420fee5:	eb 0f                	jmp    800420fef6 <vprintfmt+0x1b3>
  800420fee7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420feeb:	48 89 d0             	mov    %rdx,%rax
  800420feee:	48 83 c2 08          	add    $0x8,%rdx
  800420fef2:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420fef6:	8b 10                	mov    (%rax),%edx
  800420fef8:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420fefc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ff00:	48 89 ce             	mov    %rcx,%rsi
  800420ff03:	89 d7                	mov    %edx,%edi
  800420ff05:	ff d0                	callq  *%rax
  800420ff07:	e9 40 03 00 00       	jmpq   800421024c <vprintfmt+0x509>
  800420ff0c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ff0f:	83 f8 30             	cmp    $0x30,%eax
  800420ff12:	73 17                	jae    800420ff2b <vprintfmt+0x1e8>
  800420ff14:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420ff18:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ff1b:	89 c0                	mov    %eax,%eax
  800420ff1d:	48 01 d0             	add    %rdx,%rax
  800420ff20:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ff23:	83 c2 08             	add    $0x8,%edx
  800420ff26:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420ff29:	eb 0f                	jmp    800420ff3a <vprintfmt+0x1f7>
  800420ff2b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ff2f:	48 89 d0             	mov    %rdx,%rax
  800420ff32:	48 83 c2 08          	add    $0x8,%rdx
  800420ff36:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420ff3a:	8b 18                	mov    (%rax),%ebx
  800420ff3c:	85 db                	test   %ebx,%ebx
  800420ff3e:	79 02                	jns    800420ff42 <vprintfmt+0x1ff>
  800420ff40:	f7 db                	neg    %ebx
  800420ff42:	83 fb 15             	cmp    $0x15,%ebx
  800420ff45:	7f 16                	jg     800420ff5d <vprintfmt+0x21a>
  800420ff47:	48 b8 00 ee 21 04 80 	movabs $0x800421ee00,%rax
  800420ff4e:	00 00 00 
  800420ff51:	48 63 d3             	movslq %ebx,%rdx
  800420ff54:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  800420ff58:	4d 85 e4             	test   %r12,%r12
  800420ff5b:	75 2e                	jne    800420ff8b <vprintfmt+0x248>
  800420ff5d:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420ff61:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ff65:	89 d9                	mov    %ebx,%ecx
  800420ff67:	48 ba c1 ee 21 04 80 	movabs $0x800421eec1,%rdx
  800420ff6e:	00 00 00 
  800420ff71:	48 89 c7             	mov    %rax,%rdi
  800420ff74:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ff79:	49 b8 5b 02 21 04 80 	movabs $0x800421025b,%r8
  800420ff80:	00 00 00 
  800420ff83:	41 ff d0             	callq  *%r8
  800420ff86:	e9 c1 02 00 00       	jmpq   800421024c <vprintfmt+0x509>
  800420ff8b:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800420ff8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ff93:	4c 89 e1             	mov    %r12,%rcx
  800420ff96:	48 ba ca ee 21 04 80 	movabs $0x800421eeca,%rdx
  800420ff9d:	00 00 00 
  800420ffa0:	48 89 c7             	mov    %rax,%rdi
  800420ffa3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ffa8:	49 b8 5b 02 21 04 80 	movabs $0x800421025b,%r8
  800420ffaf:	00 00 00 
  800420ffb2:	41 ff d0             	callq  *%r8
  800420ffb5:	e9 92 02 00 00       	jmpq   800421024c <vprintfmt+0x509>
  800420ffba:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ffbd:	83 f8 30             	cmp    $0x30,%eax
  800420ffc0:	73 17                	jae    800420ffd9 <vprintfmt+0x296>
  800420ffc2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420ffc6:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420ffc9:	89 c0                	mov    %eax,%eax
  800420ffcb:	48 01 d0             	add    %rdx,%rax
  800420ffce:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800420ffd1:	83 c2 08             	add    $0x8,%edx
  800420ffd4:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420ffd7:	eb 0f                	jmp    800420ffe8 <vprintfmt+0x2a5>
  800420ffd9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420ffdd:	48 89 d0             	mov    %rdx,%rax
  800420ffe0:	48 83 c2 08          	add    $0x8,%rdx
  800420ffe4:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420ffe8:	4c 8b 20             	mov    (%rax),%r12
  800420ffeb:	4d 85 e4             	test   %r12,%r12
  800420ffee:	75 0a                	jne    800420fffa <vprintfmt+0x2b7>
  800420fff0:	49 bc cd ee 21 04 80 	movabs $0x800421eecd,%r12
  800420fff7:	00 00 00 
  800420fffa:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800420fffe:	7e 3f                	jle    800421003f <vprintfmt+0x2fc>
  8004210000:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  8004210004:	74 39                	je     800421003f <vprintfmt+0x2fc>
  8004210006:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210009:	48 98                	cltq   
  800421000b:	48 89 c6             	mov    %rax,%rsi
  800421000e:	4c 89 e7             	mov    %r12,%rdi
  8004210011:	48 b8 5c 06 21 04 80 	movabs $0x800421065c,%rax
  8004210018:	00 00 00 
  800421001b:	ff d0                	callq  *%rax
  800421001d:	29 45 dc             	sub    %eax,-0x24(%rbp)
  8004210020:	eb 17                	jmp    8004210039 <vprintfmt+0x2f6>
  8004210022:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  8004210026:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800421002a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421002e:	48 89 ce             	mov    %rcx,%rsi
  8004210031:	89 d7                	mov    %edx,%edi
  8004210033:	ff d0                	callq  *%rax
  8004210035:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210039:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421003d:	7f e3                	jg     8004210022 <vprintfmt+0x2df>
  800421003f:	eb 37                	jmp    8004210078 <vprintfmt+0x335>
  8004210041:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  8004210045:	74 1e                	je     8004210065 <vprintfmt+0x322>
  8004210047:	83 fb 1f             	cmp    $0x1f,%ebx
  800421004a:	7e 05                	jle    8004210051 <vprintfmt+0x30e>
  800421004c:	83 fb 7e             	cmp    $0x7e,%ebx
  800421004f:	7e 14                	jle    8004210065 <vprintfmt+0x322>
  8004210051:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210055:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210059:	48 89 d6             	mov    %rdx,%rsi
  800421005c:	bf 3f 00 00 00       	mov    $0x3f,%edi
  8004210061:	ff d0                	callq  *%rax
  8004210063:	eb 0f                	jmp    8004210074 <vprintfmt+0x331>
  8004210065:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210069:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421006d:	48 89 d6             	mov    %rdx,%rsi
  8004210070:	89 df                	mov    %ebx,%edi
  8004210072:	ff d0                	callq  *%rax
  8004210074:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210078:	4c 89 e0             	mov    %r12,%rax
  800421007b:	4c 8d 60 01          	lea    0x1(%rax),%r12
  800421007f:	0f b6 00             	movzbl (%rax),%eax
  8004210082:	0f be d8             	movsbl %al,%ebx
  8004210085:	85 db                	test   %ebx,%ebx
  8004210087:	74 10                	je     8004210099 <vprintfmt+0x356>
  8004210089:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800421008d:	78 b2                	js     8004210041 <vprintfmt+0x2fe>
  800421008f:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  8004210093:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004210097:	79 a8                	jns    8004210041 <vprintfmt+0x2fe>
  8004210099:	eb 16                	jmp    80042100b1 <vprintfmt+0x36e>
  800421009b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421009f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042100a3:	48 89 d6             	mov    %rdx,%rsi
  80042100a6:	bf 20 00 00 00       	mov    $0x20,%edi
  80042100ab:	ff d0                	callq  *%rax
  80042100ad:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042100b1:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042100b5:	7f e4                	jg     800421009b <vprintfmt+0x358>
  80042100b7:	e9 90 01 00 00       	jmpq   800421024c <vprintfmt+0x509>
  80042100bc:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042100c0:	be 03 00 00 00       	mov    $0x3,%esi
  80042100c5:	48 89 c7             	mov    %rax,%rdi
  80042100c8:	48 b8 33 fc 20 04 80 	movabs $0x800420fc33,%rax
  80042100cf:	00 00 00 
  80042100d2:	ff d0                	callq  *%rax
  80042100d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042100d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100dc:	48 85 c0             	test   %rax,%rax
  80042100df:	79 1d                	jns    80042100fe <vprintfmt+0x3bb>
  80042100e1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042100e5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042100e9:	48 89 d6             	mov    %rdx,%rsi
  80042100ec:	bf 2d 00 00 00       	mov    $0x2d,%edi
  80042100f1:	ff d0                	callq  *%rax
  80042100f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042100f7:	48 f7 d8             	neg    %rax
  80042100fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042100fe:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  8004210105:	e9 d5 00 00 00       	jmpq   80042101df <vprintfmt+0x49c>
  800421010a:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421010e:	be 03 00 00 00       	mov    $0x3,%esi
  8004210113:	48 89 c7             	mov    %rax,%rdi
  8004210116:	48 b8 23 fb 20 04 80 	movabs $0x800420fb23,%rax
  800421011d:	00 00 00 
  8004210120:	ff d0                	callq  *%rax
  8004210122:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210126:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800421012d:	e9 ad 00 00 00       	jmpq   80042101df <vprintfmt+0x49c>
  8004210132:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210136:	be 03 00 00 00       	mov    $0x3,%esi
  800421013b:	48 89 c7             	mov    %rax,%rdi
  800421013e:	48 b8 23 fb 20 04 80 	movabs $0x800420fb23,%rax
  8004210145:	00 00 00 
  8004210148:	ff d0                	callq  *%rax
  800421014a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421014e:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  8004210155:	e9 85 00 00 00       	jmpq   80042101df <vprintfmt+0x49c>
  800421015a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421015e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210162:	48 89 d6             	mov    %rdx,%rsi
  8004210165:	bf 30 00 00 00       	mov    $0x30,%edi
  800421016a:	ff d0                	callq  *%rax
  800421016c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210170:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210174:	48 89 d6             	mov    %rdx,%rsi
  8004210177:	bf 78 00 00 00       	mov    $0x78,%edi
  800421017c:	ff d0                	callq  *%rax
  800421017e:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210181:	83 f8 30             	cmp    $0x30,%eax
  8004210184:	73 17                	jae    800421019d <vprintfmt+0x45a>
  8004210186:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421018a:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421018d:	89 c0                	mov    %eax,%eax
  800421018f:	48 01 d0             	add    %rdx,%rax
  8004210192:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210195:	83 c2 08             	add    $0x8,%edx
  8004210198:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421019b:	eb 0f                	jmp    80042101ac <vprintfmt+0x469>
  800421019d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042101a1:	48 89 d0             	mov    %rdx,%rax
  80042101a4:	48 83 c2 08          	add    $0x8,%rdx
  80042101a8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042101ac:	48 8b 00             	mov    (%rax),%rax
  80042101af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042101b3:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  80042101ba:	eb 23                	jmp    80042101df <vprintfmt+0x49c>
  80042101bc:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042101c0:	be 03 00 00 00       	mov    $0x3,%esi
  80042101c5:	48 89 c7             	mov    %rax,%rdi
  80042101c8:	48 b8 23 fb 20 04 80 	movabs $0x800420fb23,%rax
  80042101cf:	00 00 00 
  80042101d2:	ff d0                	callq  *%rax
  80042101d4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042101d8:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  80042101df:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  80042101e4:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  80042101e7:	8b 7d dc             	mov    -0x24(%rbp),%edi
  80042101ea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042101ee:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  80042101f2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042101f6:	45 89 c1             	mov    %r8d,%r9d
  80042101f9:	41 89 f8             	mov    %edi,%r8d
  80042101fc:	48 89 c7             	mov    %rax,%rdi
  80042101ff:	48 b8 68 fa 20 04 80 	movabs $0x800420fa68,%rax
  8004210206:	00 00 00 
  8004210209:	ff d0                	callq  *%rax
  800421020b:	eb 3f                	jmp    800421024c <vprintfmt+0x509>
  800421020d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210211:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210215:	48 89 d6             	mov    %rdx,%rsi
  8004210218:	89 df                	mov    %ebx,%edi
  800421021a:	ff d0                	callq  *%rax
  800421021c:	eb 2e                	jmp    800421024c <vprintfmt+0x509>
  800421021e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210222:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210226:	48 89 d6             	mov    %rdx,%rsi
  8004210229:	bf 25 00 00 00       	mov    $0x25,%edi
  800421022e:	ff d0                	callq  *%rax
  8004210230:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210235:	eb 05                	jmp    800421023c <vprintfmt+0x4f9>
  8004210237:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800421023c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210240:	48 83 e8 01          	sub    $0x1,%rax
  8004210244:	0f b6 00             	movzbl (%rax),%eax
  8004210247:	3c 25                	cmp    $0x25,%al
  8004210249:	75 ec                	jne    8004210237 <vprintfmt+0x4f4>
  800421024b:	90                   	nop
  800421024c:	90                   	nop
  800421024d:	e9 43 fb ff ff       	jmpq   800420fd95 <vprintfmt+0x52>
  8004210252:	48 83 c4 60          	add    $0x60,%rsp
  8004210256:	5b                   	pop    %rbx
  8004210257:	41 5c                	pop    %r12
  8004210259:	5d                   	pop    %rbp
  800421025a:	c3                   	retq   

000000800421025b <printfmt>:
  800421025b:	55                   	push   %rbp
  800421025c:	48 89 e5             	mov    %rsp,%rbp
  800421025f:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004210266:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800421026d:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  8004210274:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800421027b:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210282:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210289:	84 c0                	test   %al,%al
  800421028b:	74 20                	je     80042102ad <printfmt+0x52>
  800421028d:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210291:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210295:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210299:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800421029d:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042102a1:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042102a5:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042102a9:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042102ad:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  80042102b4:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  80042102bb:	00 00 00 
  80042102be:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  80042102c5:	00 00 00 
  80042102c8:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042102cc:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042102d3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042102da:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042102e1:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  80042102e8:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  80042102ef:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  80042102f6:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  80042102fd:	48 89 c7             	mov    %rax,%rdi
  8004210300:	48 b8 43 fd 20 04 80 	movabs $0x800420fd43,%rax
  8004210307:	00 00 00 
  800421030a:	ff d0                	callq  *%rax
  800421030c:	c9                   	leaveq 
  800421030d:	c3                   	retq   

000000800421030e <sprintputch>:
  800421030e:	55                   	push   %rbp
  800421030f:	48 89 e5             	mov    %rsp,%rbp
  8004210312:	48 83 ec 10          	sub    $0x10,%rsp
  8004210316:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004210319:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421031d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210321:	8b 40 10             	mov    0x10(%rax),%eax
  8004210324:	8d 50 01             	lea    0x1(%rax),%edx
  8004210327:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421032b:	89 50 10             	mov    %edx,0x10(%rax)
  800421032e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210332:	48 8b 10             	mov    (%rax),%rdx
  8004210335:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210339:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421033d:	48 39 c2             	cmp    %rax,%rdx
  8004210340:	73 17                	jae    8004210359 <sprintputch+0x4b>
  8004210342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210346:	48 8b 00             	mov    (%rax),%rax
  8004210349:	48 8d 48 01          	lea    0x1(%rax),%rcx
  800421034d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210351:	48 89 0a             	mov    %rcx,(%rdx)
  8004210354:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004210357:	88 10                	mov    %dl,(%rax)
  8004210359:	c9                   	leaveq 
  800421035a:	c3                   	retq   

000000800421035b <vsnprintf>:
  800421035b:	55                   	push   %rbp
  800421035c:	48 89 e5             	mov    %rsp,%rbp
  800421035f:	48 83 ec 50          	sub    $0x50,%rsp
  8004210363:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004210367:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421036a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421036e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004210372:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  8004210376:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421037a:	48 8b 0a             	mov    (%rdx),%rcx
  800421037d:	48 89 08             	mov    %rcx,(%rax)
  8004210380:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210384:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210388:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800421038c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210390:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004210394:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004210398:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421039b:	48 98                	cltq   
  800421039d:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042103a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042103a5:	48 01 d0             	add    %rdx,%rax
  80042103a8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042103ac:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  80042103b3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042103b8:	74 06                	je     80042103c0 <vsnprintf+0x65>
  80042103ba:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042103be:	7f 07                	jg     80042103c7 <vsnprintf+0x6c>
  80042103c0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042103c5:	eb 2f                	jmp    80042103f6 <vsnprintf+0x9b>
  80042103c7:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  80042103cb:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042103cf:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  80042103d3:	48 89 c6             	mov    %rax,%rsi
  80042103d6:	48 bf 0e 03 21 04 80 	movabs $0x800421030e,%rdi
  80042103dd:	00 00 00 
  80042103e0:	48 b8 43 fd 20 04 80 	movabs $0x800420fd43,%rax
  80042103e7:	00 00 00 
  80042103ea:	ff d0                	callq  *%rax
  80042103ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042103f0:	c6 00 00             	movb   $0x0,(%rax)
  80042103f3:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042103f6:	c9                   	leaveq 
  80042103f7:	c3                   	retq   

00000080042103f8 <snprintf>:
  80042103f8:	55                   	push   %rbp
  80042103f9:	48 89 e5             	mov    %rsp,%rbp
  80042103fc:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004210403:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  800421040a:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  8004210410:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004210417:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  800421041e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210425:	84 c0                	test   %al,%al
  8004210427:	74 20                	je     8004210449 <snprintf+0x51>
  8004210429:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800421042d:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210431:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210435:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210439:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800421043d:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210441:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210445:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004210449:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  8004210450:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  8004210457:	00 00 00 
  800421045a:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004210461:	00 00 00 
  8004210464:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004210468:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421046f:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004210476:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421047d:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004210484:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800421048b:	48 8b 0a             	mov    (%rdx),%rcx
  800421048e:	48 89 08             	mov    %rcx,(%rax)
  8004210491:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004210495:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210499:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800421049d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042104a1:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  80042104a8:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  80042104af:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  80042104b5:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042104bc:	48 89 c7             	mov    %rax,%rdi
  80042104bf:	48 b8 5b 03 21 04 80 	movabs $0x800421035b,%rax
  80042104c6:	00 00 00 
  80042104c9:	ff d0                	callq  *%rax
  80042104cb:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  80042104d1:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  80042104d7:	c9                   	leaveq 
  80042104d8:	c3                   	retq   

00000080042104d9 <readline>:
  80042104d9:	55                   	push   %rbp
  80042104da:	48 89 e5             	mov    %rsp,%rbp
  80042104dd:	48 83 ec 20          	sub    $0x20,%rsp
  80042104e1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042104e5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042104ea:	74 22                	je     800421050e <readline+0x35>
  80042104ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042104f0:	48 89 c6             	mov    %rax,%rsi
  80042104f3:	48 bf 88 f1 21 04 80 	movabs $0x800421f188,%rdi
  80042104fa:	00 00 00 
  80042104fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210502:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004210509:	00 00 00 
  800421050c:	ff d2                	callq  *%rdx
  800421050e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210515:	bf 00 00 00 00       	mov    $0x0,%edi
  800421051a:	48 b8 33 12 20 04 80 	movabs $0x8004201233,%rax
  8004210521:	00 00 00 
  8004210524:	ff d0                	callq  *%rax
  8004210526:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004210529:	48 b8 11 12 20 04 80 	movabs $0x8004201211,%rax
  8004210530:	00 00 00 
  8004210533:	ff d0                	callq  *%rax
  8004210535:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004210538:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421053c:	79 30                	jns    800421056e <readline+0x95>
  800421053e:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  8004210542:	74 20                	je     8004210564 <readline+0x8b>
  8004210544:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210547:	89 c6                	mov    %eax,%esi
  8004210549:	48 bf 8b f1 21 04 80 	movabs $0x800421f18b,%rdi
  8004210550:	00 00 00 
  8004210553:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210558:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421055f:	00 00 00 
  8004210562:	ff d2                	callq  *%rdx
  8004210564:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210569:	e9 be 00 00 00       	jmpq   800421062c <readline+0x153>
  800421056e:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004210572:	74 06                	je     800421057a <readline+0xa1>
  8004210574:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  8004210578:	75 26                	jne    80042105a0 <readline+0xc7>
  800421057a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421057e:	7e 20                	jle    80042105a0 <readline+0xc7>
  8004210580:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004210584:	74 11                	je     8004210597 <readline+0xbe>
  8004210586:	bf 08 00 00 00       	mov    $0x8,%edi
  800421058b:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210592:	00 00 00 
  8004210595:	ff d0                	callq  *%rax
  8004210597:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  800421059b:	e9 87 00 00 00       	jmpq   8004210627 <readline+0x14e>
  80042105a0:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  80042105a4:	7e 3f                	jle    80042105e5 <readline+0x10c>
  80042105a6:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  80042105ad:	7f 36                	jg     80042105e5 <readline+0x10c>
  80042105af:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042105b3:	74 11                	je     80042105c6 <readline+0xed>
  80042105b5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042105b8:	89 c7                	mov    %eax,%edi
  80042105ba:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  80042105c1:	00 00 00 
  80042105c4:	ff d0                	callq  *%rax
  80042105c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042105c9:	8d 50 01             	lea    0x1(%rax),%edx
  80042105cc:	89 55 fc             	mov    %edx,-0x4(%rbp)
  80042105cf:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042105d2:	89 d1                	mov    %edx,%ecx
  80042105d4:	48 ba a0 c2 4d 04 80 	movabs $0x80044dc2a0,%rdx
  80042105db:	00 00 00 
  80042105de:	48 98                	cltq   
  80042105e0:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  80042105e3:	eb 42                	jmp    8004210627 <readline+0x14e>
  80042105e5:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  80042105e9:	74 06                	je     80042105f1 <readline+0x118>
  80042105eb:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  80042105ef:	75 36                	jne    8004210627 <readline+0x14e>
  80042105f1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042105f5:	74 11                	je     8004210608 <readline+0x12f>
  80042105f7:	bf 0a 00 00 00       	mov    $0xa,%edi
  80042105fc:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210603:	00 00 00 
  8004210606:	ff d0                	callq  *%rax
  8004210608:	48 ba a0 c2 4d 04 80 	movabs $0x80044dc2a0,%rdx
  800421060f:	00 00 00 
  8004210612:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210615:	48 98                	cltq   
  8004210617:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  800421061b:	48 b8 a0 c2 4d 04 80 	movabs $0x80044dc2a0,%rax
  8004210622:	00 00 00 
  8004210625:	eb 05                	jmp    800421062c <readline+0x153>
  8004210627:	e9 fd fe ff ff       	jmpq   8004210529 <readline+0x50>
  800421062c:	c9                   	leaveq 
  800421062d:	c3                   	retq   

000000800421062e <strlen>:
  800421062e:	55                   	push   %rbp
  800421062f:	48 89 e5             	mov    %rsp,%rbp
  8004210632:	48 83 ec 18          	sub    $0x18,%rsp
  8004210636:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421063a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210641:	eb 09                	jmp    800421064c <strlen+0x1e>
  8004210643:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210647:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800421064c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210650:	0f b6 00             	movzbl (%rax),%eax
  8004210653:	84 c0                	test   %al,%al
  8004210655:	75 ec                	jne    8004210643 <strlen+0x15>
  8004210657:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421065a:	c9                   	leaveq 
  800421065b:	c3                   	retq   

000000800421065c <strnlen>:
  800421065c:	55                   	push   %rbp
  800421065d:	48 89 e5             	mov    %rsp,%rbp
  8004210660:	48 83 ec 20          	sub    $0x20,%rsp
  8004210664:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210668:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421066c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210673:	eb 0e                	jmp    8004210683 <strnlen+0x27>
  8004210675:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004210679:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  800421067e:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  8004210683:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004210688:	74 0b                	je     8004210695 <strnlen+0x39>
  800421068a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421068e:	0f b6 00             	movzbl (%rax),%eax
  8004210691:	84 c0                	test   %al,%al
  8004210693:	75 e0                	jne    8004210675 <strnlen+0x19>
  8004210695:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210698:	c9                   	leaveq 
  8004210699:	c3                   	retq   

000000800421069a <strcpy>:
  800421069a:	55                   	push   %rbp
  800421069b:	48 89 e5             	mov    %rsp,%rbp
  800421069e:	48 83 ec 20          	sub    $0x20,%rsp
  80042106a2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042106a6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042106aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042106b2:	90                   	nop
  80042106b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106b7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042106bb:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042106bf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042106c3:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  80042106c7:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  80042106cb:	0f b6 12             	movzbl (%rdx),%edx
  80042106ce:	88 10                	mov    %dl,(%rax)
  80042106d0:	0f b6 00             	movzbl (%rax),%eax
  80042106d3:	84 c0                	test   %al,%al
  80042106d5:	75 dc                	jne    80042106b3 <strcpy+0x19>
  80042106d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042106db:	c9                   	leaveq 
  80042106dc:	c3                   	retq   

00000080042106dd <strcat>:
  80042106dd:	55                   	push   %rbp
  80042106de:	48 89 e5             	mov    %rsp,%rbp
  80042106e1:	48 83 ec 20          	sub    $0x20,%rsp
  80042106e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042106e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042106ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042106f1:	48 89 c7             	mov    %rax,%rdi
  80042106f4:	48 b8 2e 06 21 04 80 	movabs $0x800421062e,%rax
  80042106fb:	00 00 00 
  80042106fe:	ff d0                	callq  *%rax
  8004210700:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004210703:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210706:	48 63 d0             	movslq %eax,%rdx
  8004210709:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421070d:	48 01 c2             	add    %rax,%rdx
  8004210710:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210714:	48 89 c6             	mov    %rax,%rsi
  8004210717:	48 89 d7             	mov    %rdx,%rdi
  800421071a:	48 b8 9a 06 21 04 80 	movabs $0x800421069a,%rax
  8004210721:	00 00 00 
  8004210724:	ff d0                	callq  *%rax
  8004210726:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421072a:	c9                   	leaveq 
  800421072b:	c3                   	retq   

000000800421072c <strncpy>:
  800421072c:	55                   	push   %rbp
  800421072d:	48 89 e5             	mov    %rsp,%rbp
  8004210730:	48 83 ec 28          	sub    $0x28,%rsp
  8004210734:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210738:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421073c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210740:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210744:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210748:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421074f:	00 
  8004210750:	eb 2a                	jmp    800421077c <strncpy+0x50>
  8004210752:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210756:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421075a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421075e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210762:	0f b6 12             	movzbl (%rdx),%edx
  8004210765:	88 10                	mov    %dl,(%rax)
  8004210767:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421076b:	0f b6 00             	movzbl (%rax),%eax
  800421076e:	84 c0                	test   %al,%al
  8004210770:	74 05                	je     8004210777 <strncpy+0x4b>
  8004210772:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  8004210777:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421077c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210780:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004210784:	72 cc                	jb     8004210752 <strncpy+0x26>
  8004210786:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421078a:	c9                   	leaveq 
  800421078b:	c3                   	retq   

000000800421078c <strlcpy>:
  800421078c:	55                   	push   %rbp
  800421078d:	48 89 e5             	mov    %rsp,%rbp
  8004210790:	48 83 ec 28          	sub    $0x28,%rsp
  8004210794:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210798:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421079c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042107a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042107a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042107a8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042107ad:	74 3d                	je     80042107ec <strlcpy+0x60>
  80042107af:	eb 1d                	jmp    80042107ce <strlcpy+0x42>
  80042107b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042107b5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042107b9:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042107bd:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042107c1:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  80042107c5:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  80042107c9:	0f b6 12             	movzbl (%rdx),%edx
  80042107cc:	88 10                	mov    %dl,(%rax)
  80042107ce:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  80042107d3:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042107d8:	74 0b                	je     80042107e5 <strlcpy+0x59>
  80042107da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042107de:	0f b6 00             	movzbl (%rax),%eax
  80042107e1:	84 c0                	test   %al,%al
  80042107e3:	75 cc                	jne    80042107b1 <strlcpy+0x25>
  80042107e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042107e9:	c6 00 00             	movb   $0x0,(%rax)
  80042107ec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042107f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042107f4:	48 29 c2             	sub    %rax,%rdx
  80042107f7:	48 89 d0             	mov    %rdx,%rax
  80042107fa:	c9                   	leaveq 
  80042107fb:	c3                   	retq   

00000080042107fc <strcmp>:
  80042107fc:	55                   	push   %rbp
  80042107fd:	48 89 e5             	mov    %rsp,%rbp
  8004210800:	48 83 ec 10          	sub    $0x10,%rsp
  8004210804:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210808:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421080c:	eb 0a                	jmp    8004210818 <strcmp+0x1c>
  800421080e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210813:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210818:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421081c:	0f b6 00             	movzbl (%rax),%eax
  800421081f:	84 c0                	test   %al,%al
  8004210821:	74 12                	je     8004210835 <strcmp+0x39>
  8004210823:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210827:	0f b6 10             	movzbl (%rax),%edx
  800421082a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421082e:	0f b6 00             	movzbl (%rax),%eax
  8004210831:	38 c2                	cmp    %al,%dl
  8004210833:	74 d9                	je     800421080e <strcmp+0x12>
  8004210835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210839:	0f b6 00             	movzbl (%rax),%eax
  800421083c:	0f b6 d0             	movzbl %al,%edx
  800421083f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210843:	0f b6 00             	movzbl (%rax),%eax
  8004210846:	0f b6 c0             	movzbl %al,%eax
  8004210849:	29 c2                	sub    %eax,%edx
  800421084b:	89 d0                	mov    %edx,%eax
  800421084d:	c9                   	leaveq 
  800421084e:	c3                   	retq   

000000800421084f <strncmp>:
  800421084f:	55                   	push   %rbp
  8004210850:	48 89 e5             	mov    %rsp,%rbp
  8004210853:	48 83 ec 18          	sub    $0x18,%rsp
  8004210857:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421085b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800421085f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210863:	eb 0f                	jmp    8004210874 <strncmp+0x25>
  8004210865:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  800421086a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800421086f:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210874:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210879:	74 1d                	je     8004210898 <strncmp+0x49>
  800421087b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421087f:	0f b6 00             	movzbl (%rax),%eax
  8004210882:	84 c0                	test   %al,%al
  8004210884:	74 12                	je     8004210898 <strncmp+0x49>
  8004210886:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421088a:	0f b6 10             	movzbl (%rax),%edx
  800421088d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210891:	0f b6 00             	movzbl (%rax),%eax
  8004210894:	38 c2                	cmp    %al,%dl
  8004210896:	74 cd                	je     8004210865 <strncmp+0x16>
  8004210898:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421089d:	75 07                	jne    80042108a6 <strncmp+0x57>
  800421089f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042108a4:	eb 18                	jmp    80042108be <strncmp+0x6f>
  80042108a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042108aa:	0f b6 00             	movzbl (%rax),%eax
  80042108ad:	0f b6 d0             	movzbl %al,%edx
  80042108b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042108b4:	0f b6 00             	movzbl (%rax),%eax
  80042108b7:	0f b6 c0             	movzbl %al,%eax
  80042108ba:	29 c2                	sub    %eax,%edx
  80042108bc:	89 d0                	mov    %edx,%eax
  80042108be:	c9                   	leaveq 
  80042108bf:	c3                   	retq   

00000080042108c0 <strchr>:
  80042108c0:	55                   	push   %rbp
  80042108c1:	48 89 e5             	mov    %rsp,%rbp
  80042108c4:	48 83 ec 0c          	sub    $0xc,%rsp
  80042108c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042108cc:	89 f0                	mov    %esi,%eax
  80042108ce:	88 45 f4             	mov    %al,-0xc(%rbp)
  80042108d1:	eb 17                	jmp    80042108ea <strchr+0x2a>
  80042108d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042108d7:	0f b6 00             	movzbl (%rax),%eax
  80042108da:	3a 45 f4             	cmp    -0xc(%rbp),%al
  80042108dd:	75 06                	jne    80042108e5 <strchr+0x25>
  80042108df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042108e3:	eb 15                	jmp    80042108fa <strchr+0x3a>
  80042108e5:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042108ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042108ee:	0f b6 00             	movzbl (%rax),%eax
  80042108f1:	84 c0                	test   %al,%al
  80042108f3:	75 de                	jne    80042108d3 <strchr+0x13>
  80042108f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042108fa:	c9                   	leaveq 
  80042108fb:	c3                   	retq   

00000080042108fc <strfind>:
  80042108fc:	55                   	push   %rbp
  80042108fd:	48 89 e5             	mov    %rsp,%rbp
  8004210900:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210904:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210908:	89 f0                	mov    %esi,%eax
  800421090a:	88 45 f4             	mov    %al,-0xc(%rbp)
  800421090d:	eb 13                	jmp    8004210922 <strfind+0x26>
  800421090f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210913:	0f b6 00             	movzbl (%rax),%eax
  8004210916:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210919:	75 02                	jne    800421091d <strfind+0x21>
  800421091b:	eb 10                	jmp    800421092d <strfind+0x31>
  800421091d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210922:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210926:	0f b6 00             	movzbl (%rax),%eax
  8004210929:	84 c0                	test   %al,%al
  800421092b:	75 e2                	jne    800421090f <strfind+0x13>
  800421092d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210931:	c9                   	leaveq 
  8004210932:	c3                   	retq   

0000008004210933 <memset>:
  8004210933:	55                   	push   %rbp
  8004210934:	48 89 e5             	mov    %rsp,%rbp
  8004210937:	48 83 ec 18          	sub    $0x18,%rsp
  800421093b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421093f:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210942:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210946:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421094b:	75 06                	jne    8004210953 <memset+0x20>
  800421094d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210951:	eb 69                	jmp    80042109bc <memset+0x89>
  8004210953:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210957:	83 e0 03             	and    $0x3,%eax
  800421095a:	48 85 c0             	test   %rax,%rax
  800421095d:	75 48                	jne    80042109a7 <memset+0x74>
  800421095f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210963:	83 e0 03             	and    $0x3,%eax
  8004210966:	48 85 c0             	test   %rax,%rax
  8004210969:	75 3c                	jne    80042109a7 <memset+0x74>
  800421096b:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  8004210972:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210975:	c1 e0 18             	shl    $0x18,%eax
  8004210978:	89 c2                	mov    %eax,%edx
  800421097a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421097d:	c1 e0 10             	shl    $0x10,%eax
  8004210980:	09 c2                	or     %eax,%edx
  8004210982:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210985:	c1 e0 08             	shl    $0x8,%eax
  8004210988:	09 d0                	or     %edx,%eax
  800421098a:	09 45 f4             	or     %eax,-0xc(%rbp)
  800421098d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210991:	48 c1 e8 02          	shr    $0x2,%rax
  8004210995:	48 89 c1             	mov    %rax,%rcx
  8004210998:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421099c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421099f:	48 89 d7             	mov    %rdx,%rdi
  80042109a2:	fc                   	cld    
  80042109a3:	f3 ab                	rep stos %eax,%es:(%rdi)
  80042109a5:	eb 11                	jmp    80042109b8 <memset+0x85>
  80042109a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042109ab:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042109ae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042109b2:	48 89 d7             	mov    %rdx,%rdi
  80042109b5:	fc                   	cld    
  80042109b6:	f3 aa                	rep stos %al,%es:(%rdi)
  80042109b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042109bc:	c9                   	leaveq 
  80042109bd:	c3                   	retq   

00000080042109be <memmove>:
  80042109be:	55                   	push   %rbp
  80042109bf:	48 89 e5             	mov    %rsp,%rbp
  80042109c2:	48 83 ec 28          	sub    $0x28,%rsp
  80042109c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042109ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042109ce:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042109d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042109d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042109da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042109e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042109e6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042109ea:	0f 83 88 00 00 00    	jae    8004210a78 <memmove+0xba>
  80042109f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042109f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042109f8:	48 01 d0             	add    %rdx,%rax
  80042109fb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  80042109ff:	76 77                	jbe    8004210a78 <memmove+0xba>
  8004210a01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a05:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210a09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a0d:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004210a11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a15:	83 e0 03             	and    $0x3,%eax
  8004210a18:	48 85 c0             	test   %rax,%rax
  8004210a1b:	75 3b                	jne    8004210a58 <memmove+0x9a>
  8004210a1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a21:	83 e0 03             	and    $0x3,%eax
  8004210a24:	48 85 c0             	test   %rax,%rax
  8004210a27:	75 2f                	jne    8004210a58 <memmove+0x9a>
  8004210a29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a2d:	83 e0 03             	and    $0x3,%eax
  8004210a30:	48 85 c0             	test   %rax,%rax
  8004210a33:	75 23                	jne    8004210a58 <memmove+0x9a>
  8004210a35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a39:	48 83 e8 04          	sub    $0x4,%rax
  8004210a3d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210a41:	48 83 ea 04          	sub    $0x4,%rdx
  8004210a45:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210a49:	48 c1 e9 02          	shr    $0x2,%rcx
  8004210a4d:	48 89 c7             	mov    %rax,%rdi
  8004210a50:	48 89 d6             	mov    %rdx,%rsi
  8004210a53:	fd                   	std    
  8004210a54:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210a56:	eb 1d                	jmp    8004210a75 <memmove+0xb7>
  8004210a58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a5c:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210a60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a64:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210a68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a6c:	48 89 d7             	mov    %rdx,%rdi
  8004210a6f:	48 89 c1             	mov    %rax,%rcx
  8004210a72:	fd                   	std    
  8004210a73:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210a75:	fc                   	cld    
  8004210a76:	eb 57                	jmp    8004210acf <memmove+0x111>
  8004210a78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a7c:	83 e0 03             	and    $0x3,%eax
  8004210a7f:	48 85 c0             	test   %rax,%rax
  8004210a82:	75 36                	jne    8004210aba <memmove+0xfc>
  8004210a84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a88:	83 e0 03             	and    $0x3,%eax
  8004210a8b:	48 85 c0             	test   %rax,%rax
  8004210a8e:	75 2a                	jne    8004210aba <memmove+0xfc>
  8004210a90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210a94:	83 e0 03             	and    $0x3,%eax
  8004210a97:	48 85 c0             	test   %rax,%rax
  8004210a9a:	75 1e                	jne    8004210aba <memmove+0xfc>
  8004210a9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210aa0:	48 c1 e8 02          	shr    $0x2,%rax
  8004210aa4:	48 89 c1             	mov    %rax,%rcx
  8004210aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210aab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210aaf:	48 89 c7             	mov    %rax,%rdi
  8004210ab2:	48 89 d6             	mov    %rdx,%rsi
  8004210ab5:	fc                   	cld    
  8004210ab6:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210ab8:	eb 15                	jmp    8004210acf <memmove+0x111>
  8004210aba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210abe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210ac2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210ac6:	48 89 c7             	mov    %rax,%rdi
  8004210ac9:	48 89 d6             	mov    %rdx,%rsi
  8004210acc:	fc                   	cld    
  8004210acd:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210acf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ad3:	c9                   	leaveq 
  8004210ad4:	c3                   	retq   

0000008004210ad5 <memcpy>:
  8004210ad5:	55                   	push   %rbp
  8004210ad6:	48 89 e5             	mov    %rsp,%rbp
  8004210ad9:	48 83 ec 18          	sub    $0x18,%rsp
  8004210add:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210ae1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210ae5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210ae9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210aed:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004210af1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210af5:	48 89 ce             	mov    %rcx,%rsi
  8004210af8:	48 89 c7             	mov    %rax,%rdi
  8004210afb:	48 b8 be 09 21 04 80 	movabs $0x80042109be,%rax
  8004210b02:	00 00 00 
  8004210b05:	ff d0                	callq  *%rax
  8004210b07:	c9                   	leaveq 
  8004210b08:	c3                   	retq   

0000008004210b09 <memcmp>:
  8004210b09:	55                   	push   %rbp
  8004210b0a:	48 89 e5             	mov    %rsp,%rbp
  8004210b0d:	48 83 ec 28          	sub    $0x28,%rsp
  8004210b11:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b15:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210b19:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210b1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210b25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210b29:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210b2d:	eb 36                	jmp    8004210b65 <memcmp+0x5c>
  8004210b2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b33:	0f b6 10             	movzbl (%rax),%edx
  8004210b36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b3a:	0f b6 00             	movzbl (%rax),%eax
  8004210b3d:	38 c2                	cmp    %al,%dl
  8004210b3f:	74 1a                	je     8004210b5b <memcmp+0x52>
  8004210b41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b45:	0f b6 00             	movzbl (%rax),%eax
  8004210b48:	0f b6 d0             	movzbl %al,%edx
  8004210b4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b4f:	0f b6 00             	movzbl (%rax),%eax
  8004210b52:	0f b6 c0             	movzbl %al,%eax
  8004210b55:	29 c2                	sub    %eax,%edx
  8004210b57:	89 d0                	mov    %edx,%eax
  8004210b59:	eb 20                	jmp    8004210b7b <memcmp+0x72>
  8004210b5b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210b60:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210b65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b69:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210b6d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210b71:	48 85 c0             	test   %rax,%rax
  8004210b74:	75 b9                	jne    8004210b2f <memcmp+0x26>
  8004210b76:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210b7b:	c9                   	leaveq 
  8004210b7c:	c3                   	retq   

0000008004210b7d <memfind>:
  8004210b7d:	55                   	push   %rbp
  8004210b7e:	48 89 e5             	mov    %rsp,%rbp
  8004210b81:	48 83 ec 28          	sub    $0x28,%rsp
  8004210b85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210b89:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210b8c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210b90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210b94:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210b98:	48 01 d0             	add    %rdx,%rax
  8004210b9b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210b9f:	eb 15                	jmp    8004210bb6 <memfind+0x39>
  8004210ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ba5:	0f b6 10             	movzbl (%rax),%edx
  8004210ba8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210bab:	38 c2                	cmp    %al,%dl
  8004210bad:	75 02                	jne    8004210bb1 <memfind+0x34>
  8004210baf:	eb 0f                	jmp    8004210bc0 <memfind+0x43>
  8004210bb1:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210bb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bba:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004210bbe:	72 e1                	jb     8004210ba1 <memfind+0x24>
  8004210bc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bc4:	c9                   	leaveq 
  8004210bc5:	c3                   	retq   

0000008004210bc6 <strtol>:
  8004210bc6:	55                   	push   %rbp
  8004210bc7:	48 89 e5             	mov    %rsp,%rbp
  8004210bca:	48 83 ec 34          	sub    $0x34,%rsp
  8004210bce:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210bd2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210bd6:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004210bd9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210be0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210be7:	00 
  8004210be8:	eb 05                	jmp    8004210bef <strtol+0x29>
  8004210bea:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210bef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bf3:	0f b6 00             	movzbl (%rax),%eax
  8004210bf6:	3c 20                	cmp    $0x20,%al
  8004210bf8:	74 f0                	je     8004210bea <strtol+0x24>
  8004210bfa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210bfe:	0f b6 00             	movzbl (%rax),%eax
  8004210c01:	3c 09                	cmp    $0x9,%al
  8004210c03:	74 e5                	je     8004210bea <strtol+0x24>
  8004210c05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c09:	0f b6 00             	movzbl (%rax),%eax
  8004210c0c:	3c 2b                	cmp    $0x2b,%al
  8004210c0e:	75 07                	jne    8004210c17 <strtol+0x51>
  8004210c10:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210c15:	eb 17                	jmp    8004210c2e <strtol+0x68>
  8004210c17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c1b:	0f b6 00             	movzbl (%rax),%eax
  8004210c1e:	3c 2d                	cmp    $0x2d,%al
  8004210c20:	75 0c                	jne    8004210c2e <strtol+0x68>
  8004210c22:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210c27:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  8004210c2e:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210c32:	74 06                	je     8004210c3a <strtol+0x74>
  8004210c34:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210c38:	75 28                	jne    8004210c62 <strtol+0x9c>
  8004210c3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c3e:	0f b6 00             	movzbl (%rax),%eax
  8004210c41:	3c 30                	cmp    $0x30,%al
  8004210c43:	75 1d                	jne    8004210c62 <strtol+0x9c>
  8004210c45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c49:	48 83 c0 01          	add    $0x1,%rax
  8004210c4d:	0f b6 00             	movzbl (%rax),%eax
  8004210c50:	3c 78                	cmp    $0x78,%al
  8004210c52:	75 0e                	jne    8004210c62 <strtol+0x9c>
  8004210c54:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  8004210c59:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  8004210c60:	eb 2c                	jmp    8004210c8e <strtol+0xc8>
  8004210c62:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210c66:	75 19                	jne    8004210c81 <strtol+0xbb>
  8004210c68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c6c:	0f b6 00             	movzbl (%rax),%eax
  8004210c6f:	3c 30                	cmp    $0x30,%al
  8004210c71:	75 0e                	jne    8004210c81 <strtol+0xbb>
  8004210c73:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210c78:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  8004210c7f:	eb 0d                	jmp    8004210c8e <strtol+0xc8>
  8004210c81:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210c85:	75 07                	jne    8004210c8e <strtol+0xc8>
  8004210c87:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  8004210c8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c92:	0f b6 00             	movzbl (%rax),%eax
  8004210c95:	3c 2f                	cmp    $0x2f,%al
  8004210c97:	7e 1d                	jle    8004210cb6 <strtol+0xf0>
  8004210c99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c9d:	0f b6 00             	movzbl (%rax),%eax
  8004210ca0:	3c 39                	cmp    $0x39,%al
  8004210ca2:	7f 12                	jg     8004210cb6 <strtol+0xf0>
  8004210ca4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ca8:	0f b6 00             	movzbl (%rax),%eax
  8004210cab:	0f be c0             	movsbl %al,%eax
  8004210cae:	83 e8 30             	sub    $0x30,%eax
  8004210cb1:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210cb4:	eb 4e                	jmp    8004210d04 <strtol+0x13e>
  8004210cb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cba:	0f b6 00             	movzbl (%rax),%eax
  8004210cbd:	3c 60                	cmp    $0x60,%al
  8004210cbf:	7e 1d                	jle    8004210cde <strtol+0x118>
  8004210cc1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cc5:	0f b6 00             	movzbl (%rax),%eax
  8004210cc8:	3c 7a                	cmp    $0x7a,%al
  8004210cca:	7f 12                	jg     8004210cde <strtol+0x118>
  8004210ccc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cd0:	0f b6 00             	movzbl (%rax),%eax
  8004210cd3:	0f be c0             	movsbl %al,%eax
  8004210cd6:	83 e8 57             	sub    $0x57,%eax
  8004210cd9:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210cdc:	eb 26                	jmp    8004210d04 <strtol+0x13e>
  8004210cde:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ce2:	0f b6 00             	movzbl (%rax),%eax
  8004210ce5:	3c 40                	cmp    $0x40,%al
  8004210ce7:	7e 48                	jle    8004210d31 <strtol+0x16b>
  8004210ce9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ced:	0f b6 00             	movzbl (%rax),%eax
  8004210cf0:	3c 5a                	cmp    $0x5a,%al
  8004210cf2:	7f 3d                	jg     8004210d31 <strtol+0x16b>
  8004210cf4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cf8:	0f b6 00             	movzbl (%rax),%eax
  8004210cfb:	0f be c0             	movsbl %al,%eax
  8004210cfe:	83 e8 37             	sub    $0x37,%eax
  8004210d01:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210d04:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210d07:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  8004210d0a:	7c 02                	jl     8004210d0e <strtol+0x148>
  8004210d0c:	eb 23                	jmp    8004210d31 <strtol+0x16b>
  8004210d0e:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210d13:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210d16:	48 98                	cltq   
  8004210d18:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  8004210d1d:	48 89 c2             	mov    %rax,%rdx
  8004210d20:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210d23:	48 98                	cltq   
  8004210d25:	48 01 d0             	add    %rdx,%rax
  8004210d28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210d2c:	e9 5d ff ff ff       	jmpq   8004210c8e <strtol+0xc8>
  8004210d31:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210d36:	74 0b                	je     8004210d43 <strtol+0x17d>
  8004210d38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210d3c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210d40:	48 89 10             	mov    %rdx,(%rax)
  8004210d43:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210d47:	74 09                	je     8004210d52 <strtol+0x18c>
  8004210d49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d4d:	48 f7 d8             	neg    %rax
  8004210d50:	eb 04                	jmp    8004210d56 <strtol+0x190>
  8004210d52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d56:	c9                   	leaveq 
  8004210d57:	c3                   	retq   

0000008004210d58 <strstr>:
  8004210d58:	55                   	push   %rbp
  8004210d59:	48 89 e5             	mov    %rsp,%rbp
  8004210d5c:	48 83 ec 30          	sub    $0x30,%rsp
  8004210d60:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210d64:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210d68:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210d6c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210d70:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004210d74:	0f b6 00             	movzbl (%rax),%eax
  8004210d77:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004210d7a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004210d7e:	75 06                	jne    8004210d86 <strstr+0x2e>
  8004210d80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d84:	eb 6b                	jmp    8004210df1 <strstr+0x99>
  8004210d86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210d8a:	48 89 c7             	mov    %rax,%rdi
  8004210d8d:	48 b8 2e 06 21 04 80 	movabs $0x800421062e,%rax
  8004210d94:	00 00 00 
  8004210d97:	ff d0                	callq  *%rax
  8004210d99:	48 98                	cltq   
  8004210d9b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210d9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210da3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210da7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210dab:	0f b6 00             	movzbl (%rax),%eax
  8004210dae:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004210db1:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  8004210db5:	75 07                	jne    8004210dbe <strstr+0x66>
  8004210db7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210dbc:	eb 33                	jmp    8004210df1 <strstr+0x99>
  8004210dbe:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004210dc2:	3a 45 ff             	cmp    -0x1(%rbp),%al
  8004210dc5:	75 d8                	jne    8004210d9f <strstr+0x47>
  8004210dc7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210dcb:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  8004210dcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210dd3:	48 89 ce             	mov    %rcx,%rsi
  8004210dd6:	48 89 c7             	mov    %rax,%rdi
  8004210dd9:	48 b8 4f 08 21 04 80 	movabs $0x800421084f,%rax
  8004210de0:	00 00 00 
  8004210de3:	ff d0                	callq  *%rax
  8004210de5:	85 c0                	test   %eax,%eax
  8004210de7:	75 b6                	jne    8004210d9f <strstr+0x47>
  8004210de9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ded:	48 83 e8 01          	sub    $0x1,%rax
  8004210df1:	c9                   	leaveq 
  8004210df2:	c3                   	retq   

0000008004210df3 <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004210df3:	55                   	push   %rbp
  8004210df4:	48 89 e5             	mov    %rsp,%rbp
  8004210df7:	48 83 ec 24          	sub    $0x24,%rsp
  8004210dfb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210dff:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210e03:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004210e06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210e0a:	48 8b 10             	mov    (%rax),%rdx
  8004210e0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e11:	48 01 d0             	add    %rdx,%rax
  8004210e14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210e18:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210e1f:	00 
	switch (bytes_to_read) {
  8004210e20:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210e23:	83 f8 02             	cmp    $0x2,%eax
  8004210e26:	0f 84 ab 00 00 00    	je     8004210ed7 <_dwarf_read_lsb+0xe4>
  8004210e2c:	83 f8 02             	cmp    $0x2,%eax
  8004210e2f:	7f 0e                	jg     8004210e3f <_dwarf_read_lsb+0x4c>
  8004210e31:	83 f8 01             	cmp    $0x1,%eax
  8004210e34:	0f 84 b3 00 00 00    	je     8004210eed <_dwarf_read_lsb+0xfa>
  8004210e3a:	e9 d9 00 00 00       	jmpq   8004210f18 <_dwarf_read_lsb+0x125>
  8004210e3f:	83 f8 04             	cmp    $0x4,%eax
  8004210e42:	74 65                	je     8004210ea9 <_dwarf_read_lsb+0xb6>
  8004210e44:	83 f8 08             	cmp    $0x8,%eax
  8004210e47:	0f 85 cb 00 00 00    	jne    8004210f18 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004210e4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e51:	48 83 c0 04          	add    $0x4,%rax
  8004210e55:	0f b6 00             	movzbl (%rax),%eax
  8004210e58:	0f b6 c0             	movzbl %al,%eax
  8004210e5b:	48 c1 e0 20          	shl    $0x20,%rax
  8004210e5f:	48 89 c2             	mov    %rax,%rdx
  8004210e62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e66:	48 83 c0 05          	add    $0x5,%rax
  8004210e6a:	0f b6 00             	movzbl (%rax),%eax
  8004210e6d:	0f b6 c0             	movzbl %al,%eax
  8004210e70:	48 c1 e0 28          	shl    $0x28,%rax
  8004210e74:	48 09 d0             	or     %rdx,%rax
  8004210e77:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210e7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e7f:	48 83 c0 06          	add    $0x6,%rax
  8004210e83:	0f b6 00             	movzbl (%rax),%eax
  8004210e86:	0f b6 c0             	movzbl %al,%eax
  8004210e89:	48 c1 e0 30          	shl    $0x30,%rax
  8004210e8d:	48 89 c2             	mov    %rax,%rdx
  8004210e90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210e94:	48 83 c0 07          	add    $0x7,%rax
  8004210e98:	0f b6 00             	movzbl (%rax),%eax
  8004210e9b:	0f b6 c0             	movzbl %al,%eax
  8004210e9e:	48 c1 e0 38          	shl    $0x38,%rax
  8004210ea2:	48 09 d0             	or     %rdx,%rax
  8004210ea5:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210ea9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ead:	48 83 c0 02          	add    $0x2,%rax
  8004210eb1:	0f b6 00             	movzbl (%rax),%eax
  8004210eb4:	0f b6 c0             	movzbl %al,%eax
  8004210eb7:	48 c1 e0 10          	shl    $0x10,%rax
  8004210ebb:	48 89 c2             	mov    %rax,%rdx
  8004210ebe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ec2:	48 83 c0 03          	add    $0x3,%rax
  8004210ec6:	0f b6 00             	movzbl (%rax),%eax
  8004210ec9:	0f b6 c0             	movzbl %al,%eax
  8004210ecc:	48 c1 e0 18          	shl    $0x18,%rax
  8004210ed0:	48 09 d0             	or     %rdx,%rax
  8004210ed3:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210ed7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210edb:	48 83 c0 01          	add    $0x1,%rax
  8004210edf:	0f b6 00             	movzbl (%rax),%eax
  8004210ee2:	0f b6 c0             	movzbl %al,%eax
  8004210ee5:	48 c1 e0 08          	shl    $0x8,%rax
  8004210ee9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004210eed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ef1:	0f b6 00             	movzbl (%rax),%eax
  8004210ef4:	0f b6 c0             	movzbl %al,%eax
  8004210ef7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004210efb:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004210efc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f00:	48 8b 10             	mov    (%rax),%rdx
  8004210f03:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004210f06:	48 98                	cltq   
  8004210f08:	48 01 c2             	add    %rax,%rdx
  8004210f0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210f0f:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004210f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210f16:	eb 05                	jmp    8004210f1d <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004210f18:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  8004210f1d:	c9                   	leaveq 
  8004210f1e:	c3                   	retq   

0000008004210f1f <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  8004210f1f:	55                   	push   %rbp
  8004210f20:	48 89 e5             	mov    %rsp,%rbp
  8004210f23:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004210f27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210f2b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004210f2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210f32:	48 8b 00             	mov    (%rax),%rax
  8004210f35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004210f39:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210f40:	00 
	switch (bytes_to_read) {
  8004210f41:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210f44:	83 f8 02             	cmp    $0x2,%eax
  8004210f47:	0f 84 ab 00 00 00    	je     8004210ff8 <_dwarf_decode_lsb+0xd9>
  8004210f4d:	83 f8 02             	cmp    $0x2,%eax
  8004210f50:	7f 0e                	jg     8004210f60 <_dwarf_decode_lsb+0x41>
  8004210f52:	83 f8 01             	cmp    $0x1,%eax
  8004210f55:	0f 84 b3 00 00 00    	je     800421100e <_dwarf_decode_lsb+0xef>
  8004210f5b:	e9 d9 00 00 00       	jmpq   8004211039 <_dwarf_decode_lsb+0x11a>
  8004210f60:	83 f8 04             	cmp    $0x4,%eax
  8004210f63:	74 65                	je     8004210fca <_dwarf_decode_lsb+0xab>
  8004210f65:	83 f8 08             	cmp    $0x8,%eax
  8004210f68:	0f 85 cb 00 00 00    	jne    8004211039 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004210f6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f72:	48 83 c0 04          	add    $0x4,%rax
  8004210f76:	0f b6 00             	movzbl (%rax),%eax
  8004210f79:	0f b6 c0             	movzbl %al,%eax
  8004210f7c:	48 c1 e0 20          	shl    $0x20,%rax
  8004210f80:	48 89 c2             	mov    %rax,%rdx
  8004210f83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f87:	48 83 c0 05          	add    $0x5,%rax
  8004210f8b:	0f b6 00             	movzbl (%rax),%eax
  8004210f8e:	0f b6 c0             	movzbl %al,%eax
  8004210f91:	48 c1 e0 28          	shl    $0x28,%rax
  8004210f95:	48 09 d0             	or     %rdx,%rax
  8004210f98:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004210f9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fa0:	48 83 c0 06          	add    $0x6,%rax
  8004210fa4:	0f b6 00             	movzbl (%rax),%eax
  8004210fa7:	0f b6 c0             	movzbl %al,%eax
  8004210faa:	48 c1 e0 30          	shl    $0x30,%rax
  8004210fae:	48 89 c2             	mov    %rax,%rdx
  8004210fb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fb5:	48 83 c0 07          	add    $0x7,%rax
  8004210fb9:	0f b6 00             	movzbl (%rax),%eax
  8004210fbc:	0f b6 c0             	movzbl %al,%eax
  8004210fbf:	48 c1 e0 38          	shl    $0x38,%rax
  8004210fc3:	48 09 d0             	or     %rdx,%rax
  8004210fc6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004210fca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fce:	48 83 c0 02          	add    $0x2,%rax
  8004210fd2:	0f b6 00             	movzbl (%rax),%eax
  8004210fd5:	0f b6 c0             	movzbl %al,%eax
  8004210fd8:	48 c1 e0 10          	shl    $0x10,%rax
  8004210fdc:	48 89 c2             	mov    %rax,%rdx
  8004210fdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fe3:	48 83 c0 03          	add    $0x3,%rax
  8004210fe7:	0f b6 00             	movzbl (%rax),%eax
  8004210fea:	0f b6 c0             	movzbl %al,%eax
  8004210fed:	48 c1 e0 18          	shl    $0x18,%rax
  8004210ff1:	48 09 d0             	or     %rdx,%rax
  8004210ff4:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004210ff8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ffc:	48 83 c0 01          	add    $0x1,%rax
  8004211000:	0f b6 00             	movzbl (%rax),%eax
  8004211003:	0f b6 c0             	movzbl %al,%eax
  8004211006:	48 c1 e0 08          	shl    $0x8,%rax
  800421100a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  800421100e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211012:	0f b6 00             	movzbl (%rax),%eax
  8004211015:	0f b6 c0             	movzbl %al,%eax
  8004211018:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421101c:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  800421101d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211021:	48 8b 10             	mov    (%rax),%rdx
  8004211024:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211027:	48 98                	cltq   
  8004211029:	48 01 c2             	add    %rax,%rdx
  800421102c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211030:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211033:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211037:	eb 05                	jmp    800421103e <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004211039:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  800421103e:	c9                   	leaveq 
  800421103f:	c3                   	retq   

0000008004211040 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004211040:	55                   	push   %rbp
  8004211041:	48 89 e5             	mov    %rsp,%rbp
  8004211044:	48 83 ec 24          	sub    $0x24,%rsp
  8004211048:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421104c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211050:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  8004211053:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211057:	48 8b 10             	mov    (%rax),%rdx
  800421105a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421105e:	48 01 d0             	add    %rdx,%rax
  8004211061:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  8004211065:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211068:	83 f8 02             	cmp    $0x2,%eax
  800421106b:	74 35                	je     80042110a2 <_dwarf_read_msb+0x62>
  800421106d:	83 f8 02             	cmp    $0x2,%eax
  8004211070:	7f 0a                	jg     800421107c <_dwarf_read_msb+0x3c>
  8004211072:	83 f8 01             	cmp    $0x1,%eax
  8004211075:	74 18                	je     800421108f <_dwarf_read_msb+0x4f>
  8004211077:	e9 53 01 00 00       	jmpq   80042111cf <_dwarf_read_msb+0x18f>
  800421107c:	83 f8 04             	cmp    $0x4,%eax
  800421107f:	74 49                	je     80042110ca <_dwarf_read_msb+0x8a>
  8004211081:	83 f8 08             	cmp    $0x8,%eax
  8004211084:	0f 84 96 00 00 00    	je     8004211120 <_dwarf_read_msb+0xe0>
  800421108a:	e9 40 01 00 00       	jmpq   80042111cf <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  800421108f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211093:	0f b6 00             	movzbl (%rax),%eax
  8004211096:	0f b6 c0             	movzbl %al,%eax
  8004211099:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800421109d:	e9 34 01 00 00       	jmpq   80042111d6 <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042110a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110a6:	48 83 c0 01          	add    $0x1,%rax
  80042110aa:	0f b6 00             	movzbl (%rax),%eax
  80042110ad:	0f b6 d0             	movzbl %al,%edx
  80042110b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110b4:	0f b6 00             	movzbl (%rax),%eax
  80042110b7:	0f b6 c0             	movzbl %al,%eax
  80042110ba:	48 c1 e0 08          	shl    $0x8,%rax
  80042110be:	48 09 d0             	or     %rdx,%rax
  80042110c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042110c5:	e9 0c 01 00 00       	jmpq   80042111d6 <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042110ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110ce:	48 83 c0 03          	add    $0x3,%rax
  80042110d2:	0f b6 00             	movzbl (%rax),%eax
  80042110d5:	0f b6 c0             	movzbl %al,%eax
  80042110d8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042110dc:	48 83 c2 02          	add    $0x2,%rdx
  80042110e0:	0f b6 12             	movzbl (%rdx),%edx
  80042110e3:	0f b6 d2             	movzbl %dl,%edx
  80042110e6:	48 c1 e2 08          	shl    $0x8,%rdx
  80042110ea:	48 09 d0             	or     %rdx,%rax
  80042110ed:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042110f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110f5:	48 83 c0 01          	add    $0x1,%rax
  80042110f9:	0f b6 00             	movzbl (%rax),%eax
  80042110fc:	0f b6 c0             	movzbl %al,%eax
  80042110ff:	48 c1 e0 10          	shl    $0x10,%rax
  8004211103:	48 89 c2             	mov    %rax,%rdx
  8004211106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421110a:	0f b6 00             	movzbl (%rax),%eax
  800421110d:	0f b6 c0             	movzbl %al,%eax
  8004211110:	48 c1 e0 18          	shl    $0x18,%rax
  8004211114:	48 09 d0             	or     %rdx,%rax
  8004211117:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421111b:	e9 b6 00 00 00       	jmpq   80042111d6 <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211120:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211124:	48 83 c0 07          	add    $0x7,%rax
  8004211128:	0f b6 00             	movzbl (%rax),%eax
  800421112b:	0f b6 c0             	movzbl %al,%eax
  800421112e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211132:	48 83 c2 06          	add    $0x6,%rdx
  8004211136:	0f b6 12             	movzbl (%rdx),%edx
  8004211139:	0f b6 d2             	movzbl %dl,%edx
  800421113c:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211140:	48 09 d0             	or     %rdx,%rax
  8004211143:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  8004211147:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421114b:	48 83 c0 05          	add    $0x5,%rax
  800421114f:	0f b6 00             	movzbl (%rax),%eax
  8004211152:	0f b6 c0             	movzbl %al,%eax
  8004211155:	48 c1 e0 10          	shl    $0x10,%rax
  8004211159:	48 89 c2             	mov    %rax,%rdx
  800421115c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211160:	48 83 c0 04          	add    $0x4,%rax
  8004211164:	0f b6 00             	movzbl (%rax),%eax
  8004211167:	0f b6 c0             	movzbl %al,%eax
  800421116a:	48 c1 e0 18          	shl    $0x18,%rax
  800421116e:	48 09 d0             	or     %rdx,%rax
  8004211171:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211175:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211179:	48 83 c0 03          	add    $0x3,%rax
  800421117d:	0f b6 00             	movzbl (%rax),%eax
  8004211180:	0f b6 c0             	movzbl %al,%eax
  8004211183:	48 c1 e0 20          	shl    $0x20,%rax
  8004211187:	48 89 c2             	mov    %rax,%rdx
  800421118a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421118e:	48 83 c0 02          	add    $0x2,%rax
  8004211192:	0f b6 00             	movzbl (%rax),%eax
  8004211195:	0f b6 c0             	movzbl %al,%eax
  8004211198:	48 c1 e0 28          	shl    $0x28,%rax
  800421119c:	48 09 d0             	or     %rdx,%rax
  800421119f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042111a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111a7:	48 83 c0 01          	add    $0x1,%rax
  80042111ab:	0f b6 00             	movzbl (%rax),%eax
  80042111ae:	0f b6 c0             	movzbl %al,%eax
  80042111b1:	48 c1 e0 30          	shl    $0x30,%rax
  80042111b5:	48 89 c2             	mov    %rax,%rdx
  80042111b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111bc:	0f b6 00             	movzbl (%rax),%eax
  80042111bf:	0f b6 c0             	movzbl %al,%eax
  80042111c2:	48 c1 e0 38          	shl    $0x38,%rax
  80042111c6:	48 09 d0             	or     %rdx,%rax
  80042111c9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042111cd:	eb 07                	jmp    80042111d6 <_dwarf_read_msb+0x196>
	default:
		return (0);
  80042111cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042111d4:	eb 1a                	jmp    80042111f0 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  80042111d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042111da:	48 8b 10             	mov    (%rax),%rdx
  80042111dd:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042111e0:	48 98                	cltq   
  80042111e2:	48 01 c2             	add    %rax,%rdx
  80042111e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042111e9:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042111ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042111f0:	c9                   	leaveq 
  80042111f1:	c3                   	retq   

00000080042111f2 <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  80042111f2:	55                   	push   %rbp
  80042111f3:	48 89 e5             	mov    %rsp,%rbp
  80042111f6:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042111fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042111fe:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211201:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211205:	48 8b 00             	mov    (%rax),%rax
  8004211208:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  800421120c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211213:	00 
	switch (bytes_to_read) {
  8004211214:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211217:	83 f8 02             	cmp    $0x2,%eax
  800421121a:	74 35                	je     8004211251 <_dwarf_decode_msb+0x5f>
  800421121c:	83 f8 02             	cmp    $0x2,%eax
  800421121f:	7f 0a                	jg     800421122b <_dwarf_decode_msb+0x39>
  8004211221:	83 f8 01             	cmp    $0x1,%eax
  8004211224:	74 18                	je     800421123e <_dwarf_decode_msb+0x4c>
  8004211226:	e9 53 01 00 00       	jmpq   800421137e <_dwarf_decode_msb+0x18c>
  800421122b:	83 f8 04             	cmp    $0x4,%eax
  800421122e:	74 49                	je     8004211279 <_dwarf_decode_msb+0x87>
  8004211230:	83 f8 08             	cmp    $0x8,%eax
  8004211233:	0f 84 96 00 00 00    	je     80042112cf <_dwarf_decode_msb+0xdd>
  8004211239:	e9 40 01 00 00       	jmpq   800421137e <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  800421123e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211242:	0f b6 00             	movzbl (%rax),%eax
  8004211245:	0f b6 c0             	movzbl %al,%eax
  8004211248:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800421124c:	e9 34 01 00 00       	jmpq   8004211385 <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211251:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211255:	48 83 c0 01          	add    $0x1,%rax
  8004211259:	0f b6 00             	movzbl (%rax),%eax
  800421125c:	0f b6 d0             	movzbl %al,%edx
  800421125f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211263:	0f b6 00             	movzbl (%rax),%eax
  8004211266:	0f b6 c0             	movzbl %al,%eax
  8004211269:	48 c1 e0 08          	shl    $0x8,%rax
  800421126d:	48 09 d0             	or     %rdx,%rax
  8004211270:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211274:	e9 0c 01 00 00       	jmpq   8004211385 <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004211279:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421127d:	48 83 c0 03          	add    $0x3,%rax
  8004211281:	0f b6 00             	movzbl (%rax),%eax
  8004211284:	0f b6 c0             	movzbl %al,%eax
  8004211287:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421128b:	48 83 c2 02          	add    $0x2,%rdx
  800421128f:	0f b6 12             	movzbl (%rdx),%edx
  8004211292:	0f b6 d2             	movzbl %dl,%edx
  8004211295:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211299:	48 09 d0             	or     %rdx,%rax
  800421129c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042112a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112a4:	48 83 c0 01          	add    $0x1,%rax
  80042112a8:	0f b6 00             	movzbl (%rax),%eax
  80042112ab:	0f b6 c0             	movzbl %al,%eax
  80042112ae:	48 c1 e0 10          	shl    $0x10,%rax
  80042112b2:	48 89 c2             	mov    %rax,%rdx
  80042112b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112b9:	0f b6 00             	movzbl (%rax),%eax
  80042112bc:	0f b6 c0             	movzbl %al,%eax
  80042112bf:	48 c1 e0 18          	shl    $0x18,%rax
  80042112c3:	48 09 d0             	or     %rdx,%rax
  80042112c6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042112ca:	e9 b6 00 00 00       	jmpq   8004211385 <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  80042112cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112d3:	48 83 c0 07          	add    $0x7,%rax
  80042112d7:	0f b6 00             	movzbl (%rax),%eax
  80042112da:	0f b6 c0             	movzbl %al,%eax
  80042112dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042112e1:	48 83 c2 06          	add    $0x6,%rdx
  80042112e5:	0f b6 12             	movzbl (%rdx),%edx
  80042112e8:	0f b6 d2             	movzbl %dl,%edx
  80042112eb:	48 c1 e2 08          	shl    $0x8,%rdx
  80042112ef:	48 09 d0             	or     %rdx,%rax
  80042112f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042112f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112fa:	48 83 c0 05          	add    $0x5,%rax
  80042112fe:	0f b6 00             	movzbl (%rax),%eax
  8004211301:	0f b6 c0             	movzbl %al,%eax
  8004211304:	48 c1 e0 10          	shl    $0x10,%rax
  8004211308:	48 89 c2             	mov    %rax,%rdx
  800421130b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421130f:	48 83 c0 04          	add    $0x4,%rax
  8004211313:	0f b6 00             	movzbl (%rax),%eax
  8004211316:	0f b6 c0             	movzbl %al,%eax
  8004211319:	48 c1 e0 18          	shl    $0x18,%rax
  800421131d:	48 09 d0             	or     %rdx,%rax
  8004211320:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  8004211324:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211328:	48 83 c0 03          	add    $0x3,%rax
  800421132c:	0f b6 00             	movzbl (%rax),%eax
  800421132f:	0f b6 c0             	movzbl %al,%eax
  8004211332:	48 c1 e0 20          	shl    $0x20,%rax
  8004211336:	48 89 c2             	mov    %rax,%rdx
  8004211339:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421133d:	48 83 c0 02          	add    $0x2,%rax
  8004211341:	0f b6 00             	movzbl (%rax),%eax
  8004211344:	0f b6 c0             	movzbl %al,%eax
  8004211347:	48 c1 e0 28          	shl    $0x28,%rax
  800421134b:	48 09 d0             	or     %rdx,%rax
  800421134e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  8004211352:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211356:	48 83 c0 01          	add    $0x1,%rax
  800421135a:	0f b6 00             	movzbl (%rax),%eax
  800421135d:	0f b6 c0             	movzbl %al,%eax
  8004211360:	48 c1 e0 30          	shl    $0x30,%rax
  8004211364:	48 89 c2             	mov    %rax,%rdx
  8004211367:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421136b:	0f b6 00             	movzbl (%rax),%eax
  800421136e:	0f b6 c0             	movzbl %al,%eax
  8004211371:	48 c1 e0 38          	shl    $0x38,%rax
  8004211375:	48 09 d0             	or     %rdx,%rax
  8004211378:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  800421137c:	eb 07                	jmp    8004211385 <_dwarf_decode_msb+0x193>
	default:
		return (0);
  800421137e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211383:	eb 1a                	jmp    800421139f <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  8004211385:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211389:	48 8b 10             	mov    (%rax),%rdx
  800421138c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421138f:	48 98                	cltq   
  8004211391:	48 01 c2             	add    %rax,%rdx
  8004211394:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211398:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421139b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421139f:	c9                   	leaveq 
  80042113a0:	c3                   	retq   

00000080042113a1 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  80042113a1:	55                   	push   %rbp
  80042113a2:	48 89 e5             	mov    %rsp,%rbp
  80042113a5:	48 83 ec 30          	sub    $0x30,%rsp
  80042113a9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042113ad:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  80042113b1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042113b8:	00 
	uint8_t b;
	int shift = 0;
  80042113b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  80042113c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042113c4:	48 8b 10             	mov    (%rax),%rdx
  80042113c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042113cb:	48 01 d0             	add    %rdx,%rax
  80042113ce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042113d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042113d6:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042113da:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042113de:	0f b6 00             	movzbl (%rax),%eax
  80042113e1:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  80042113e4:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042113e8:	83 e0 7f             	and    $0x7f,%eax
  80042113eb:	89 c2                	mov    %eax,%edx
  80042113ed:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042113f0:	89 c1                	mov    %eax,%ecx
  80042113f2:	d3 e2                	shl    %cl,%edx
  80042113f4:	89 d0                	mov    %edx,%eax
  80042113f6:	48 98                	cltq   
  80042113f8:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  80042113fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211400:	48 8b 00             	mov    (%rax),%rax
  8004211403:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211407:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421140b:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  800421140e:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211412:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211416:	84 c0                	test   %al,%al
  8004211418:	78 b8                	js     80042113d2 <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  800421141a:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800421141e:	7f 1f                	jg     800421143f <_dwarf_read_sleb128+0x9e>
  8004211420:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211424:	83 e0 40             	and    $0x40,%eax
  8004211427:	85 c0                	test   %eax,%eax
  8004211429:	74 14                	je     800421143f <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  800421142b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421142e:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211433:	89 c1                	mov    %eax,%ecx
  8004211435:	d3 e2                	shl    %cl,%edx
  8004211437:	89 d0                	mov    %edx,%eax
  8004211439:	48 98                	cltq   
  800421143b:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  800421143f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211443:	c9                   	leaveq 
  8004211444:	c3                   	retq   

0000008004211445 <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211445:	55                   	push   %rbp
  8004211446:	48 89 e5             	mov    %rsp,%rbp
  8004211449:	48 83 ec 30          	sub    $0x30,%rsp
  800421144d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211451:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  8004211455:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421145c:	00 
	uint8_t b;
	int shift = 0;
  800421145d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211464:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211468:	48 8b 10             	mov    (%rax),%rdx
  800421146b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421146f:	48 01 d0             	add    %rdx,%rax
  8004211472:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211476:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421147a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421147e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211482:	0f b6 00             	movzbl (%rax),%eax
  8004211485:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211488:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421148c:	83 e0 7f             	and    $0x7f,%eax
  800421148f:	89 c2                	mov    %eax,%edx
  8004211491:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211494:	89 c1                	mov    %eax,%ecx
  8004211496:	d3 e2                	shl    %cl,%edx
  8004211498:	89 d0                	mov    %edx,%eax
  800421149a:	48 98                	cltq   
  800421149c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  80042114a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042114a4:	48 8b 00             	mov    (%rax),%rax
  80042114a7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042114ab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042114af:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  80042114b2:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  80042114b6:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042114ba:	84 c0                	test   %al,%al
  80042114bc:	78 b8                	js     8004211476 <_dwarf_read_uleb128+0x31>

	return (ret);
  80042114be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042114c2:	c9                   	leaveq 
  80042114c3:	c3                   	retq   

00000080042114c4 <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  80042114c4:	55                   	push   %rbp
  80042114c5:	48 89 e5             	mov    %rsp,%rbp
  80042114c8:	48 83 ec 28          	sub    $0x28,%rsp
  80042114cc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  80042114d0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042114d7:	00 
	uint8_t b;
	int shift = 0;
  80042114d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  80042114df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042114e3:	48 8b 00             	mov    (%rax),%rax
  80042114e6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042114ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042114ee:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042114f2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042114f6:	0f b6 00             	movzbl (%rax),%eax
  80042114f9:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  80042114fc:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211500:	83 e0 7f             	and    $0x7f,%eax
  8004211503:	89 c2                	mov    %eax,%edx
  8004211505:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211508:	89 c1                	mov    %eax,%ecx
  800421150a:	d3 e2                	shl    %cl,%edx
  800421150c:	89 d0                	mov    %edx,%eax
  800421150e:	48 98                	cltq   
  8004211510:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  8004211514:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211518:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421151c:	84 c0                	test   %al,%al
  800421151e:	78 ca                	js     80042114ea <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004211520:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211524:	7f 1f                	jg     8004211545 <_dwarf_decode_sleb128+0x81>
  8004211526:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421152a:	83 e0 40             	and    $0x40,%eax
  800421152d:	85 c0                	test   %eax,%eax
  800421152f:	74 14                	je     8004211545 <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004211531:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211534:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211539:	89 c1                	mov    %eax,%ecx
  800421153b:	d3 e2                	shl    %cl,%edx
  800421153d:	89 d0                	mov    %edx,%eax
  800421153f:	48 98                	cltq   
  8004211541:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  8004211545:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211549:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421154d:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211550:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211554:	c9                   	leaveq 
  8004211555:	c3                   	retq   

0000008004211556 <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  8004211556:	55                   	push   %rbp
  8004211557:	48 89 e5             	mov    %rsp,%rbp
  800421155a:	48 83 ec 28          	sub    $0x28,%rsp
  800421155e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  8004211562:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211569:	00 
	uint8_t b;
	int shift = 0;
  800421156a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211571:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211575:	48 8b 00             	mov    (%rax),%rax
  8004211578:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800421157c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211580:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211584:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211588:	0f b6 00             	movzbl (%rax),%eax
  800421158b:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800421158e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211592:	83 e0 7f             	and    $0x7f,%eax
  8004211595:	89 c2                	mov    %eax,%edx
  8004211597:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421159a:	89 c1                	mov    %eax,%ecx
  800421159c:	d3 e2                	shl    %cl,%edx
  800421159e:	89 d0                	mov    %edx,%eax
  80042115a0:	48 98                	cltq   
  80042115a2:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  80042115a6:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  80042115aa:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042115ae:	84 c0                	test   %al,%al
  80042115b0:	78 ca                	js     800421157c <_dwarf_decode_uleb128+0x26>

	*dp = src;
  80042115b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115b6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042115ba:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042115bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042115c1:	c9                   	leaveq 
  80042115c2:	c3                   	retq   

00000080042115c3 <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  80042115c3:	55                   	push   %rbp
  80042115c4:	48 89 e5             	mov    %rsp,%rbp
  80042115c7:	48 83 ec 28          	sub    $0x28,%rsp
  80042115cb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042115cf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042115d3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  80042115d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115db:	48 8b 10             	mov    (%rax),%rdx
  80042115de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115e2:	48 01 d0             	add    %rdx,%rax
  80042115e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042115e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042115ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  80042115f1:	eb 17                	jmp    800421160a <_dwarf_read_string+0x47>
		src++;
  80042115f3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  80042115f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042115fc:	48 8b 00             	mov    (%rax),%rax
  80042115ff:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211603:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211607:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  800421160a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421160e:	0f b6 00             	movzbl (%rax),%eax
  8004211611:	84 c0                	test   %al,%al
  8004211613:	74 0d                	je     8004211622 <_dwarf_read_string+0x5f>
  8004211615:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211619:	48 8b 00             	mov    (%rax),%rax
  800421161c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211620:	72 d1                	jb     80042115f3 <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  8004211622:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211626:	0f b6 00             	movzbl (%rax),%eax
  8004211629:	84 c0                	test   %al,%al
  800421162b:	75 1f                	jne    800421164c <_dwarf_read_string+0x89>
  800421162d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211631:	48 8b 00             	mov    (%rax),%rax
  8004211634:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211638:	73 12                	jae    800421164c <_dwarf_read_string+0x89>
		(*offsetp)++;
  800421163a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421163e:	48 8b 00             	mov    (%rax),%rax
  8004211641:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211645:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211649:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421164c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211650:	c9                   	leaveq 
  8004211651:	c3                   	retq   

0000008004211652 <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  8004211652:	55                   	push   %rbp
  8004211653:	48 89 e5             	mov    %rsp,%rbp
  8004211656:	48 83 ec 28          	sub    $0x28,%rsp
  800421165a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421165e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211662:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  8004211666:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421166a:	48 8b 10             	mov    (%rax),%rdx
  800421166d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211671:	48 01 d0             	add    %rdx,%rax
  8004211674:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211678:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421167c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  8004211680:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211684:	48 8b 10             	mov    (%rax),%rdx
  8004211687:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421168b:	48 01 c2             	add    %rax,%rdx
  800421168e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211692:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211695:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211699:	c9                   	leaveq 
  800421169a:	c3                   	retq   

000000800421169b <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  800421169b:	55                   	push   %rbp
  800421169c:	48 89 e5             	mov    %rsp,%rbp
  800421169f:	48 83 ec 20          	sub    $0x20,%rsp
  80042116a3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  80042116a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  80042116af:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042116b4:	75 35                	jne    80042116eb <_dwarf_elf_get_byte_order+0x50>
  80042116b6:	48 b9 a0 f1 21 04 80 	movabs $0x800421f1a0,%rcx
  80042116bd:	00 00 00 
  80042116c0:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  80042116c7:	00 00 00 
  80042116ca:	be 29 01 00 00       	mov    $0x129,%esi
  80042116cf:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  80042116d6:	00 00 00 
  80042116d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042116de:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042116e5:	00 00 00 
  80042116e8:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  80042116eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042116ef:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  80042116f3:	0f b6 c0             	movzbl %al,%eax
  80042116f6:	83 f8 02             	cmp    $0x2,%eax
  80042116f9:	75 07                	jne    8004211702 <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  80042116fb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211700:	eb 05                	jmp    8004211707 <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  8004211702:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  8004211707:	c9                   	leaveq 
  8004211708:	c3                   	retq   

0000008004211709 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211709:	55                   	push   %rbp
  800421170a:	48 89 e5             	mov    %rsp,%rbp
  800421170d:	48 83 ec 20          	sub    $0x20,%rsp
  8004211711:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  8004211715:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211719:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  800421171d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211722:	75 35                	jne    8004211759 <_dwarf_elf_get_pointer_size+0x50>
  8004211724:	48 b9 a0 f1 21 04 80 	movabs $0x800421f1a0,%rcx
  800421172b:	00 00 00 
  800421172e:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004211735:	00 00 00 
  8004211738:	be 3f 01 00 00       	mov    $0x13f,%esi
  800421173d:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004211744:	00 00 00 
  8004211747:	b8 00 00 00 00       	mov    $0x0,%eax
  800421174c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211753:	00 00 00 
  8004211756:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004211759:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421175d:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004211761:	3c 01                	cmp    $0x1,%al
  8004211763:	75 07                	jne    800421176c <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  8004211765:	b8 04 00 00 00       	mov    $0x4,%eax
  800421176a:	eb 05                	jmp    8004211771 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  800421176c:	b8 08 00 00 00       	mov    $0x8,%eax
}
  8004211771:	c9                   	leaveq 
  8004211772:	c3                   	retq   

0000008004211773 <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  8004211773:	55                   	push   %rbp
  8004211774:	48 89 e5             	mov    %rsp,%rbp
  8004211777:	53                   	push   %rbx
  8004211778:	48 83 ec 18          	sub    $0x18,%rsp
  800421177c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211780:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  8004211784:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211788:	ba 60 00 00 00       	mov    $0x60,%edx
  800421178d:	be 00 00 00 00       	mov    $0x0,%esi
  8004211792:	48 89 c7             	mov    %rax,%rdi
  8004211795:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  800421179c:	00 00 00 
  800421179f:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  80042117a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117a5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  80042117ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117b0:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042117b7:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  80042117b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042117bc:	48 89 c7             	mov    %rax,%rdi
  80042117bf:	48 b8 09 17 21 04 80 	movabs $0x8004211709,%rax
  80042117c6:	00 00 00 
  80042117c9:	ff d0                	callq  *%rax
  80042117cb:	0f b6 d0             	movzbl %al,%edx
  80042117ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117d2:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  80042117d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042117d9:	48 89 c7             	mov    %rax,%rdi
  80042117dc:	48 b8 9b 16 21 04 80 	movabs $0x800421169b,%rax
  80042117e3:	00 00 00 
  80042117e6:	ff d0                	callq  *%rax
  80042117e8:	85 c0                	test   %eax,%eax
  80042117ea:	75 26                	jne    8004211812 <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  80042117ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117f0:	48 b9 40 10 21 04 80 	movabs $0x8004211040,%rcx
  80042117f7:	00 00 00 
  80042117fa:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  80042117fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211802:	48 bb f2 11 21 04 80 	movabs $0x80042111f2,%rbx
  8004211809:	00 00 00 
  800421180c:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211810:	eb 24                	jmp    8004211836 <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211812:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211816:	48 b9 f3 0d 21 04 80 	movabs $0x8004210df3,%rcx
  800421181d:	00 00 00 
  8004211820:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211824:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211828:	48 be 1f 0f 21 04 80 	movabs $0x8004210f1f,%rsi
  800421182f:	00 00 00 
  8004211832:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421183a:	48 89 c7             	mov    %rax,%rdi
  800421183d:	48 b8 40 2d 21 04 80 	movabs $0x8004212d40,%rax
  8004211844:	00 00 00 
  8004211847:	ff d0                	callq  *%rax
	return 0;
  8004211849:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421184e:	48 83 c4 18          	add    $0x18,%rsp
  8004211852:	5b                   	pop    %rbx
  8004211853:	5d                   	pop    %rbp
  8004211854:	c3                   	retq   

0000008004211855 <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004211855:	55                   	push   %rbp
  8004211856:	48 89 e5             	mov    %rsp,%rbp
  8004211859:	48 83 ec 20          	sub    $0x20,%rsp
  800421185d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211861:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004211865:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211869:	48 8b 10             	mov    (%rax),%rdx
  800421186c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211870:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004211874:	48 39 c2             	cmp    %rax,%rdx
  8004211877:	76 0a                	jbe    8004211883 <_get_next_cu+0x2e>
		return -1;
  8004211879:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421187e:	e9 6b 01 00 00       	jmpq   80042119ee <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004211883:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211887:	48 8b 00             	mov    (%rax),%rax
  800421188a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  800421188e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211892:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211896:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  800421189a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421189e:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042118a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042118a6:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042118aa:	48 89 d1             	mov    %rdx,%rcx
  80042118ad:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042118b1:	ba 04 00 00 00       	mov    $0x4,%edx
  80042118b6:	48 89 cf             	mov    %rcx,%rdi
  80042118b9:	ff d0                	callq  *%rax
  80042118bb:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  80042118be:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042118c2:	75 2a                	jne    80042118ee <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  80042118c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118c8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042118cc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042118d0:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042118d4:	48 89 d1             	mov    %rdx,%rcx
  80042118d7:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042118db:	ba 08 00 00 00       	mov    $0x8,%edx
  80042118e0:	48 89 cf             	mov    %rcx,%rdi
  80042118e3:	ff d0                	callq  *%rax
  80042118e5:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  80042118e8:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  80042118ec:	eb 04                	jmp    80042118f2 <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  80042118ee:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  80042118f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042118f6:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  80042118fa:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  80042118fd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211900:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211904:	48 01 c2             	add    %rax,%rdx
  8004211907:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421190b:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  800421190e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211912:	48 8b 10             	mov    (%rax),%rdx
  8004211915:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211919:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  800421191d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211920:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211924:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211927:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  800421192b:	75 07                	jne    8004211934 <_get_next_cu+0xdf>
  800421192d:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211932:	eb 05                	jmp    8004211939 <_get_next_cu+0xe4>
  8004211934:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211939:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421193d:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211940:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211944:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211948:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421194c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211950:	48 89 d1             	mov    %rdx,%rcx
  8004211953:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211957:	ba 02 00 00 00       	mov    $0x2,%edx
  800421195c:	48 89 cf             	mov    %rcx,%rdi
  800421195f:	ff d0                	callq  *%rax
  8004211961:	89 c2                	mov    %eax,%edx
  8004211963:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211967:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  800421196b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421196f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211973:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211977:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421197b:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  800421197f:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211983:	48 89 cf             	mov    %rcx,%rdi
  8004211986:	ff d0                	callq  *%rax
  8004211988:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421198c:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004211990:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211994:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211998:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421199c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80042119a0:	48 89 d1             	mov    %rdx,%rcx
  80042119a3:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  80042119a7:	ba 01 00 00 00       	mov    $0x1,%edx
  80042119ac:	48 89 cf             	mov    %rcx,%rdi
  80042119af:	ff d0                	callq  *%rax
  80042119b1:	89 c2                	mov    %eax,%edx
  80042119b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042119b7:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  80042119ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042119be:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042119c2:	66 83 f8 01          	cmp    $0x1,%ax
  80042119c6:	76 0e                	jbe    80042119d6 <_get_next_cu+0x181>
  80042119c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042119cc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042119d0:	66 83 f8 04          	cmp    $0x4,%ax
  80042119d4:	76 07                	jbe    80042119dd <_get_next_cu+0x188>
		return -1;
  80042119d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042119db:	eb 11                	jmp    80042119ee <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  80042119dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042119e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042119e5:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  80042119e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042119ee:	c9                   	leaveq 
  80042119ef:	c3                   	retq   

00000080042119f0 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  80042119f0:	55                   	push   %rbp
  80042119f1:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  80042119f4:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  80042119f8:	0f b6 c8             	movzbl %al,%ecx
  80042119fb:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  80042119ff:	0f b7 d0             	movzwl %ax,%edx
  8004211a02:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211a06:	48 89 c6             	mov    %rax,%rsi
  8004211a09:	48 bf d2 f1 21 04 80 	movabs $0x800421f1d2,%rdi
  8004211a10:	00 00 00 
  8004211a13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211a18:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  8004211a1f:	00 00 00 
  8004211a22:	41 ff d0             	callq  *%r8
}
  8004211a25:	5d                   	pop    %rbp
  8004211a26:	c3                   	retq   

0000008004211a27 <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211a27:	55                   	push   %rbp
  8004211a28:	48 89 e5             	mov    %rsp,%rbp
  8004211a2b:	48 83 ec 60          	sub    $0x60,%rsp
  8004211a2f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211a33:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211a37:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211a3b:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004211a3f:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211a44:	75 35                	jne    8004211a7b <_dwarf_abbrev_parse+0x54>
  8004211a46:	48 b9 e1 f1 21 04 80 	movabs $0x800421f1e1,%rcx
  8004211a4d:	00 00 00 
  8004211a50:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004211a57:	00 00 00 
  8004211a5a:	be a4 01 00 00       	mov    $0x1a4,%esi
  8004211a5f:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004211a66:	00 00 00 
  8004211a69:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211a6e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211a75:	00 00 00 
  8004211a78:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211a7b:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004211a80:	75 35                	jne    8004211ab7 <_dwarf_abbrev_parse+0x90>
  8004211a82:	48 b9 ed f1 21 04 80 	movabs $0x800421f1ed,%rcx
  8004211a89:	00 00 00 
  8004211a8c:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004211a93:	00 00 00 
  8004211a96:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211a9b:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004211aa2:	00 00 00 
  8004211aa5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211aaa:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211ab1:	00 00 00 
  8004211ab4:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211ab7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211abb:	48 8b 10             	mov    (%rax),%rdx
  8004211abe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211ac2:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211ac6:	48 39 c2             	cmp    %rax,%rdx
  8004211ac9:	72 0a                	jb     8004211ad5 <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211acb:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211ad0:	e9 d3 01 00 00       	jmpq   8004211ca8 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211ad5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211ad9:	48 8b 00             	mov    (%rax),%rax
  8004211adc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  8004211ae0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211ae4:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211ae8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211aec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211af0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211af4:	48 89 d6             	mov    %rdx,%rsi
  8004211af7:	48 89 c7             	mov    %rax,%rdi
  8004211afa:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004211b01:	00 00 00 
  8004211b04:	ff d0                	callq  *%rax
  8004211b06:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004211b0a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211b0f:	75 15                	jne    8004211b26 <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004211b11:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004211b1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211b21:	e9 82 01 00 00       	jmpq   8004211ca8 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211b26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b2a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211b2e:	48 89 d6             	mov    %rdx,%rsi
  8004211b31:	48 89 c7             	mov    %rax,%rdi
  8004211b34:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004211b3b:	00 00 00 
  8004211b3e:	ff d0                	callq  *%rax
  8004211b40:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211b44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211b48:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211b4c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004211b50:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211b54:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211b59:	48 89 cf             	mov    %rcx,%rdi
  8004211b5c:	ff d0                	callq  *%rax
  8004211b5e:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004211b61:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b65:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211b69:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004211b6c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b70:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211b74:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  8004211b78:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b7c:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  8004211b80:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004211b83:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b87:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211b8b:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  8004211b8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b93:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8004211b9a:	00 
	abp->ab_atnum    = 0;
  8004211b9b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211b9f:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  8004211ba6:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  8004211ba7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211bab:	48 8b 00             	mov    (%rax),%rax
  8004211bae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211bb6:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211bba:	48 89 d6             	mov    %rdx,%rsi
  8004211bbd:	48 89 c7             	mov    %rax,%rdi
  8004211bc0:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004211bc7:	00 00 00 
  8004211bca:	ff d0                	callq  *%rax
  8004211bcc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211bd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211bd4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211bd8:	48 89 d6             	mov    %rdx,%rsi
  8004211bdb:	48 89 c7             	mov    %rax,%rdi
  8004211bde:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004211be5:	00 00 00 
  8004211be8:	ff d0                	callq  *%rax
  8004211bea:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  8004211bee:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211bf3:	0f 84 89 00 00 00    	je     8004211c82 <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004211bf9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211bfd:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211c01:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211c05:	48 89 d0             	mov    %rdx,%rax
  8004211c08:	48 01 c0             	add    %rax,%rax
  8004211c0b:	48 01 d0             	add    %rdx,%rax
  8004211c0e:	48 c1 e0 03          	shl    $0x3,%rax
  8004211c12:	48 01 c8             	add    %rcx,%rax
  8004211c15:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004211c19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211c1d:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  8004211c20:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211c24:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211c28:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211c2c:	48 89 d0             	mov    %rdx,%rax
  8004211c2f:	48 01 c0             	add    %rax,%rax
  8004211c32:	48 01 d0             	add    %rdx,%rax
  8004211c35:	48 c1 e0 03          	shl    $0x3,%rax
  8004211c39:	48 01 c8             	add    %rcx,%rax
  8004211c3c:	48 8d 50 38          	lea    0x38(%rax),%rdx
  8004211c40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211c44:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211c47:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211c4b:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211c4f:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211c53:	48 89 d0             	mov    %rdx,%rax
  8004211c56:	48 01 c0             	add    %rax,%rax
  8004211c59:	48 01 d0             	add    %rdx,%rax
  8004211c5c:	48 c1 e0 03          	shl    $0x3,%rax
  8004211c60:	48 01 c8             	add    %rcx,%rax
  8004211c63:	48 8d 50 40          	lea    0x40(%rax),%rdx
  8004211c67:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211c6b:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  8004211c6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211c72:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004211c76:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211c7a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211c7e:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  8004211c82:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211c87:	0f 85 1a ff ff ff    	jne    8004211ba7 <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  8004211c8d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211c91:	48 8b 00             	mov    (%rax),%rax
  8004211c94:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  8004211c98:	48 89 c2             	mov    %rax,%rdx
  8004211c9b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211c9f:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004211ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211ca8:	c9                   	leaveq 
  8004211ca9:	c3                   	retq   

0000008004211caa <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004211caa:	55                   	push   %rbp
  8004211cab:	48 89 e5             	mov    %rsp,%rbp
  8004211cae:	48 83 ec 70          	sub    $0x70,%rsp
  8004211cb2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211cb6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211cba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  8004211cbe:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211cc3:	75 0a                	jne    8004211ccf <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004211cc5:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211cca:	e9 0a 01 00 00       	jmpq   8004211dd9 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  8004211ccf:	48 bf f8 f1 21 04 80 	movabs $0x800421f1f8,%rdi
  8004211cd6:	00 00 00 
  8004211cd9:	48 b8 0a 60 21 04 80 	movabs $0x800421600a,%rax
  8004211ce0:	00 00 00 
  8004211ce3:	ff d0                	callq  *%rax
  8004211ce5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004211ce9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211cee:	75 35                	jne    8004211d25 <_dwarf_abbrev_find+0x7b>
  8004211cf0:	48 b9 ed f1 21 04 80 	movabs $0x800421f1ed,%rcx
  8004211cf7:	00 00 00 
  8004211cfa:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004211d01:	00 00 00 
  8004211d04:	be e5 01 00 00       	mov    $0x1e5,%esi
  8004211d09:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004211d10:	00 00 00 
  8004211d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211d1f:	00 00 00 
  8004211d22:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211d25:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004211d29:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  8004211d2d:	e9 8d 00 00 00       	jmpq   8004211dbf <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004211d32:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211d36:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211d3a:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  8004211d3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211d42:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004211d46:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004211d4a:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  8004211d4e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004211d53:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  8004211d57:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004211d5c:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  8004211d60:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004211d65:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  8004211d69:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004211d6e:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  8004211d72:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004211d77:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004211d7b:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  8004211d80:	48 89 c7             	mov    %rax,%rdi
  8004211d83:	48 b8 27 1a 21 04 80 	movabs $0x8004211a27,%rax
  8004211d8a:	00 00 00 
  8004211d8d:	ff d0                	callq  *%rax
  8004211d8f:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  8004211d92:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004211d96:	74 05                	je     8004211d9d <_dwarf_abbrev_find+0xf3>
			return (ret);
  8004211d98:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211d9b:	eb 3c                	jmp    8004211dd9 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  8004211d9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211da1:	48 8b 00             	mov    (%rax),%rax
  8004211da4:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004211da8:	75 07                	jne    8004211db1 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004211daa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211daf:	eb 28                	jmp    8004211dd9 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004211db1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211db5:	48 8b 00             	mov    (%rax),%rax
  8004211db8:	48 85 c0             	test   %rax,%rax
  8004211dbb:	75 02                	jne    8004211dbf <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  8004211dbd:	eb 15                	jmp    8004211dd4 <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  8004211dbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211dc3:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211dc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211dcb:	48 39 c2             	cmp    %rax,%rdx
  8004211dce:	0f 87 5e ff ff ff    	ja     8004211d32 <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  8004211dd4:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004211dd9:	c9                   	leaveq 
  8004211dda:	c3                   	retq   

0000008004211ddb <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  8004211ddb:	55                   	push   %rbp
  8004211ddc:	48 89 e5             	mov    %rsp,%rbp
  8004211ddf:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  8004211de6:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004211ded:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004211df4:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004211dfb:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  8004211e02:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  8004211e09:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  8004211e10:	48 bf 06 f2 21 04 80 	movabs $0x800421f206,%rdi
  8004211e17:	00 00 00 
  8004211e1a:	48 b8 0a 60 21 04 80 	movabs $0x800421600a,%rax
  8004211e21:	00 00 00 
  8004211e24:	ff d0                	callq  *%rax
  8004211e26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004211e2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211e2e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211e32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  8004211e36:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004211e3d:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004211e41:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  8004211e44:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  8004211e4b:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004211e52:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211e57:	be 00 00 00 00       	mov    $0x0,%esi
  8004211e5c:	48 89 c7             	mov    %rax,%rdi
  8004211e5f:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004211e66:	00 00 00 
  8004211e69:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  8004211e6b:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004211e72:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  8004211e79:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004211e80:	48 8b 00             	mov    (%rax),%rax
  8004211e83:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  8004211e87:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004211e8e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211e92:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  8004211e96:	8b 45 10             	mov    0x10(%rbp),%eax
  8004211e99:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  8004211e9c:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  8004211ea3:	00 

	switch (form) {
  8004211ea4:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  8004211eab:	20 
  8004211eac:	0f 87 82 04 00 00    	ja     8004212334 <_dwarf_attr_init+0x559>
  8004211eb2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004211eb9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004211ec0:	00 
  8004211ec1:	48 b8 30 f2 21 04 80 	movabs $0x800421f230,%rax
  8004211ec8:	00 00 00 
  8004211ecb:	48 01 d0             	add    %rdx,%rax
  8004211ece:	48 8b 00             	mov    (%rax),%rax
  8004211ed1:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004211ed3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211eda:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211ede:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004211ee5:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004211ee9:	0f b6 d2             	movzbl %dl,%edx
  8004211eec:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211ef3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211ef7:	48 89 cf             	mov    %rcx,%rdi
  8004211efa:	ff d0                	callq  *%rax
  8004211efc:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004211f00:	e9 37 04 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004211f05:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004211f0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f10:	48 89 d6             	mov    %rdx,%rsi
  8004211f13:	48 89 c7             	mov    %rax,%rdi
  8004211f16:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004211f1d:	00 00 00 
  8004211f20:	ff d0                	callq  *%rax
  8004211f22:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211f26:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211f2a:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211f31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f35:	48 89 ce             	mov    %rcx,%rsi
  8004211f38:	48 89 c7             	mov    %rax,%rdi
  8004211f3b:	48 b8 52 16 21 04 80 	movabs $0x8004211652,%rax
  8004211f42:	00 00 00 
  8004211f45:	ff d0                	callq  *%rax
  8004211f47:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211f4b:	e9 ec 03 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004211f50:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211f57:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211f5b:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211f62:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211f66:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211f6b:	48 89 cf             	mov    %rcx,%rdi
  8004211f6e:	ff d0                	callq  *%rax
  8004211f70:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211f74:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211f78:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211f7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211f83:	48 89 ce             	mov    %rcx,%rsi
  8004211f86:	48 89 c7             	mov    %rax,%rdi
  8004211f89:	48 b8 52 16 21 04 80 	movabs $0x8004211652,%rax
  8004211f90:	00 00 00 
  8004211f93:	ff d0                	callq  *%rax
  8004211f95:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211f99:	e9 9e 03 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004211f9e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211fa5:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211fa9:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211fb0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211fb4:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211fb9:	48 89 cf             	mov    %rcx,%rdi
  8004211fbc:	ff d0                	callq  *%rax
  8004211fbe:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004211fc2:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004211fc6:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004211fcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211fd1:	48 89 ce             	mov    %rcx,%rsi
  8004211fd4:	48 89 c7             	mov    %rax,%rdi
  8004211fd7:	48 b8 52 16 21 04 80 	movabs $0x8004211652,%rax
  8004211fde:	00 00 00 
  8004211fe1:	ff d0                	callq  *%rax
  8004211fe3:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004211fe7:	e9 50 03 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004211fec:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004211ff3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211ff7:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004211ffe:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212002:	ba 04 00 00 00       	mov    $0x4,%edx
  8004212007:	48 89 cf             	mov    %rcx,%rdi
  800421200a:	ff d0                	callq  *%rax
  800421200c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212010:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212014:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421201b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421201f:	48 89 ce             	mov    %rcx,%rsi
  8004212022:	48 89 c7             	mov    %rax,%rdi
  8004212025:	48 b8 52 16 21 04 80 	movabs $0x8004211652,%rax
  800421202c:	00 00 00 
  800421202f:	ff d0                	callq  *%rax
  8004212031:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212035:	e9 02 03 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  800421203a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212041:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212045:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421204c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212050:	ba 01 00 00 00       	mov    $0x1,%edx
  8004212055:	48 89 cf             	mov    %rcx,%rdi
  8004212058:	ff d0                	callq  *%rax
  800421205a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421205e:	e9 d9 02 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004212063:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421206a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421206e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212075:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212079:	ba 02 00 00 00       	mov    $0x2,%edx
  800421207e:	48 89 cf             	mov    %rcx,%rdi
  8004212081:	ff d0                	callq  *%rax
  8004212083:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212087:	e9 b0 02 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  800421208c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212093:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212097:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421209e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042120a2:	ba 04 00 00 00       	mov    $0x4,%edx
  80042120a7:	48 89 cf             	mov    %rcx,%rdi
  80042120aa:	ff d0                	callq  *%rax
  80042120ac:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042120b0:	e9 87 02 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  80042120b5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042120bc:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042120c0:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042120c7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042120cb:	ba 08 00 00 00       	mov    $0x8,%edx
  80042120d0:	48 89 cf             	mov    %rcx,%rdi
  80042120d3:	ff d0                	callq  *%rax
  80042120d5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042120d9:	e9 5e 02 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  80042120de:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042120e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042120e9:	48 89 d6             	mov    %rdx,%rsi
  80042120ec:	48 89 c7             	mov    %rax,%rdi
  80042120ef:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  80042120f6:	00 00 00 
  80042120f9:	ff d0                	callq  *%rax
  80042120fb:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  8004212102:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004212109:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  8004212110:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212117:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421211e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212125:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421212c:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  8004212133:	4d 89 c1             	mov    %r8,%r9
  8004212136:	49 89 f8             	mov    %rdi,%r8
  8004212139:	48 89 c7             	mov    %rax,%rdi
  800421213c:	48 b8 db 1d 21 04 80 	movabs $0x8004211ddb,%rax
  8004212143:	00 00 00 
  8004212146:	ff d0                	callq  *%rax
  8004212148:	e9 1d 03 00 00       	jmpq   800421246a <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  800421214d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212154:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212158:	66 83 f8 02          	cmp    $0x2,%ax
  800421215c:	75 2f                	jne    800421218d <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  800421215e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212165:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212169:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212170:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004212174:	0f b6 d2             	movzbl %dl,%edx
  8004212177:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421217e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212182:	48 89 cf             	mov    %rcx,%rdi
  8004212185:	ff d0                	callq  *%rax
  8004212187:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800421218b:	eb 39                	jmp    80042121c6 <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  800421218d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212194:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212198:	66 83 f8 03          	cmp    $0x3,%ax
  800421219c:	75 28                	jne    80042121c6 <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421219e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042121a5:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042121a9:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042121ad:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042121b4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042121b8:	48 89 cf             	mov    %rcx,%rdi
  80042121bb:	ff d0                	callq  *%rax
  80042121bd:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042121c1:	e9 76 01 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
  80042121c6:	e9 71 01 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  80042121cb:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042121d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042121d6:	48 89 d6             	mov    %rdx,%rsi
  80042121d9:	48 89 c7             	mov    %rax,%rdi
  80042121dc:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  80042121e3:	00 00 00 
  80042121e6:	ff d0                	callq  *%rax
  80042121e8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042121ec:	e9 4b 01 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  80042121f1:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042121f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042121fc:	48 89 d6             	mov    %rdx,%rsi
  80042121ff:	48 89 c7             	mov    %rax,%rdi
  8004212202:	48 b8 a1 13 21 04 80 	movabs $0x80042113a1,%rax
  8004212209:	00 00 00 
  800421220c:	ff d0                	callq  *%rax
  800421220e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212212:	e9 25 01 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212217:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421221e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212222:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212226:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421222d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212231:	48 89 cf             	mov    %rcx,%rdi
  8004212234:	ff d0                	callq  *%rax
  8004212236:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421223a:	e9 fd 00 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  800421223f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212243:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004212247:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421224e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212252:	48 89 ce             	mov    %rcx,%rsi
  8004212255:	48 89 c7             	mov    %rax,%rdi
  8004212258:	48 b8 c3 15 21 04 80 	movabs $0x80042115c3,%rax
  800421225f:	00 00 00 
  8004212262:	ff d0                	callq  *%rax
  8004212264:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212268:	e9 cf 00 00 00       	jmpq   800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421226d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212274:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212278:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421227c:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212283:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212287:	48 89 cf             	mov    %rcx,%rdi
  800421228a:	ff d0                	callq  *%rax
  800421228c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  8004212290:	48 bf 12 f2 21 04 80 	movabs $0x800421f212,%rdi
  8004212297:	00 00 00 
  800421229a:	48 b8 0a 60 21 04 80 	movabs $0x800421600a,%rax
  80042122a1:	00 00 00 
  80042122a4:	ff d0                	callq  *%rax
  80042122a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  80042122aa:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042122af:	75 35                	jne    80042122e6 <_dwarf_attr_init+0x50b>
  80042122b1:	48 b9 1d f2 21 04 80 	movabs $0x800421f21d,%rcx
  80042122b8:	00 00 00 
  80042122bb:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  80042122c2:	00 00 00 
  80042122c5:	be 51 02 00 00       	mov    $0x251,%esi
  80042122ca:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  80042122d1:	00 00 00 
  80042122d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042122d9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042122e0:	00 00 00 
  80042122e3:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  80042122e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042122ea:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042122ee:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042122f2:	48 01 d0             	add    %rdx,%rax
  80042122f5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042122f9:	eb 41                	jmp    800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  80042122fb:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  8004212302:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  8004212303:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212307:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800421230e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212312:	48 89 ce             	mov    %rcx,%rsi
  8004212315:	48 89 c7             	mov    %rax,%rdi
  8004212318:	48 b8 52 16 21 04 80 	movabs $0x8004211652,%rax
  800421231f:	00 00 00 
  8004212322:	ff d0                	callq  *%rax
  8004212324:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212328:	eb 12                	jmp    800421233c <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  800421232a:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004212331:	00 
		break;
  8004212332:	eb 08                	jmp    800421233c <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  8004212334:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  800421233b:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  800421233c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212340:	0f 85 21 01 00 00    	jne    8004212467 <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  8004212346:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  800421234d:	09 
  800421234e:	74 1e                	je     800421236e <_dwarf_attr_init+0x593>
  8004212350:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  8004212357:	0a 
  8004212358:	74 14                	je     800421236e <_dwarf_attr_init+0x593>
  800421235a:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  8004212361:	03 
  8004212362:	74 0a                	je     800421236e <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  8004212364:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  800421236b:	04 
  800421236c:	75 10                	jne    800421237e <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  800421236e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004212372:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  8004212376:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421237a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  800421237e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004212382:	48 83 f8 03          	cmp    $0x3,%rax
  8004212386:	75 39                	jne    80042123c1 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  8004212388:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421238c:	48 83 f8 08          	cmp    $0x8,%rax
  8004212390:	74 1c                	je     80042123ae <_dwarf_attr_init+0x5d3>
  8004212392:	48 83 f8 0e          	cmp    $0xe,%rax
  8004212396:	74 02                	je     800421239a <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  8004212398:	eb 27                	jmp    80042123c1 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  800421239a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421239e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042123a5:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042123ac:	eb 13                	jmp    80042123c1 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  80042123ae:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042123b2:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042123b9:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042123c0:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  80042123c1:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042123c8:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  80042123cf:	8d 48 01             	lea    0x1(%rax),%ecx
  80042123d2:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  80042123d9:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  80042123df:	0f b6 c0             	movzbl %al,%eax
  80042123e2:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  80042123e9:	48 63 d0             	movslq %eax,%rdx
  80042123ec:	48 89 d0             	mov    %rdx,%rax
  80042123ef:	48 01 c0             	add    %rax,%rax
  80042123f2:	48 01 d0             	add    %rdx,%rax
  80042123f5:	48 c1 e0 05          	shl    $0x5,%rax
  80042123f9:	48 01 c8             	add    %rcx,%rax
  80042123fc:	48 05 70 03 00 00    	add    $0x370,%rax
  8004212402:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004212409:	48 89 10             	mov    %rdx,(%rax)
  800421240c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004212413:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004212417:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421241b:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421241f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004212423:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004212427:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421242b:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800421242f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212433:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004212437:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421243b:	48 89 50 30          	mov    %rdx,0x30(%rax)
  800421243f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004212443:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004212447:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421244b:	48 89 50 40          	mov    %rdx,0x40(%rax)
  800421244f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004212453:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004212457:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421245b:	48 89 50 50          	mov    %rdx,0x50(%rax)
  800421245f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212463:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  8004212467:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800421246a:	c9                   	leaveq 
  800421246b:	c3                   	retq   

000000800421246c <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  800421246c:	55                   	push   %rbp
  800421246d:	48 89 e5             	mov    %rsp,%rbp
  8004212470:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  8004212477:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  800421247e:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  8004212485:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  800421248c:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  8004212492:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004212499:	00 
  800421249a:	75 35                	jne    80042124d1 <dwarf_search_die_within_cu+0x65>
  800421249c:	48 b9 38 f3 21 04 80 	movabs $0x800421f338,%rcx
  80042124a3:	00 00 00 
  80042124a6:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  80042124ad:	00 00 00 
  80042124b0:	be 86 02 00 00       	mov    $0x286,%esi
  80042124b5:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  80042124bc:	00 00 00 
  80042124bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042124c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042124cb:	00 00 00 
  80042124ce:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  80042124d1:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  80042124d8:	00 
  80042124d9:	75 35                	jne    8004212510 <dwarf_search_die_within_cu+0xa4>
  80042124db:	48 b9 3c f3 21 04 80 	movabs $0x800421f33c,%rcx
  80042124e2:	00 00 00 
  80042124e5:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  80042124ec:	00 00 00 
  80042124ef:	be 88 02 00 00       	mov    $0x288,%esi
  80042124f4:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  80042124fb:	00 00 00 
  80042124fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212503:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421250a:	00 00 00 
  800421250d:	41 ff d0             	callq  *%r8

	level = 1;
  8004212510:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212517:	e9 17 02 00 00       	jmpq   8004212733 <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  800421251c:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212523:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  8004212527:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800421252e:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212532:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004212539:	48 89 d6             	mov    %rdx,%rsi
  800421253c:	48 89 c7             	mov    %rax,%rdi
  800421253f:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004212546:	00 00 00 
  8004212549:	ff d0                	callq  *%rax
  800421254b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  800421254f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212554:	75 22                	jne    8004212578 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  8004212556:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421255a:	74 09                	je     8004212565 <dwarf_search_die_within_cu+0xf9>
  800421255c:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212563:	75 0a                	jne    800421256f <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  8004212565:	b8 04 00 00 00       	mov    $0x4,%eax
  800421256a:	e9 f4 01 00 00       	jmpq   8004212763 <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  800421256f:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  8004212573:	e9 bb 01 00 00       	jmpq   8004212733 <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  8004212578:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  800421257f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212583:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800421258a:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  800421258e:	48 89 34 24          	mov    %rsi,(%rsp)
  8004212592:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  8004212596:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  800421259b:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  800421259f:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  80042125a4:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  80042125a8:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  80042125ad:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  80042125b1:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  80042125b6:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  80042125ba:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  80042125bf:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  80042125c3:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  80042125c8:	48 89 ce             	mov    %rcx,%rsi
  80042125cb:	48 89 c7             	mov    %rax,%rdi
  80042125ce:	48 b8 aa 1c 21 04 80 	movabs $0x8004211caa,%rax
  80042125d5:	00 00 00 
  80042125d8:	ff d0                	callq  *%rax
  80042125da:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042125dd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042125e1:	74 08                	je     80042125eb <dwarf_search_die_within_cu+0x17f>
			return (ret);
  80042125e3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042125e6:	e9 78 01 00 00       	jmpq   8004212763 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  80042125eb:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  80042125f2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042125f6:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  80042125f9:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212600:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004212604:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212608:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421260f:	48 8d 78 20          	lea    0x20(%rax),%rdi
  8004212613:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  800421261a:	b8 66 00 00 00       	mov    $0x66,%eax
  800421261f:	48 89 d6             	mov    %rdx,%rsi
  8004212622:	48 89 c1             	mov    %rax,%rcx
  8004212625:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212628:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421262f:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  8004212636:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  800421263d:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212644:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212648:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421264f:	e9 8e 00 00 00       	jmpq   80042126e2 <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  8004212654:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004212657:	48 63 d0             	movslq %eax,%rdx
  800421265a:	48 89 d0             	mov    %rdx,%rax
  800421265d:	48 01 c0             	add    %rax,%rax
  8004212660:	48 01 d0             	add    %rdx,%rax
  8004212663:	48 c1 e0 03          	shl    $0x3,%rax
  8004212667:	48 01 e8             	add    %rbp,%rax
  800421266a:	48 2d 18 03 00 00    	sub    $0x318,%rax
  8004212670:	48 8b 08             	mov    (%rax),%rcx
  8004212673:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  800421267a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421267d:	48 63 d0             	movslq %eax,%rdx
  8004212680:	48 89 d0             	mov    %rdx,%rax
  8004212683:	48 01 c0             	add    %rax,%rax
  8004212686:	48 01 d0             	add    %rdx,%rax
  8004212689:	48 c1 e0 03          	shl    $0x3,%rax
  800421268d:	48 83 c0 30          	add    $0x30,%rax
  8004212691:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  8004212695:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  800421269c:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  80042126a3:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042126aa:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  80042126b1:	49 89 c9             	mov    %rcx,%r9
  80042126b4:	49 89 f8             	mov    %rdi,%r8
  80042126b7:	48 89 d1             	mov    %rdx,%rcx
  80042126ba:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  80042126be:	48 89 c7             	mov    %rax,%rdi
  80042126c1:	48 b8 db 1d 21 04 80 	movabs $0x8004211ddb,%rax
  80042126c8:	00 00 00 
  80042126cb:	ff d0                	callq  *%rax
  80042126cd:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042126d0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042126d4:	74 08                	je     80042126de <dwarf_search_die_within_cu+0x272>
				return (ret);
  80042126d6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042126d9:	e9 85 00 00 00       	jmpq   8004212763 <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  80042126de:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  80042126e2:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042126e5:	48 63 d0             	movslq %eax,%rdx
  80042126e8:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  80042126ef:	48 39 c2             	cmp    %rax,%rdx
  80042126f2:	0f 82 5c ff ff ff    	jb     8004212654 <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  80042126f8:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  80042126ff:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212706:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  800421270a:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212711:	74 19                	je     800421272c <dwarf_search_die_within_cu+0x2c0>
  8004212713:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212717:	7e 13                	jle    800421272c <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212719:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212720:	3c 01                	cmp    $0x1,%al
  8004212722:	75 06                	jne    800421272a <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  8004212724:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212728:	eb 09                	jmp    8004212733 <dwarf_search_die_within_cu+0x2c7>
  800421272a:	eb 07                	jmp    8004212733 <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  800421272c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212731:	eb 30                	jmp    8004212763 <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  8004212733:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  8004212737:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800421273e:	48 39 c2             	cmp    %rax,%rdx
  8004212741:	76 1b                	jbe    800421275e <dwarf_search_die_within_cu+0x2f2>
  8004212743:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  800421274a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421274e:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212755:	48 39 c2             	cmp    %rax,%rdx
  8004212758:	0f 87 be fd ff ff    	ja     800421251c <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  800421275e:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004212763:	c9                   	leaveq 
  8004212764:	c3                   	retq   

0000008004212765 <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  8004212765:	55                   	push   %rbp
  8004212766:	48 89 e5             	mov    %rsp,%rbp
  8004212769:	48 83 ec 60          	sub    $0x60,%rsp
  800421276d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212771:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212775:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  8004212779:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421277e:	75 35                	jne    80042127b5 <dwarf_offdie+0x50>
  8004212780:	48 b9 38 f3 21 04 80 	movabs $0x800421f338,%rcx
  8004212787:	00 00 00 
  800421278a:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004212791:	00 00 00 
  8004212794:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004212799:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  80042127a0:	00 00 00 
  80042127a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042127a8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042127af:	00 00 00 
  80042127b2:	41 ff d0             	callq  *%r8
	assert(ret_die);
  80042127b5:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042127ba:	75 35                	jne    80042127f1 <dwarf_offdie+0x8c>
  80042127bc:	48 b9 3c f3 21 04 80 	movabs $0x800421f33c,%rcx
  80042127c3:	00 00 00 
  80042127c6:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  80042127cd:	00 00 00 
  80042127d0:	be c5 02 00 00       	mov    $0x2c5,%esi
  80042127d5:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  80042127dc:	00 00 00 
  80042127df:	b8 00 00 00 00       	mov    $0x0,%eax
  80042127e4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042127eb:	00 00 00 
  80042127ee:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  80042127f1:	48 8b 45 30          	mov    0x30(%rbp),%rax
  80042127f5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042127f9:	76 66                	jbe    8004212861 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  80042127fb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042127ff:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212803:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212807:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  800421280b:	48 89 0c 24          	mov    %rcx,(%rsp)
  800421280f:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212813:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212818:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  800421281c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212821:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212825:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  800421282a:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  800421282e:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212833:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212837:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  800421283c:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004212840:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004212845:	b9 00 00 00 00       	mov    $0x0,%ecx
  800421284a:	48 89 c7             	mov    %rax,%rdi
  800421284d:	48 b8 6c 24 21 04 80 	movabs $0x800421246c,%rax
  8004212854:	00 00 00 
  8004212857:	ff d0                	callq  *%rax
  8004212859:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  800421285c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421285f:	eb 05                	jmp    8004212866 <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004212861:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212866:	c9                   	leaveq 
  8004212867:	c3                   	retq   

0000008004212868 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004212868:	55                   	push   %rbp
  8004212869:	48 89 e5             	mov    %rsp,%rbp
  800421286c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004212870:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212874:	89 f0                	mov    %esi,%eax
  8004212876:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  800421287a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004212881:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212882:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004212889:	eb 57                	jmp    80042128e2 <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  800421288b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421288f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212892:	48 63 d0             	movslq %eax,%rdx
  8004212895:	48 89 d0             	mov    %rdx,%rax
  8004212898:	48 01 c0             	add    %rax,%rax
  800421289b:	48 01 d0             	add    %rdx,%rax
  800421289e:	48 c1 e0 05          	shl    $0x5,%rax
  80042128a2:	48 01 c8             	add    %rcx,%rax
  80042128a5:	48 05 80 03 00 00    	add    $0x380,%rax
  80042128ab:	48 8b 10             	mov    (%rax),%rdx
  80042128ae:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  80042128b2:	48 39 c2             	cmp    %rax,%rdx
  80042128b5:	75 27                	jne    80042128de <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  80042128b7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042128ba:	48 63 d0             	movslq %eax,%rdx
  80042128bd:	48 89 d0             	mov    %rdx,%rax
  80042128c0:	48 01 c0             	add    %rax,%rax
  80042128c3:	48 01 d0             	add    %rdx,%rax
  80042128c6:	48 c1 e0 05          	shl    $0x5,%rax
  80042128ca:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  80042128d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042128d5:	48 01 d0             	add    %rdx,%rax
  80042128d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  80042128dc:	eb 17                	jmp    80042128f5 <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  80042128de:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042128e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042128e6:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  80042128ed:	0f b6 c0             	movzbl %al,%eax
  80042128f0:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  80042128f3:	7f 96                	jg     800421288b <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  80042128f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042128f9:	c9                   	leaveq 
  80042128fa:	c3                   	retq   

00000080042128fb <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  80042128fb:	55                   	push   %rbp
  80042128fc:	48 89 e5             	mov    %rsp,%rbp
  80042128ff:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212903:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212907:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421290b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421290f:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212913:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212918:	75 35                	jne    800421294f <dwarf_siblingof+0x54>
  800421291a:	48 b9 38 f3 21 04 80 	movabs $0x800421f338,%rcx
  8004212921:	00 00 00 
  8004212924:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  800421292b:	00 00 00 
  800421292e:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212933:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  800421293a:	00 00 00 
  800421293d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212942:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212949:	00 00 00 
  800421294c:	41 ff d0             	callq  *%r8
	assert(ret_die);
  800421294f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212954:	75 35                	jne    800421298b <dwarf_siblingof+0x90>
  8004212956:	48 b9 3c f3 21 04 80 	movabs $0x800421f33c,%rcx
  800421295d:	00 00 00 
  8004212960:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004212967:	00 00 00 
  800421296a:	be ed 02 00 00       	mov    $0x2ed,%esi
  800421296f:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004212976:	00 00 00 
  8004212979:	b8 00 00 00 00       	mov    $0x0,%eax
  800421297e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212985:	00 00 00 
  8004212988:	41 ff d0             	callq  *%r8
	assert(cu);
  800421298b:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004212990:	75 35                	jne    80042129c7 <dwarf_siblingof+0xcc>
  8004212992:	48 b9 44 f3 21 04 80 	movabs $0x800421f344,%rcx
  8004212999:	00 00 00 
  800421299c:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  80042129a3:	00 00 00 
  80042129a6:	be ee 02 00 00       	mov    $0x2ee,%esi
  80042129ab:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  80042129b2:	00 00 00 
  80042129b5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042129ba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042129c1:	00 00 00 
  80042129c4:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  80042129c7:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042129cc:	75 65                	jne    8004212a33 <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  80042129ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042129d2:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042129d6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042129da:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042129de:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042129e2:	48 8b 38             	mov    (%rax),%rdi
  80042129e5:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042129e9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  80042129ed:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  80042129f2:	48 8b 78 10          	mov    0x10(%rax),%rdi
  80042129f6:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042129fb:	48 8b 78 18          	mov    0x18(%rax),%rdi
  80042129ff:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212a04:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212a08:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212a0d:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004212a11:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212a16:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212a1a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212a1f:	48 89 cf             	mov    %rcx,%rdi
  8004212a22:	48 b8 65 27 21 04 80 	movabs $0x8004212765,%rax
  8004212a29:	00 00 00 
  8004212a2c:	ff d0                	callq  *%rax
  8004212a2e:	e9 0a 01 00 00       	jmpq   8004212b3d <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212a33:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212a3a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212a3e:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212a42:	84 c0                	test   %al,%al
  8004212a44:	75 0e                	jne    8004212a54 <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212a46:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212a4a:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212a4e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212a52:	eb 6b                	jmp    8004212abf <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212a54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212a58:	be 01 00 00 00       	mov    $0x1,%esi
  8004212a5d:	48 89 c7             	mov    %rax,%rdi
  8004212a60:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  8004212a67:	00 00 00 
  8004212a6a:	ff d0                	callq  *%rax
  8004212a6c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004212a70:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212a75:	74 35                	je     8004212aac <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212a77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212a7b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212a7f:	48 83 f8 10          	cmp    $0x10,%rax
  8004212a83:	74 19                	je     8004212a9e <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212a85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212a89:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212a8d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212a91:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212a95:	48 01 d0             	add    %rdx,%rax
  8004212a98:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212a9c:	eb 21                	jmp    8004212abf <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  8004212a9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212aa2:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212aa6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212aaa:	eb 13                	jmp    8004212abf <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212aac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212ab0:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212ab4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212ab8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004212abf:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212ac2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212ac6:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212aca:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  8004212ace:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212ad2:	4c 8b 00             	mov    (%rax),%r8
  8004212ad5:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212ad9:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004212add:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004212ae2:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212ae6:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212aeb:	4c 8b 40 18          	mov    0x18(%rax),%r8
  8004212aef:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212af4:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212af8:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  8004212afd:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004212b01:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004212b06:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212b0a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212b0f:	48 b8 6c 24 21 04 80 	movabs $0x800421246c,%rax
  8004212b16:	00 00 00 
  8004212b19:	ff d0                	callq  *%rax
  8004212b1b:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  8004212b1e:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004212b22:	75 07                	jne    8004212b2b <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212b24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212b29:	eb 12                	jmp    8004212b3d <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004212b2b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212b2f:	74 07                	je     8004212b38 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004212b31:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212b36:	eb 05                	jmp    8004212b3d <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212b38:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212b3d:	c9                   	leaveq 
  8004212b3e:	c3                   	retq   

0000008004212b3f <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004212b3f:	55                   	push   %rbp
  8004212b40:	48 89 e5             	mov    %rsp,%rbp
  8004212b43:	48 83 ec 70          	sub    $0x70,%rsp
  8004212b47:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212b4b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212b4f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212b53:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  8004212b57:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212b5c:	75 35                	jne    8004212b93 <dwarf_child+0x54>
  8004212b5e:	48 b9 47 f3 21 04 80 	movabs $0x800421f347,%rcx
  8004212b65:	00 00 00 
  8004212b68:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004212b6f:	00 00 00 
  8004212b72:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004212b77:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004212b7e:	00 00 00 
  8004212b81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212b86:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212b8d:	00 00 00 
  8004212b90:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212b93:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212b98:	75 35                	jne    8004212bcf <dwarf_child+0x90>
  8004212b9a:	48 b9 3c f3 21 04 80 	movabs $0x800421f33c,%rcx
  8004212ba1:	00 00 00 
  8004212ba4:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004212bab:	00 00 00 
  8004212bae:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004212bb3:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004212bba:	00 00 00 
  8004212bbd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212bc2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212bc9:	00 00 00 
  8004212bcc:	41 ff d0             	callq  *%r8
	assert(dbg);
  8004212bcf:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212bd4:	75 35                	jne    8004212c0b <dwarf_child+0xcc>
  8004212bd6:	48 b9 38 f3 21 04 80 	movabs $0x800421f338,%rcx
  8004212bdd:	00 00 00 
  8004212be0:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004212be7:	00 00 00 
  8004212bea:	be 1e 03 00 00       	mov    $0x31e,%esi
  8004212bef:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004212bf6:	00 00 00 
  8004212bf9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212bfe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212c05:	00 00 00 
  8004212c08:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212c0b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004212c10:	75 35                	jne    8004212c47 <dwarf_child+0x108>
  8004212c12:	48 b9 44 f3 21 04 80 	movabs $0x800421f344,%rcx
  8004212c19:	00 00 00 
  8004212c1c:	48 ba aa f1 21 04 80 	movabs $0x800421f1aa,%rdx
  8004212c23:	00 00 00 
  8004212c26:	be 1f 03 00 00       	mov    $0x31f,%esi
  8004212c2b:	48 bf bf f1 21 04 80 	movabs $0x800421f1bf,%rdi
  8004212c32:	00 00 00 
  8004212c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212c41:	00 00 00 
  8004212c44:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212c47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212c4b:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212c4f:	84 c0                	test   %al,%al
  8004212c51:	75 0a                	jne    8004212c5d <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004212c53:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212c58:	e9 84 00 00 00       	jmpq   8004212ce1 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  8004212c5d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212c61:	48 8b 70 08          	mov    0x8(%rax),%rsi
  8004212c65:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212c69:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  8004212c6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212c71:	48 8b 08             	mov    (%rax),%rcx
  8004212c74:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212c78:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004212c7c:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212c81:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004212c85:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212c8a:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004212c8e:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212c93:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212c97:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212c9c:	48 8b 48 28          	mov    0x28(%rax),%rcx
  8004212ca0:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212ca5:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212ca9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212cae:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212cb3:	48 b8 6c 24 21 04 80 	movabs $0x800421246c,%rax
  8004212cba:	00 00 00 
  8004212cbd:	ff d0                	callq  *%rax
  8004212cbf:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004212cc2:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212cc6:	75 07                	jne    8004212ccf <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212cc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212ccd:	eb 12                	jmp    8004212ce1 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  8004212ccf:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212cd3:	74 07                	je     8004212cdc <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004212cd5:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212cda:	eb 05                	jmp    8004212ce1 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  8004212cdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212ce1:	c9                   	leaveq 
  8004212ce2:	c3                   	retq   

0000008004212ce3 <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004212ce3:	55                   	push   %rbp
  8004212ce4:	48 89 e5             	mov    %rsp,%rbp
  8004212ce7:	48 83 ec 20          	sub    $0x20,%rsp
  8004212ceb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  8004212cef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212cf3:	48 8b 00             	mov    (%rax),%rax
  8004212cf6:	48 89 c7             	mov    %rax,%rdi
  8004212cf9:	48 b8 0a 60 21 04 80 	movabs $0x800421600a,%rax
  8004212d00:	00 00 00 
  8004212d03:	ff d0                	callq  *%rax
  8004212d05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  8004212d09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d0d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d15:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004212d19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d1d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212d21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d25:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004212d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d2d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004212d31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d35:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  8004212d39:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212d3e:	c9                   	leaveq 
  8004212d3f:	c3                   	retq   

0000008004212d40 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  8004212d40:	55                   	push   %rbp
  8004212d41:	48 89 e5             	mov    %rsp,%rbp
  8004212d44:	48 83 ec 08          	sub    $0x8,%rsp
  8004212d48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004212d4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d50:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  8004212d56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d5a:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  8004212d60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d64:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  8004212d6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d6e:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004212d74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212d78:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  8004212d7e:	c9                   	leaveq 
  8004212d7f:	c3                   	retq   

0000008004212d80 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  8004212d80:	55                   	push   %rbp
  8004212d81:	48 89 e5             	mov    %rsp,%rbp
  8004212d84:	48 83 ec 40          	sub    $0x40,%rsp
  8004212d88:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212d8c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212d90:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212d94:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004212d98:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004212d9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212da0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004212da4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212da8:	ba 80 00 00 00       	mov    $0x80,%edx
  8004212dad:	be 00 00 00 00       	mov    $0x0,%esi
  8004212db2:	48 89 c7             	mov    %rax,%rdi
  8004212db5:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004212dbc:	00 00 00 
  8004212dbf:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004212dc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212dc5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212dc9:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  8004212dcd:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212dd2:	75 07                	jne    8004212ddb <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  8004212dd4:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212dd9:	eb 75                	jmp    8004212e50 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212ddb:	eb 59                	jmp    8004212e36 <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  8004212ddd:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004212de1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212de5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212de9:	be 01 00 00 00       	mov    $0x1,%esi
  8004212dee:	48 89 c7             	mov    %rax,%rdi
  8004212df1:	48 b8 95 4f 21 04 80 	movabs $0x8004214f95,%rax
  8004212df8:	00 00 00 
  8004212dfb:	ff d0                	callq  *%rax
  8004212dfd:	85 c0                	test   %eax,%eax
  8004212dff:	79 07                	jns    8004212e08 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004212e01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212e06:	eb 48                	jmp    8004212e50 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212e08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e0c:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212e10:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212e14:	77 20                	ja     8004212e36 <dwarf_get_fde_at_pc+0xb6>
  8004212e16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e1a:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  8004212e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212e22:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004212e26:	48 01 d0             	add    %rdx,%rax
  8004212e29:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212e2d:	76 07                	jbe    8004212e36 <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  8004212e2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e34:	eb 1a                	jmp    8004212e50 <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004212e36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212e3a:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004212e3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212e42:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004212e46:	48 39 c2             	cmp    %rax,%rdx
  8004212e49:	72 92                	jb     8004212ddd <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  8004212e4b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  8004212e50:	c9                   	leaveq 
  8004212e51:	c3                   	retq   

0000008004212e52 <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  8004212e52:	55                   	push   %rbp
  8004212e53:	48 89 e5             	mov    %rsp,%rbp
  8004212e56:	53                   	push   %rbx
  8004212e57:	48 83 ec 38          	sub    $0x38,%rsp
  8004212e5b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212e5f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212e63:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212e67:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  8004212e6b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212e70:	75 35                	jne    8004212ea7 <_dwarf_frame_regtable_copy+0x55>
  8004212e72:	48 b9 5a f3 21 04 80 	movabs $0x800421f35a,%rcx
  8004212e79:	00 00 00 
  8004212e7c:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  8004212e83:	00 00 00 
  8004212e86:	be 57 00 00 00       	mov    $0x57,%esi
  8004212e8b:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  8004212e92:	00 00 00 
  8004212e95:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e9a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212ea1:	00 00 00 
  8004212ea4:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  8004212ea7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212eac:	75 35                	jne    8004212ee3 <_dwarf_frame_regtable_copy+0x91>
  8004212eae:	48 b9 92 f3 21 04 80 	movabs $0x800421f392,%rcx
  8004212eb5:	00 00 00 
  8004212eb8:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  8004212ebf:	00 00 00 
  8004212ec2:	be 58 00 00 00       	mov    $0x58,%esi
  8004212ec7:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  8004212ece:	00 00 00 
  8004212ed1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212ed6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212edd:	00 00 00 
  8004212ee0:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  8004212ee3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212ee7:	48 8b 00             	mov    (%rax),%rax
  8004212eea:	48 85 c0             	test   %rax,%rax
  8004212eed:	75 39                	jne    8004212f28 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  8004212eef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212ef3:	48 bb e0 c6 4d 04 80 	movabs $0x80044dc6e0,%rbx
  8004212efa:	00 00 00 
  8004212efd:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004212f00:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f04:	48 8b 00             	mov    (%rax),%rax
  8004212f07:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212f0b:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  8004212f0f:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  8004212f13:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f17:	48 8b 00             	mov    (%rax),%rax
  8004212f1a:	48 bb 00 a8 6d 04 80 	movabs $0x80046da800,%rbx
  8004212f21:	00 00 00 
  8004212f24:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004212f28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004212f2c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f30:	48 8b 00             	mov    (%rax),%rax
  8004212f33:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212f38:	48 89 ce             	mov    %rcx,%rsi
  8004212f3b:	48 89 c7             	mov    %rax,%rdi
  8004212f3e:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  8004212f45:	00 00 00 
  8004212f48:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212f4a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004212f51:	eb 5a                	jmp    8004212fad <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  8004212f53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212f57:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f5b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004212f5e:	48 63 d0             	movslq %eax,%rdx
  8004212f61:	48 89 d0             	mov    %rdx,%rax
  8004212f64:	48 01 c0             	add    %rax,%rax
  8004212f67:	48 01 d0             	add    %rdx,%rax
  8004212f6a:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f6e:	48 01 c1             	add    %rax,%rcx
  8004212f71:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212f75:	48 8b 00             	mov    (%rax),%rax
  8004212f78:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004212f7c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004212f7f:	48 63 d0             	movslq %eax,%rdx
  8004212f82:	48 89 d0             	mov    %rdx,%rax
  8004212f85:	48 01 c0             	add    %rax,%rax
  8004212f88:	48 01 d0             	add    %rdx,%rax
  8004212f8b:	48 c1 e0 03          	shl    $0x3,%rax
  8004212f8f:	48 01 f0             	add    %rsi,%rax
  8004212f92:	ba 18 00 00 00       	mov    $0x18,%edx
  8004212f97:	48 89 ce             	mov    %rcx,%rsi
  8004212f9a:	48 89 c7             	mov    %rax,%rdi
  8004212f9d:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  8004212fa4:	00 00 00 
  8004212fa7:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  8004212fa9:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212fad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212fb1:	48 8b 00             	mov    (%rax),%rax
  8004212fb4:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212fb8:	0f b7 c0             	movzwl %ax,%eax
  8004212fbb:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004212fbe:	7e 10                	jle    8004212fd0 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  8004212fc0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212fc4:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004212fc8:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004212fcb:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004212fce:	7f 83                	jg     8004212f53 <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004212fd0:	eb 32                	jmp    8004213004 <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  8004212fd2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212fd6:	48 8b 00             	mov    (%rax),%rax
  8004212fd9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212fdd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004212fe0:	48 63 d0             	movslq %eax,%rdx
  8004212fe3:	48 89 d0             	mov    %rdx,%rax
  8004212fe6:	48 01 c0             	add    %rax,%rax
  8004212fe9:	48 01 d0             	add    %rdx,%rax
  8004212fec:	48 c1 e0 03          	shl    $0x3,%rax
  8004212ff0:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  8004212ff4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212ff8:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004212ffc:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213000:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004213004:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213008:	48 8b 00             	mov    (%rax),%rax
  800421300b:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421300f:	0f b7 c0             	movzwl %ax,%eax
  8004213012:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213015:	7f bb                	jg     8004212fd2 <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  8004213017:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421301c:	48 83 c4 38          	add    $0x38,%rsp
  8004213020:	5b                   	pop    %rbx
  8004213021:	5d                   	pop    %rbp
  8004213022:	c3                   	retq   

0000008004213023 <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  8004213023:	55                   	push   %rbp
  8004213024:	48 89 e5             	mov    %rsp,%rbp
  8004213027:	53                   	push   %rbx
  8004213028:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  800421302f:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  8004213033:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  8004213037:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  800421303b:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  800421303f:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  8004213046:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  800421304d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  8004213054:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  800421305b:	00 
  800421305c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004213060:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  8004213064:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213068:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421306c:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  800421306f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004213073:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213077:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  800421307b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421307f:	48 89 c7             	mov    %rax,%rdi
  8004213082:	48 b8 52 2e 21 04 80 	movabs $0x8004212e52,%rax
  8004213089:	00 00 00 
  800421308c:	ff d0                	callq  *%rax
	p = insts;
  800421308e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004213092:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  8004213096:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421309a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421309e:	48 01 d0             	add    %rdx,%rax
  80042130a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  80042130a5:	e9 3a 0d 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  80042130aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042130ae:	0f b6 00             	movzbl (%rax),%eax
  80042130b1:	84 c0                	test   %al,%al
  80042130b3:	75 11                	jne    80042130c6 <_dwarf_frame_run_inst+0xa3>
			p++;
  80042130b5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042130b9:	48 83 c0 01          	add    $0x1,%rax
  80042130bd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  80042130c1:	e9 1e 0d 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  80042130c6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042130ca:	0f b6 00             	movzbl (%rax),%eax
  80042130cd:	83 e0 c0             	and    $0xffffffc0,%eax
  80042130d0:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  80042130d3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042130d7:	0f b6 00             	movzbl (%rax),%eax
  80042130da:	83 e0 3f             	and    $0x3f,%eax
  80042130dd:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  80042130e0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042130e4:	48 83 c0 01          	add    $0x1,%rax
  80042130e8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  80042130ec:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  80042130f0:	0f 84 a1 01 00 00    	je     8004213297 <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  80042130f6:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042130fa:	3d 80 00 00 00       	cmp    $0x80,%eax
  80042130ff:	74 38                	je     8004213139 <_dwarf_frame_run_inst+0x116>
  8004213101:	3d c0 00 00 00       	cmp    $0xc0,%eax
  8004213106:	0f 84 01 01 00 00    	je     800421320d <_dwarf_frame_run_inst+0x1ea>
  800421310c:	83 f8 40             	cmp    $0x40,%eax
  800421310f:	0f 85 71 01 00 00    	jne    8004213286 <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  8004213115:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213119:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213120:	ff 
  8004213121:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  8004213125:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213129:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421312d:	73 05                	jae    8004213134 <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  800421312f:	e9 be 0c 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			        break;
  8004213134:	e9 59 01 00 00       	jmpq   8004213292 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004213139:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421313d:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213141:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213144:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213148:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421314c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213150:	66 39 c2             	cmp    %ax,%dx
  8004213153:	72 0c                	jb     8004213161 <_dwarf_frame_run_inst+0x13e>
  8004213155:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421315c:	e9 91 0c 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  8004213161:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213165:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213169:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421316d:	48 89 d0             	mov    %rdx,%rax
  8004213170:	48 01 c0             	add    %rax,%rax
  8004213173:	48 01 d0             	add    %rdx,%rax
  8004213176:	48 c1 e0 03          	shl    $0x3,%rax
  800421317a:	48 01 c8             	add    %rcx,%rax
  800421317d:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  8004213180:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213184:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213188:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421318c:	48 89 d0             	mov    %rdx,%rax
  800421318f:	48 01 c0             	add    %rax,%rax
  8004213192:	48 01 d0             	add    %rdx,%rax
  8004213195:	48 c1 e0 03          	shl    $0x3,%rax
  8004213199:	48 01 c8             	add    %rcx,%rax
  800421319c:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  80042131a0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131a4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131a8:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042131ac:	48 89 d0             	mov    %rdx,%rax
  80042131af:	48 01 c0             	add    %rax,%rax
  80042131b2:	48 01 d0             	add    %rdx,%rax
  80042131b5:	48 c1 e0 03          	shl    $0x3,%rax
  80042131b9:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042131bd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042131c1:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042131c5:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  80042131c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042131cd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131d1:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042131d5:	48 89 d0             	mov    %rdx,%rax
  80042131d8:	48 01 c0             	add    %rax,%rax
  80042131db:	48 01 d0             	add    %rdx,%rax
  80042131de:	48 c1 e0 03          	shl    $0x3,%rax
  80042131e2:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  80042131e6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042131ea:	48 89 c7             	mov    %rax,%rdi
  80042131ed:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042131f4:	00 00 00 
  80042131f7:	ff d0                	callq  *%rax
  80042131f9:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213200:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  8004213204:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  8004213208:	e9 85 00 00 00       	jmpq   8004213292 <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  800421320d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213211:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213215:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213218:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421321c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213220:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213224:	66 39 c2             	cmp    %ax,%dx
  8004213227:	72 0c                	jb     8004213235 <_dwarf_frame_run_inst+0x212>
  8004213229:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213230:	e9 bd 0b 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  8004213235:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213239:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421323d:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213241:	48 89 d0             	mov    %rdx,%rax
  8004213244:	48 01 c0             	add    %rax,%rax
  8004213247:	48 01 d0             	add    %rdx,%rax
  800421324a:	48 c1 e0 03          	shl    $0x3,%rax
  800421324e:	48 01 c1             	add    %rax,%rcx
  8004213251:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213255:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213259:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421325d:	48 89 d0             	mov    %rdx,%rax
  8004213260:	48 01 c0             	add    %rax,%rax
  8004213263:	48 01 d0             	add    %rdx,%rax
  8004213266:	48 c1 e0 03          	shl    $0x3,%rax
  800421326a:	48 01 f0             	add    %rsi,%rax
  800421326d:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213272:	48 89 ce             	mov    %rcx,%rsi
  8004213275:	48 89 c7             	mov    %rax,%rdi
  8004213278:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  800421327f:	00 00 00 
  8004213282:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  8004213284:	eb 0c                	jmp    8004213292 <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004213286:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  800421328d:	e9 60 0b 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  8004213292:	e9 4d 0b 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  8004213297:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421329b:	83 f8 16             	cmp    $0x16,%eax
  800421329e:	0f 87 37 0b 00 00    	ja     8004213ddb <_dwarf_frame_run_inst+0xdb8>
  80042132a4:	89 c0                	mov    %eax,%eax
  80042132a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042132ad:	00 
  80042132ae:	48 b8 a0 f3 21 04 80 	movabs $0x800421f3a0,%rax
  80042132b5:	00 00 00 
  80042132b8:	48 01 d0             	add    %rdx,%rax
  80042132bb:	48 8b 00             	mov    (%rax),%rax
  80042132be:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  80042132c0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042132c4:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042132c8:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042132cc:	8b 4a 28             	mov    0x28(%rdx),%ecx
  80042132cf:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042132d3:	89 ce                	mov    %ecx,%esi
  80042132d5:	48 89 d7             	mov    %rdx,%rdi
  80042132d8:	ff d0                	callq  *%rax
  80042132da:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042132de:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042132e2:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042132e6:	73 05                	jae    80042132ed <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  80042132e8:	e9 05 0b 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			break;
  80042132ed:	e9 f2 0a 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  80042132f2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042132f6:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042132fa:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042132fe:	be 01 00 00 00       	mov    $0x1,%esi
  8004213303:	48 89 d7             	mov    %rdx,%rdi
  8004213306:	ff d0                	callq  *%rax
  8004213308:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421330f:	ff 
  8004213310:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213314:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213318:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421331c:	73 05                	jae    8004213323 <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  800421331e:	e9 cf 0a 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213323:	e9 bc 0a 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004213328:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421332c:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213330:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213334:	be 02 00 00 00       	mov    $0x2,%esi
  8004213339:	48 89 d7             	mov    %rdx,%rdi
  800421333c:	ff d0                	callq  *%rax
  800421333e:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213345:	ff 
  8004213346:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421334a:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421334e:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213352:	73 05                	jae    8004213359 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  8004213354:	e9 99 0a 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213359:	e9 86 0a 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  800421335e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213362:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213366:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421336a:	be 04 00 00 00       	mov    $0x4,%esi
  800421336f:	48 89 d7             	mov    %rdx,%rdi
  8004213372:	ff d0                	callq  *%rax
  8004213374:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421337b:	ff 
  800421337c:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213380:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213384:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213388:	73 05                	jae    800421338f <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  800421338a:	e9 63 0a 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			break;
  800421338f:	e9 50 0a 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  8004213394:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213398:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421339c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421339f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042133a3:	48 89 c7             	mov    %rax,%rdi
  80042133a6:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042133ad:	00 00 00 
  80042133b0:	ff d0                	callq  *%rax
  80042133b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  80042133b6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042133ba:	48 89 c7             	mov    %rax,%rdi
  80042133bd:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042133c4:	00 00 00 
  80042133c7:	ff d0                	callq  *%rax
  80042133c9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042133cd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133d1:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042133d5:	0f b7 c0             	movzwl %ax,%eax
  80042133d8:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042133dc:	77 0c                	ja     80042133ea <_dwarf_frame_run_inst+0x3c7>
  80042133de:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042133e5:	e9 08 0a 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042133ea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133ee:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042133f6:	48 89 d0             	mov    %rdx,%rax
  80042133f9:	48 01 c0             	add    %rax,%rax
  80042133fc:	48 01 d0             	add    %rdx,%rax
  80042133ff:	48 c1 e0 03          	shl    $0x3,%rax
  8004213403:	48 01 c8             	add    %rcx,%rax
  8004213406:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213409:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421340d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213411:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213415:	48 89 d0             	mov    %rdx,%rax
  8004213418:	48 01 c0             	add    %rax,%rax
  800421341b:	48 01 d0             	add    %rdx,%rax
  800421341e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213422:	48 01 c8             	add    %rcx,%rax
  8004213425:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213429:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421342d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213431:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213435:	48 89 d0             	mov    %rdx,%rax
  8004213438:	48 01 c0             	add    %rax,%rax
  800421343b:	48 01 d0             	add    %rdx,%rax
  800421343e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213442:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213446:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421344a:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421344e:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213452:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213456:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421345a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421345e:	48 89 d0             	mov    %rdx,%rax
  8004213461:	48 01 c0             	add    %rax,%rax
  8004213464:	48 01 d0             	add    %rdx,%rax
  8004213467:	48 c1 e0 03          	shl    $0x3,%rax
  800421346b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421346f:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213476:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  800421347b:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  800421347f:	e9 60 09 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  8004213484:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213488:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421348c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421348f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213493:	48 89 c7             	mov    %rax,%rdi
  8004213496:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  800421349d:	00 00 00 
  80042134a0:	ff d0                	callq  *%rax
  80042134a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042134a6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134aa:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042134ae:	0f b7 c0             	movzwl %ax,%eax
  80042134b1:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042134b5:	77 0c                	ja     80042134c3 <_dwarf_frame_run_inst+0x4a0>
  80042134b7:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042134be:	e9 2f 09 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  80042134c3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042134c7:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042134cb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134cf:	48 89 d0             	mov    %rdx,%rax
  80042134d2:	48 01 c0             	add    %rax,%rax
  80042134d5:	48 01 d0             	add    %rdx,%rax
  80042134d8:	48 c1 e0 03          	shl    $0x3,%rax
  80042134dc:	48 01 c1             	add    %rax,%rcx
  80042134df:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134e3:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042134e7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042134eb:	48 89 d0             	mov    %rdx,%rax
  80042134ee:	48 01 c0             	add    %rax,%rax
  80042134f1:	48 01 d0             	add    %rdx,%rax
  80042134f4:	48 c1 e0 03          	shl    $0x3,%rax
  80042134f8:	48 01 f0             	add    %rsi,%rax
  80042134fb:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213500:	48 89 ce             	mov    %rcx,%rsi
  8004213503:	48 89 c7             	mov    %rax,%rdi
  8004213506:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  800421350d:	00 00 00 
  8004213510:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  8004213512:	e9 cd 08 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  8004213517:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421351b:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421351f:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213522:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213526:	48 89 c7             	mov    %rax,%rdi
  8004213529:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213530:	00 00 00 
  8004213533:	ff d0                	callq  *%rax
  8004213535:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213539:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421353d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213541:	0f b7 c0             	movzwl %ax,%eax
  8004213544:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213548:	77 0c                	ja     8004213556 <_dwarf_frame_run_inst+0x533>
  800421354a:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213551:	e9 9c 08 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213556:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421355a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421355e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213562:	48 89 d0             	mov    %rdx,%rax
  8004213565:	48 01 c0             	add    %rax,%rax
  8004213568:	48 01 d0             	add    %rdx,%rax
  800421356b:	48 c1 e0 03          	shl    $0x3,%rax
  800421356f:	48 01 c8             	add    %rcx,%rax
  8004213572:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  8004213575:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213579:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421357d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213581:	48 89 d0             	mov    %rdx,%rax
  8004213584:	48 01 c0             	add    %rax,%rax
  8004213587:	48 01 d0             	add    %rdx,%rax
  800421358a:	48 c1 e0 03          	shl    $0x3,%rax
  800421358e:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213592:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213596:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  800421359a:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800421359e:	e9 41 08 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  80042135a3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042135a7:	48 89 c7             	mov    %rax,%rdi
  80042135aa:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042135b1:	00 00 00 
  80042135b4:	ff d0                	callq  *%rax
  80042135b6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042135ba:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135be:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042135c2:	0f b7 c0             	movzwl %ax,%eax
  80042135c5:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042135c9:	77 0c                	ja     80042135d7 <_dwarf_frame_run_inst+0x5b4>
  80042135cb:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042135d2:	e9 1b 08 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042135d7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135db:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135df:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042135e3:	48 89 d0             	mov    %rdx,%rax
  80042135e6:	48 01 c0             	add    %rax,%rax
  80042135e9:	48 01 d0             	add    %rdx,%rax
  80042135ec:	48 c1 e0 03          	shl    $0x3,%rax
  80042135f0:	48 01 c8             	add    %rcx,%rax
  80042135f3:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  80042135f6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042135fa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042135fe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213602:	48 89 d0             	mov    %rdx,%rax
  8004213605:	48 01 c0             	add    %rax,%rax
  8004213608:	48 01 d0             	add    %rdx,%rax
  800421360b:	48 c1 e0 03          	shl    $0x3,%rax
  800421360f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213613:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213617:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  800421361b:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  800421361f:	e9 c0 07 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  8004213624:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213628:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421362c:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421362f:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213633:	48 89 c7             	mov    %rax,%rdi
  8004213636:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  800421363d:	00 00 00 
  8004213640:	ff d0                	callq  *%rax
  8004213642:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  8004213646:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421364a:	48 89 c7             	mov    %rax,%rdi
  800421364d:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213654:	00 00 00 
  8004213657:	ff d0                	callq  *%rax
  8004213659:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421365d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213661:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213665:	0f b7 c0             	movzwl %ax,%eax
  8004213668:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421366c:	77 0c                	ja     800421367a <_dwarf_frame_run_inst+0x657>
  800421366e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213675:	e9 78 07 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800421367a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421367e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213682:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213686:	48 89 d0             	mov    %rdx,%rax
  8004213689:	48 01 c0             	add    %rax,%rax
  800421368c:	48 01 d0             	add    %rdx,%rax
  800421368f:	48 c1 e0 03          	shl    $0x3,%rax
  8004213693:	48 01 c8             	add    %rcx,%rax
  8004213696:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004213699:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421369d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136a1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042136a5:	48 89 d0             	mov    %rdx,%rax
  80042136a8:	48 01 c0             	add    %rax,%rax
  80042136ab:	48 01 d0             	add    %rdx,%rax
  80042136ae:	48 c1 e0 03          	shl    $0x3,%rax
  80042136b2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042136b6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042136ba:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  80042136be:	e9 21 07 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  80042136c3:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042136c7:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042136cb:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  80042136cf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042136d3:	48 89 c7             	mov    %rax,%rdi
  80042136d6:	48 b8 52 2e 21 04 80 	movabs $0x8004212e52,%rax
  80042136dd:	00 00 00 
  80042136e0:	ff d0                	callq  *%rax
			break;
  80042136e2:	e9 fd 06 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  80042136e7:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042136eb:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042136ef:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  80042136f2:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042136f6:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042136fa:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  80042136fe:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213702:	48 89 c7             	mov    %rax,%rdi
  8004213705:	48 b8 52 2e 21 04 80 	movabs $0x8004212e52,%rax
  800421370c:	00 00 00 
  800421370f:	ff d0                	callq  *%rax
			break;
  8004213711:	e9 ce 06 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  8004213716:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421371a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421371e:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213721:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213725:	48 89 c7             	mov    %rax,%rdi
  8004213728:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  800421372f:	00 00 00 
  8004213732:	ff d0                	callq  *%rax
  8004213734:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213738:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421373c:	48 89 c7             	mov    %rax,%rdi
  800421373f:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213746:	00 00 00 
  8004213749:	ff d0                	callq  *%rax
  800421374b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  800421374f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213753:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213756:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421375a:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  800421375e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213762:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213766:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  800421376a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421376e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213772:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213776:	e9 69 06 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  800421377b:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421377f:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213783:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213786:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421378a:	48 89 c7             	mov    %rax,%rdi
  800421378d:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213794:	00 00 00 
  8004213797:	ff d0                	callq  *%rax
  8004213799:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  800421379d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137a1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042137a5:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  80042137a9:	e9 36 06 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  80042137ae:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042137b2:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042137b6:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  80042137b9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042137bd:	48 89 c7             	mov    %rax,%rdi
  80042137c0:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042137c7:	00 00 00 
  80042137ca:	ff d0                	callq  *%rax
  80042137cc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  80042137d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137d4:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042137d7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137db:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  80042137df:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137e3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042137e7:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042137eb:	e9 f4 05 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  80042137f0:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042137f4:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042137f8:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  80042137fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137ff:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213802:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213806:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  800421380a:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  800421380e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213812:	48 89 c7             	mov    %rax,%rdi
  8004213815:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  800421381c:	00 00 00 
  800421381f:	ff d0                	callq  *%rax
  8004213821:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213825:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213829:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421382d:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213831:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213835:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213839:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421383d:	48 01 d0             	add    %rdx,%rax
  8004213840:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213844:	e9 9b 05 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004213849:	48 8b 45 20          	mov    0x20(%rbp),%rax
  800421384d:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213851:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213854:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213858:	48 89 c7             	mov    %rax,%rdi
  800421385b:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213862:	00 00 00 
  8004213865:	ff d0                	callq  *%rax
  8004213867:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421386b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421386f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213873:	0f b7 c0             	movzwl %ax,%eax
  8004213876:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421387a:	77 0c                	ja     8004213888 <_dwarf_frame_run_inst+0x865>
  800421387c:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213883:	e9 6a 05 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213888:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421388c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213890:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213894:	48 89 d0             	mov    %rdx,%rax
  8004213897:	48 01 c0             	add    %rax,%rax
  800421389a:	48 01 d0             	add    %rdx,%rax
  800421389d:	48 c1 e0 03          	shl    $0x3,%rax
  80042138a1:	48 01 c8             	add    %rcx,%rax
  80042138a4:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  80042138a7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138ab:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138af:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138b3:	48 89 d0             	mov    %rdx,%rax
  80042138b6:	48 01 c0             	add    %rax,%rax
  80042138b9:	48 01 d0             	add    %rdx,%rax
  80042138bc:	48 c1 e0 03          	shl    $0x3,%rax
  80042138c0:	48 01 c8             	add    %rcx,%rax
  80042138c3:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  80042138c7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138cb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138cf:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138d3:	48 89 d0             	mov    %rdx,%rax
  80042138d6:	48 01 c0             	add    %rax,%rax
  80042138d9:	48 01 d0             	add    %rdx,%rax
  80042138dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042138e0:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  80042138e4:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042138e8:	48 89 c7             	mov    %rax,%rdi
  80042138eb:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042138f2:	00 00 00 
  80042138f5:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  80042138f7:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  80042138fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138ff:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213903:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213907:	48 89 d0             	mov    %rdx,%rax
  800421390a:	48 01 c0             	add    %rax,%rax
  800421390d:	48 01 d0             	add    %rdx,%rax
  8004213910:	48 c1 e0 03          	shl    $0x3,%rax
  8004213914:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213918:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421391c:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213920:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213924:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213928:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421392c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213930:	48 89 d0             	mov    %rdx,%rax
  8004213933:	48 01 c0             	add    %rax,%rax
  8004213936:	48 01 d0             	add    %rdx,%rax
  8004213939:	48 c1 e0 03          	shl    $0x3,%rax
  800421393d:	48 01 f0             	add    %rsi,%rax
  8004213940:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213944:	48 01 c8             	add    %rcx,%rax
  8004213947:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  800421394b:	e9 94 04 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004213950:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213954:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213958:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421395b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421395f:	48 89 c7             	mov    %rax,%rdi
  8004213962:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213969:	00 00 00 
  800421396c:	ff d0                	callq  *%rax
  800421396e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213972:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213976:	48 89 c7             	mov    %rax,%rdi
  8004213979:	48 b8 c4 14 21 04 80 	movabs $0x80042114c4,%rax
  8004213980:	00 00 00 
  8004213983:	ff d0                	callq  *%rax
  8004213985:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213989:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421398d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213991:	0f b7 c0             	movzwl %ax,%eax
  8004213994:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213998:	77 0c                	ja     80042139a6 <_dwarf_frame_run_inst+0x983>
  800421399a:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042139a1:	e9 4c 04 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  80042139a6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139aa:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139b2:	48 89 d0             	mov    %rdx,%rax
  80042139b5:	48 01 c0             	add    %rax,%rax
  80042139b8:	48 01 d0             	add    %rdx,%rax
  80042139bb:	48 c1 e0 03          	shl    $0x3,%rax
  80042139bf:	48 01 c8             	add    %rcx,%rax
  80042139c2:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  80042139c5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139c9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139cd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139d1:	48 89 d0             	mov    %rdx,%rax
  80042139d4:	48 01 c0             	add    %rax,%rax
  80042139d7:	48 01 d0             	add    %rdx,%rax
  80042139da:	48 c1 e0 03          	shl    $0x3,%rax
  80042139de:	48 01 c8             	add    %rcx,%rax
  80042139e1:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042139e5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139e9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042139ed:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139f1:	48 89 d0             	mov    %rdx,%rax
  80042139f4:	48 01 c0             	add    %rax,%rax
  80042139f7:	48 01 d0             	add    %rdx,%rax
  80042139fa:	48 c1 e0 03          	shl    $0x3,%rax
  80042139fe:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213a02:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213a06:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213a0a:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213a0e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a12:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213a16:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a1a:	48 89 d0             	mov    %rdx,%rax
  8004213a1d:	48 01 c0             	add    %rax,%rax
  8004213a20:	48 01 d0             	add    %rdx,%rax
  8004213a23:	48 c1 e0 03          	shl    $0x3,%rax
  8004213a27:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213a2b:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213a32:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213a37:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213a3b:	e9 a4 03 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004213a40:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213a44:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213a48:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213a4b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a4f:	48 89 c7             	mov    %rax,%rdi
  8004213a52:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213a59:	00 00 00 
  8004213a5c:	ff d0                	callq  *%rax
  8004213a5e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213a62:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a66:	48 89 c7             	mov    %rax,%rdi
  8004213a69:	48 b8 c4 14 21 04 80 	movabs $0x80042114c4,%rax
  8004213a70:	00 00 00 
  8004213a73:	ff d0                	callq  *%rax
  8004213a75:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213a79:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a7d:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213a80:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a84:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213a88:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a8c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a90:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213a94:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a98:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213a9f:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213aa4:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213aa8:	e9 37 03 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004213aad:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ab1:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213ab5:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213ab8:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213abc:	48 89 c7             	mov    %rax,%rdi
  8004213abf:	48 b8 c4 14 21 04 80 	movabs $0x80042114c4,%rax
  8004213ac6:	00 00 00 
  8004213ac9:	ff d0                	callq  *%rax
  8004213acb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213acf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ad3:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213ad6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ada:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213ade:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ae2:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213ae9:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213aee:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213af2:	e9 ed 02 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213af7:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213afb:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213aff:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213b02:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b06:	48 89 c7             	mov    %rax,%rdi
  8004213b09:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213b10:	00 00 00 
  8004213b13:	ff d0                	callq  *%rax
  8004213b15:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213b19:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b1d:	48 89 c7             	mov    %rax,%rdi
  8004213b20:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213b27:	00 00 00 
  8004213b2a:	ff d0                	callq  *%rax
  8004213b2c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213b30:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b34:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213b38:	0f b7 c0             	movzwl %ax,%eax
  8004213b3b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213b3f:	77 0c                	ja     8004213b4d <_dwarf_frame_run_inst+0xb2a>
  8004213b41:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213b48:	e9 a5 02 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213b4d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b51:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b55:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b59:	48 89 d0             	mov    %rdx,%rax
  8004213b5c:	48 01 c0             	add    %rax,%rax
  8004213b5f:	48 01 d0             	add    %rdx,%rax
  8004213b62:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b66:	48 01 c8             	add    %rcx,%rax
  8004213b69:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213b6c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b70:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b74:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b78:	48 89 d0             	mov    %rdx,%rax
  8004213b7b:	48 01 c0             	add    %rax,%rax
  8004213b7e:	48 01 d0             	add    %rdx,%rax
  8004213b81:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b85:	48 01 c8             	add    %rcx,%rax
  8004213b88:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213b8c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b90:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b94:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b98:	48 89 d0             	mov    %rdx,%rax
  8004213b9b:	48 01 c0             	add    %rax,%rax
  8004213b9e:	48 01 d0             	add    %rdx,%rax
  8004213ba1:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ba5:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213ba9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213bad:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213bb1:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213bb5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bb9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213bbd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bc1:	48 89 d0             	mov    %rdx,%rax
  8004213bc4:	48 01 c0             	add    %rax,%rax
  8004213bc7:	48 01 d0             	add    %rdx,%rax
  8004213bca:	48 c1 e0 03          	shl    $0x3,%rax
  8004213bce:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213bd2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213bd9:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213bde:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213be2:	e9 fd 01 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004213be7:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213beb:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213bef:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213bf2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213bf6:	48 89 c7             	mov    %rax,%rdi
  8004213bf9:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213c00:	00 00 00 
  8004213c03:	ff d0                	callq  *%rax
  8004213c05:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213c09:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c0d:	48 89 c7             	mov    %rax,%rdi
  8004213c10:	48 b8 c4 14 21 04 80 	movabs $0x80042114c4,%rax
  8004213c17:	00 00 00 
  8004213c1a:	ff d0                	callq  *%rax
  8004213c1c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213c20:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c24:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213c28:	0f b7 c0             	movzwl %ax,%eax
  8004213c2b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213c2f:	77 0c                	ja     8004213c3d <_dwarf_frame_run_inst+0xc1a>
  8004213c31:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213c38:	e9 b5 01 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213c3d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c41:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c45:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c49:	48 89 d0             	mov    %rdx,%rax
  8004213c4c:	48 01 c0             	add    %rax,%rax
  8004213c4f:	48 01 d0             	add    %rdx,%rax
  8004213c52:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c56:	48 01 c8             	add    %rcx,%rax
  8004213c59:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213c5c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c60:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c64:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c68:	48 89 d0             	mov    %rdx,%rax
  8004213c6b:	48 01 c0             	add    %rax,%rax
  8004213c6e:	48 01 d0             	add    %rdx,%rax
  8004213c71:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c75:	48 01 c8             	add    %rcx,%rax
  8004213c78:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213c7c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c80:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c84:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c88:	48 89 d0             	mov    %rdx,%rax
  8004213c8b:	48 01 c0             	add    %rax,%rax
  8004213c8e:	48 01 d0             	add    %rdx,%rax
  8004213c91:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c95:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213c99:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c9d:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213ca1:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213ca5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ca9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213cad:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213cb1:	48 89 d0             	mov    %rdx,%rax
  8004213cb4:	48 01 c0             	add    %rax,%rax
  8004213cb7:	48 01 d0             	add    %rdx,%rax
  8004213cba:	48 c1 e0 03          	shl    $0x3,%rax
  8004213cbe:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213cc2:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213cc9:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213cce:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213cd2:	e9 0d 01 00 00       	jmpq   8004213de4 <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004213cd7:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213cdb:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213cdf:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213ce2:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ce6:	48 89 c7             	mov    %rax,%rdi
  8004213ce9:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213cf0:	00 00 00 
  8004213cf3:	ff d0                	callq  *%rax
  8004213cf5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213cf9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cfd:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213d01:	0f b7 c0             	movzwl %ax,%eax
  8004213d04:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213d08:	77 0c                	ja     8004213d16 <_dwarf_frame_run_inst+0xcf3>
  8004213d0a:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213d11:	e9 dc 00 00 00       	jmpq   8004213df2 <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213d16:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d1a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d1e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d22:	48 89 d0             	mov    %rdx,%rax
  8004213d25:	48 01 c0             	add    %rax,%rax
  8004213d28:	48 01 d0             	add    %rdx,%rax
  8004213d2b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d2f:	48 01 c8             	add    %rcx,%rax
  8004213d32:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004213d35:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d39:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d3d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d41:	48 89 d0             	mov    %rdx,%rax
  8004213d44:	48 01 c0             	add    %rax,%rax
  8004213d47:	48 01 d0             	add    %rdx,%rax
  8004213d4a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d4e:	48 01 c8             	add    %rcx,%rax
  8004213d51:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213d55:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d59:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d5d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d61:	48 89 d0             	mov    %rdx,%rax
  8004213d64:	48 01 c0             	add    %rax,%rax
  8004213d67:	48 01 d0             	add    %rdx,%rax
  8004213d6a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d6e:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213d72:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d76:	48 89 c7             	mov    %rax,%rdi
  8004213d79:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004213d80:	00 00 00 
  8004213d83:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213d85:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213d89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d8d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d91:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d95:	48 89 d0             	mov    %rdx,%rax
  8004213d98:	48 01 c0             	add    %rax,%rax
  8004213d9b:	48 01 d0             	add    %rdx,%rax
  8004213d9e:	48 c1 e0 03          	shl    $0x3,%rax
  8004213da2:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213da6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213daa:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213dae:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213db2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213db6:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213dba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dbe:	48 89 d0             	mov    %rdx,%rax
  8004213dc1:	48 01 c0             	add    %rax,%rax
  8004213dc4:	48 01 d0             	add    %rdx,%rax
  8004213dc7:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dcb:	48 01 f0             	add    %rsi,%rax
  8004213dce:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213dd2:	48 01 c8             	add    %rcx,%rax
  8004213dd5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213dd9:	eb 09                	jmp    8004213de4 <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004213ddb:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  8004213de2:	eb 0e                	jmp    8004213df2 <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  8004213de4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213de8:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213dec:	0f 82 b8 f2 ff ff    	jb     80042130aa <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  8004213df2:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  8004213df5:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004213dfc:	5b                   	pop    %rbx
  8004213dfd:	5d                   	pop    %rbp
  8004213dfe:	c3                   	retq   

0000008004213dff <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004213dff:	55                   	push   %rbp
  8004213e00:	48 89 e5             	mov    %rsp,%rbp
  8004213e03:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004213e07:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004213e0b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004213e0f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004213e13:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004213e17:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  8004213e1b:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  8004213e1f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004213e24:	75 35                	jne    8004213e5b <_dwarf_frame_get_internal_table+0x5c>
  8004213e26:	48 b9 58 f4 21 04 80 	movabs $0x800421f458,%rcx
  8004213e2d:	00 00 00 
  8004213e30:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  8004213e37:	00 00 00 
  8004213e3a:	be 83 01 00 00       	mov    $0x183,%esi
  8004213e3f:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  8004213e46:	00 00 00 
  8004213e49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213e4e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213e55:	00 00 00 
  8004213e58:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  8004213e5b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004213e60:	75 35                	jne    8004213e97 <_dwarf_frame_get_internal_table+0x98>
  8004213e62:	48 b9 67 f4 21 04 80 	movabs $0x800421f467,%rcx
  8004213e69:	00 00 00 
  8004213e6c:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  8004213e73:	00 00 00 
  8004213e76:	be 86 01 00 00       	mov    $0x186,%esi
  8004213e7b:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  8004213e82:	00 00 00 
  8004213e85:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213e8a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213e91:	00 00 00 
  8004213e94:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  8004213e97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213e9b:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004213e9f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  8004213ea3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213ea7:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213eac:	be 00 00 00 00       	mov    $0x0,%esi
  8004213eb1:	48 89 c7             	mov    %rax,%rdi
  8004213eb4:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004213ebb:	00 00 00 
  8004213ebe:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  8004213ec0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213ec4:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213ec8:	0f b7 d0             	movzwl %ax,%edx
  8004213ecb:	48 89 d0             	mov    %rdx,%rax
  8004213ece:	48 01 c0             	add    %rax,%rax
  8004213ed1:	48 01 d0             	add    %rdx,%rax
  8004213ed4:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ed8:	48 89 c2             	mov    %rax,%rdx
  8004213edb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213edf:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213ee3:	be 00 00 00 00       	mov    $0x0,%esi
  8004213ee8:	48 89 c7             	mov    %rax,%rdi
  8004213eeb:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004213ef2:	00 00 00 
  8004213ef5:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213ef7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004213efe:	eb 2f                	jmp    8004213f2f <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004213f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213f04:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f08:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004213f0b:	48 63 d0             	movslq %eax,%rdx
  8004213f0e:	48 89 d0             	mov    %rdx,%rax
  8004213f11:	48 01 c0             	add    %rax,%rax
  8004213f14:	48 01 d0             	add    %rdx,%rax
  8004213f17:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f1b:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f1f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213f23:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  8004213f27:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004213f2b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004213f2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004213f33:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213f37:	0f b7 c0             	movzwl %ax,%eax
  8004213f3a:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004213f3d:	7f c1                	jg     8004213f00 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  8004213f3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213f43:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213f47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  8004213f4b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004213f50:	75 35                	jne    8004213f87 <_dwarf_frame_get_internal_table+0x188>
  8004213f52:	48 b9 73 f4 21 04 80 	movabs $0x800421f473,%rcx
  8004213f59:	00 00 00 
  8004213f5c:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  8004213f63:	00 00 00 
  8004213f66:	be 95 01 00 00       	mov    $0x195,%esi
  8004213f6b:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  8004213f72:	00 00 00 
  8004213f75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213f7a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213f81:	00 00 00 
  8004213f84:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  8004213f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f8b:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004213f8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f93:	4c 8b 40 38          	mov    0x38(%rax),%r8
  8004213f97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213f9b:	48 8b 48 70          	mov    0x70(%rax),%rcx
  8004213f9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213fa3:	48 8b 50 68          	mov    0x68(%rax),%rdx
  8004213fa7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004213fab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004213faf:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  8004213fb3:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004213fb8:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  8004213fbc:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004213fc1:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004213fc8:	ff ff 
  8004213fca:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  8004213fd1:	00 
  8004213fd2:	48 89 c7             	mov    %rax,%rdi
  8004213fd5:	48 b8 23 30 21 04 80 	movabs $0x8004213023,%rax
  8004213fdc:	00 00 00 
  8004213fdf:	ff d0                	callq  *%rax
  8004213fe1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  8004213fe4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004213fe8:	74 08                	je     8004213ff2 <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  8004213fea:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004213fed:	e9 98 00 00 00       	jmpq   800421408a <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  8004213ff2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213ff6:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213ffa:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004213ffe:	77 6f                	ja     800421406f <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  8004214000:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214004:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004214008:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421400c:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214010:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214014:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004214018:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421401c:	48 8b 48 58          	mov    0x58(%rax),%rcx
  8004214020:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214024:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004214028:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800421402c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214030:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  8004214034:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004214039:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  800421403d:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004214042:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  8004214046:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  800421404b:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421404f:	4d 89 d0             	mov    %r10,%r8
  8004214052:	48 89 c7             	mov    %rax,%rdi
  8004214055:	48 b8 23 30 21 04 80 	movabs $0x8004213023,%rax
  800421405c:	00 00 00 
  800421405f:	ff d0                	callq  *%rax
  8004214061:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  8004214064:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004214068:	74 05                	je     800421406f <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  800421406a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421406d:	eb 1b                	jmp    800421408a <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  800421406f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214073:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214077:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  800421407a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421407e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004214082:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004214085:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421408a:	c9                   	leaveq 
  800421408b:	c3                   	retq   

000000800421408c <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  800421408c:	55                   	push   %rbp
  800421408d:	48 89 e5             	mov    %rsp,%rbp
  8004214090:	48 83 ec 50          	sub    $0x50,%rsp
  8004214094:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004214098:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421409c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042140a0:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  80042140a4:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  80042140a8:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  80042140ac:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042140b1:	74 07                	je     80042140ba <dwarf_get_fde_info_for_all_regs+0x2e>
  80042140b3:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042140b8:	75 0a                	jne    80042140c4 <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042140ba:	b8 01 00 00 00       	mov    $0x1,%eax
  80042140bf:	e9 eb 02 00 00       	jmpq   80042143af <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  80042140c4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042140c9:	75 35                	jne    8004214100 <dwarf_get_fde_info_for_all_regs+0x74>
  80042140cb:	48 b9 67 f4 21 04 80 	movabs $0x800421f467,%rcx
  80042140d2:	00 00 00 
  80042140d5:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  80042140dc:	00 00 00 
  80042140df:	be bf 01 00 00       	mov    $0x1bf,%esi
  80042140e4:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  80042140eb:	00 00 00 
  80042140ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042140f3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042140fa:	00 00 00 
  80042140fd:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004214100:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214104:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214108:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800421410c:	77 19                	ja     8004214127 <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  800421410e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214112:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004214116:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421411a:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421411e:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  8004214121:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004214125:	77 0a                	ja     8004214131 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  8004214127:	b8 01 00 00 00       	mov    $0x1,%eax
  800421412c:	e9 7e 02 00 00       	jmpq   80042143af <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004214131:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  8004214135:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004214139:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800421413d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214141:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214145:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214149:	4d 89 c1             	mov    %r8,%r9
  800421414c:	49 89 f8             	mov    %rdi,%r8
  800421414f:	48 89 c7             	mov    %rax,%rdi
  8004214152:	48 b8 ff 3d 21 04 80 	movabs $0x8004213dff,%rax
  8004214159:	00 00 00 
  800421415c:	ff d0                	callq  *%rax
  800421415e:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  8004214161:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004214165:	74 0a                	je     8004214171 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  8004214167:	b8 01 00 00 00       	mov    $0x1,%eax
  800421416c:	e9 3e 02 00 00       	jmpq   80042143af <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  8004214171:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214175:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004214179:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  800421417d:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  8004214182:	0f 87 b1 00 00 00    	ja     8004214239 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  8004214188:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  800421418c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214190:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  8004214193:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214197:	48 63 c9             	movslq %ecx,%rcx
  800421419a:	48 83 c1 01          	add    $0x1,%rcx
  800421419e:	48 c1 e1 04          	shl    $0x4,%rcx
  80042141a2:	48 01 ca             	add    %rcx,%rdx
  80042141a5:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  80042141a7:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042141ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141af:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042141b3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042141b7:	48 63 c9             	movslq %ecx,%rcx
  80042141ba:	48 83 c1 01          	add    $0x1,%rcx
  80042141be:	48 c1 e1 04          	shl    $0x4,%rcx
  80042141c2:	48 01 ca             	add    %rcx,%rdx
  80042141c5:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  80042141c8:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042141cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141d0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042141d4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042141d8:	48 63 c9             	movslq %ecx,%rcx
  80042141db:	48 83 c1 01          	add    $0x1,%rcx
  80042141df:	48 c1 e1 04          	shl    $0x4,%rcx
  80042141e3:	48 01 ca             	add    %rcx,%rdx
  80042141e6:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  80042141ea:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042141ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141f2:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042141f6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042141fa:	48 63 c9             	movslq %ecx,%rcx
  80042141fd:	48 83 c1 01          	add    $0x1,%rcx
  8004214201:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214205:	48 01 ca             	add    %rcx,%rdx
  8004214208:	48 83 c2 08          	add    $0x8,%rdx
  800421420c:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  800421420f:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004214213:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004214217:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421421b:	48 63 d2             	movslq %edx,%rdx
  800421421e:	48 83 c2 01          	add    $0x1,%rdx
  8004214222:	48 c1 e2 04          	shl    $0x4,%rdx
  8004214226:	48 01 d0             	add    %rdx,%rax
  8004214229:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421422d:	48 8b 00             	mov    (%rax),%rax
  8004214230:	48 89 01             	mov    %rax,(%rcx)
  8004214233:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  8004214237:	eb 3c                	jmp    8004214275 <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004214239:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421423d:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  8004214240:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214244:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  8004214246:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421424a:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  800421424e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214252:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  8004214255:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214259:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  800421425d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214261:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  8004214265:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214269:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421426d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214271:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  8004214275:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421427c:	e9 fd 00 00 00       	jmpq   800421437e <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  8004214281:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  8004214285:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214288:	75 05                	jne    800421428f <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  800421428a:	e9 eb 00 00 00       	jmpq   800421437a <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  800421428f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214293:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214297:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421429a:	48 63 d0             	movslq %eax,%rdx
  800421429d:	48 89 d0             	mov    %rdx,%rax
  80042142a0:	48 01 c0             	add    %rax,%rax
  80042142a3:	48 01 d0             	add    %rdx,%rax
  80042142a6:	48 c1 e0 03          	shl    $0x3,%rax
  80042142aa:	48 01 c8             	add    %rcx,%rax
  80042142ad:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  80042142b0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042142b4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042142b7:	48 63 c9             	movslq %ecx,%rcx
  80042142ba:	48 83 c1 01          	add    $0x1,%rcx
  80042142be:	48 c1 e1 04          	shl    $0x4,%rcx
  80042142c2:	48 01 ca             	add    %rcx,%rdx
  80042142c5:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  80042142c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042142cb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042142cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042142d2:	48 63 d0             	movslq %eax,%rdx
  80042142d5:	48 89 d0             	mov    %rdx,%rax
  80042142d8:	48 01 c0             	add    %rax,%rax
  80042142db:	48 01 d0             	add    %rdx,%rax
  80042142de:	48 c1 e0 03          	shl    $0x3,%rax
  80042142e2:	48 01 c8             	add    %rcx,%rax
  80042142e5:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  80042142e9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042142ed:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042142f0:	48 63 c9             	movslq %ecx,%rcx
  80042142f3:	48 83 c1 01          	add    $0x1,%rcx
  80042142f7:	48 c1 e1 04          	shl    $0x4,%rcx
  80042142fb:	48 01 ca             	add    %rcx,%rdx
  80042142fe:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214301:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214305:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214309:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421430c:	48 63 d0             	movslq %eax,%rdx
  800421430f:	48 89 d0             	mov    %rdx,%rax
  8004214312:	48 01 c0             	add    %rax,%rax
  8004214315:	48 01 d0             	add    %rdx,%rax
  8004214318:	48 c1 e0 03          	shl    $0x3,%rax
  800421431c:	48 01 c8             	add    %rcx,%rax
  800421431f:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  8004214323:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214327:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421432a:	48 63 c9             	movslq %ecx,%rcx
  800421432d:	48 83 c1 01          	add    $0x1,%rcx
  8004214331:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214335:	48 01 ca             	add    %rcx,%rdx
  8004214338:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  800421433c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214340:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214344:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214347:	48 63 d0             	movslq %eax,%rdx
  800421434a:	48 89 d0             	mov    %rdx,%rax
  800421434d:	48 01 c0             	add    %rax,%rax
  8004214350:	48 01 d0             	add    %rdx,%rax
  8004214353:	48 c1 e0 03          	shl    $0x3,%rax
  8004214357:	48 01 c8             	add    %rcx,%rax
  800421435a:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  800421435e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214362:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214365:	48 63 c9             	movslq %ecx,%rcx
  8004214368:	48 83 c1 01          	add    $0x1,%rcx
  800421436c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214370:	48 01 ca             	add    %rcx,%rdx
  8004214373:	48 83 c2 08          	add    $0x8,%rdx
  8004214377:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  800421437a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  800421437e:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  8004214382:	7f 14                	jg     8004214398 <dwarf_get_fde_info_for_all_regs+0x30c>
  8004214384:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214388:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  800421438c:	0f b7 c0             	movzwl %ax,%eax
  800421438f:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214392:	0f 8f e9 fe ff ff    	jg     8004214281 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  8004214398:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800421439d:	74 0b                	je     80042143aa <dwarf_get_fde_info_for_all_regs+0x31e>
  800421439f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042143a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042143a7:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  80042143aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042143af:	c9                   	leaveq 
  80042143b0:	c3                   	retq   

00000080042143b1 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042143b1:	55                   	push   %rbp
  80042143b2:	48 89 e5             	mov    %rsp,%rbp
  80042143b5:	48 83 ec 40          	sub    $0x40,%rsp
  80042143b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042143bd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042143c1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042143c5:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  80042143c9:	44 89 c0             	mov    %r8d,%eax
  80042143cc:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  80042143d0:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  80042143d3:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  80042143d7:	75 0a                	jne    80042143e3 <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  80042143d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042143de:	e9 e6 01 00 00       	jmpq   80042145c9 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  80042143e3:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042143e7:	83 e0 f0             	and    $0xfffffff0,%eax
  80042143ea:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  80042143ed:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  80042143f1:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042143f5:	83 f8 0c             	cmp    $0xc,%eax
  80042143f8:	0f 87 72 01 00 00    	ja     8004214570 <_dwarf_frame_read_lsb_encoded+0x1bf>
  80042143fe:	89 c0                	mov    %eax,%eax
  8004214400:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004214407:	00 
  8004214408:	48 b8 80 f4 21 04 80 	movabs $0x800421f480,%rax
  800421440f:	00 00 00 
  8004214412:	48 01 d0             	add    %rdx,%rax
  8004214415:	48 8b 00             	mov    (%rax),%rax
  8004214418:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  800421441a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421441e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214422:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214426:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214429:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421442d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214431:	48 89 cf             	mov    %rcx,%rdi
  8004214434:	ff d0                	callq  *%rax
  8004214436:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421443a:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421443d:	e9 35 01 00 00       	jmpq   8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  8004214442:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214446:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421444a:	48 89 d6             	mov    %rdx,%rsi
  800421444d:	48 89 c7             	mov    %rax,%rdi
  8004214450:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004214457:	00 00 00 
  800421445a:	ff d0                	callq  *%rax
  800421445c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214460:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214463:	e9 0f 01 00 00       	jmpq   8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  8004214468:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421446c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214470:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214474:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214478:	ba 02 00 00 00       	mov    $0x2,%edx
  800421447d:	48 89 cf             	mov    %rcx,%rdi
  8004214480:	ff d0                	callq  *%rax
  8004214482:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214486:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214489:	e9 e9 00 00 00       	jmpq   8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  800421448e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214492:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214496:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421449a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421449e:	ba 04 00 00 00       	mov    $0x4,%edx
  80042144a3:	48 89 cf             	mov    %rcx,%rdi
  80042144a6:	ff d0                	callq  *%rax
  80042144a8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042144ac:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042144af:	e9 c3 00 00 00       	jmpq   8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  80042144b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144b8:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042144bc:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042144c0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042144c4:	ba 08 00 00 00       	mov    $0x8,%edx
  80042144c9:	48 89 cf             	mov    %rcx,%rdi
  80042144cc:	ff d0                	callq  *%rax
  80042144ce:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042144d2:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042144d5:	e9 9d 00 00 00       	jmpq   8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  80042144da:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042144de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042144e2:	48 89 d6             	mov    %rdx,%rsi
  80042144e5:	48 89 c7             	mov    %rax,%rdi
  80042144e8:	48 b8 a1 13 21 04 80 	movabs $0x80042113a1,%rax
  80042144ef:	00 00 00 
  80042144f2:	ff d0                	callq  *%rax
  80042144f4:	48 89 c2             	mov    %rax,%rdx
  80042144f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042144fb:	48 89 10             	mov    %rdx,(%rax)
		break;
  80042144fe:	eb 77                	jmp    8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214500:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214504:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214508:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421450c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214510:	ba 02 00 00 00       	mov    $0x2,%edx
  8004214515:	48 89 cf             	mov    %rcx,%rdi
  8004214518:	ff d0                	callq  *%rax
  800421451a:	48 0f bf d0          	movswq %ax,%rdx
  800421451e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214522:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214525:	eb 50                	jmp    8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  8004214527:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421452b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421452f:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214533:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214537:	ba 04 00 00 00       	mov    $0x4,%edx
  800421453c:	48 89 cf             	mov    %rcx,%rdi
  800421453f:	ff d0                	callq  *%rax
  8004214541:	48 63 d0             	movslq %eax,%rdx
  8004214544:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214548:	48 89 10             	mov    %rdx,(%rax)
		break;
  800421454b:	eb 2a                	jmp    8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  800421454d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214551:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214555:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214559:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421455d:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214562:	48 89 cf             	mov    %rcx,%rdi
  8004214565:	ff d0                	callq  *%rax
  8004214567:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421456b:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421456e:	eb 07                	jmp    8004214577 <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  8004214570:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214575:	eb 52                	jmp    80042145c9 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  8004214577:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  800421457b:	75 47                	jne    80042145c4 <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  800421457d:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004214581:	83 f8 01             	cmp    $0x1,%eax
  8004214584:	7c 3d                	jl     80042145c3 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214586:	83 f8 04             	cmp    $0x4,%eax
  8004214589:	7e 0a                	jle    8004214595 <_dwarf_frame_read_lsb_encoded+0x1e4>
  800421458b:	83 e8 09             	sub    $0x9,%eax
  800421458e:	83 f8 03             	cmp    $0x3,%eax
  8004214591:	77 30                	ja     80042145c3 <_dwarf_frame_read_lsb_encoded+0x212>
  8004214593:	eb 17                	jmp    80042145ac <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  8004214595:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214599:	48 8b 10             	mov    (%rax),%rdx
  800421459c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042145a0:	48 01 c2             	add    %rax,%rdx
  80042145a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042145a7:	48 89 10             	mov    %rdx,(%rax)
			break;
  80042145aa:	eb 18                	jmp    80042145c4 <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  80042145ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042145b0:	48 8b 10             	mov    (%rax),%rdx
  80042145b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042145b7:	48 01 c2             	add    %rax,%rdx
  80042145ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042145be:	48 89 10             	mov    %rdx,(%rax)
			break;
  80042145c1:	eb 01                	jmp    80042145c4 <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  80042145c3:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  80042145c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042145c9:	c9                   	leaveq 
  80042145ca:	c3                   	retq   

00000080042145cb <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  80042145cb:	55                   	push   %rbp
  80042145cc:	48 89 e5             	mov    %rsp,%rbp
  80042145cf:	48 83 ec 50          	sub    $0x50,%rsp
  80042145d3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042145d7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  80042145db:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  80042145df:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042145e3:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042145e7:	48 85 c0             	test   %rax,%rax
  80042145ea:	74 0f                	je     80042145fb <_dwarf_frame_parse_lsb_cie_augment+0x30>
  80042145ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042145f0:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042145f4:	0f b6 00             	movzbl (%rax),%eax
  80042145f7:	3c 7a                	cmp    $0x7a,%al
  80042145f9:	74 35                	je     8004214630 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  80042145fb:	48 b9 e8 f4 21 04 80 	movabs $0x800421f4e8,%rcx
  8004214602:	00 00 00 
  8004214605:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  800421460c:	00 00 00 
  800421460f:	be 4a 02 00 00       	mov    $0x24a,%esi
  8004214614:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  800421461b:	00 00 00 
  800421461e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214623:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421462a:	00 00 00 
  800421462d:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214630:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214634:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214638:	48 83 c0 01          	add    $0x1,%rax
  800421463c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004214640:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214644:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214648:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  800421464c:	e9 af 00 00 00       	jmpq   8004214700 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004214651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214655:	0f b6 00             	movzbl (%rax),%eax
  8004214658:	0f b6 c0             	movzbl %al,%eax
  800421465b:	83 f8 50             	cmp    $0x50,%eax
  800421465e:	74 18                	je     8004214678 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004214660:	83 f8 52             	cmp    $0x52,%eax
  8004214663:	74 77                	je     80042146dc <_dwarf_frame_parse_lsb_cie_augment+0x111>
  8004214665:	83 f8 4c             	cmp    $0x4c,%eax
  8004214668:	0f 85 86 00 00 00    	jne    80042146f4 <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  800421466e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  8004214673:	e9 83 00 00 00       	jmpq   80042146fb <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  8004214678:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421467c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004214680:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214684:	0f b6 00             	movzbl (%rax),%eax
  8004214687:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  800421468a:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004214691:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214692:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  8004214697:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800421469b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421469f:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  80042146a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042146a7:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042146ab:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042146af:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  80042146b5:	48 89 c7             	mov    %rax,%rdi
  80042146b8:	48 b8 b1 43 21 04 80 	movabs $0x80042143b1,%rax
  80042146bf:	00 00 00 
  80042146c2:	ff d0                	callq  *%rax
  80042146c4:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  80042146c7:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  80042146cb:	74 05                	je     80042146d2 <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  80042146cd:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042146d0:	eb 42                	jmp    8004214714 <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  80042146d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042146d6:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  80042146da:	eb 1f                	jmp    80042146fb <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  80042146dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042146e0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042146e4:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  80042146e8:	0f b6 10             	movzbl (%rax),%edx
  80042146eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042146ef:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  80042146f2:	eb 07                	jmp    80042146fb <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  80042146f4:	b8 14 00 00 00       	mov    $0x14,%eax
  80042146f9:	eb 19                	jmp    8004214714 <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  80042146fb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004214700:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214704:	0f b6 00             	movzbl (%rax),%eax
  8004214707:	84 c0                	test   %al,%al
  8004214709:	0f 85 42 ff ff ff    	jne    8004214651 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  800421470f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214714:	c9                   	leaveq 
  8004214715:	c3                   	retq   

0000008004214716 <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  8004214716:	55                   	push   %rbp
  8004214717:	48 89 e5             	mov    %rsp,%rbp
  800421471a:	48 83 ec 60          	sub    $0x60,%rsp
  800421471e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214722:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214726:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421472a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421472e:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  8004214732:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004214737:	75 35                	jne    800421476e <_dwarf_frame_set_cie+0x58>
  8004214739:	48 b9 1d f5 21 04 80 	movabs $0x800421f51d,%rcx
  8004214740:	00 00 00 
  8004214743:	48 ba 67 f3 21 04 80 	movabs $0x800421f367,%rdx
  800421474a:	00 00 00 
  800421474d:	be 7b 02 00 00       	mov    $0x27b,%esi
  8004214752:	48 bf 7c f3 21 04 80 	movabs $0x800421f37c,%rdi
  8004214759:	00 00 00 
  800421475c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214761:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214768:	00 00 00 
  800421476b:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  800421476e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214772:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  8004214776:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421477a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421477e:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  8004214781:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214785:	48 8b 10             	mov    (%rax),%rdx
  8004214788:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421478c:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214790:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214794:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214798:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421479c:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042147a0:	48 89 d1             	mov    %rdx,%rcx
  80042147a3:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042147a7:	ba 04 00 00 00       	mov    $0x4,%edx
  80042147ac:	48 89 cf             	mov    %rcx,%rdi
  80042147af:	ff d0                	callq  *%rax
  80042147b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  80042147b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042147ba:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042147be:	75 2e                	jne    80042147ee <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  80042147c0:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  80042147c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147cb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042147cf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042147d3:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042147d7:	48 89 d1             	mov    %rdx,%rcx
  80042147da:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042147de:	ba 08 00 00 00       	mov    $0x8,%edx
  80042147e3:	48 89 cf             	mov    %rcx,%rdi
  80042147e6:	ff d0                	callq  *%rax
  80042147e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042147ec:	eb 07                	jmp    80042147f5 <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  80042147ee:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  80042147f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042147f9:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042147fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214801:	48 8b 00             	mov    (%rax),%rax
  8004214804:	48 29 c2             	sub    %rax,%rdx
  8004214807:	48 89 d0             	mov    %rdx,%rax
  800421480a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421480e:	73 0a                	jae    800421481a <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214810:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214815:	e9 5d 03 00 00       	jmpq   8004214b77 <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  800421481a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421481e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214822:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214826:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421482a:	48 89 d1             	mov    %rdx,%rcx
  800421482d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214830:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214834:	48 89 cf             	mov    %rcx,%rdi
  8004214837:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004214839:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421483d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214841:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214845:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214849:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421484d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214851:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214855:	48 89 d1             	mov    %rdx,%rcx
  8004214858:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  800421485c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214861:	48 89 cf             	mov    %rcx,%rdi
  8004214864:	ff d0                	callq  *%rax
  8004214866:	89 c2                	mov    %eax,%edx
  8004214868:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421486c:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214874:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214878:	66 83 f8 01          	cmp    $0x1,%ax
  800421487c:	74 26                	je     80042148a4 <_dwarf_frame_set_cie+0x18e>
  800421487e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214882:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214886:	66 83 f8 03          	cmp    $0x3,%ax
  800421488a:	74 18                	je     80042148a4 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  800421488c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214890:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214894:	66 83 f8 04          	cmp    $0x4,%ax
  8004214898:	74 0a                	je     80042148a4 <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  800421489a:	b8 16 00 00 00       	mov    $0x16,%eax
  800421489f:	e9 d3 02 00 00       	jmpq   8004214b77 <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042148a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042148a8:	48 8b 10             	mov    (%rax),%rdx
  80042148ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148af:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042148b3:	48 01 d0             	add    %rdx,%rax
  80042148b6:	48 89 c2             	mov    %rax,%rdx
  80042148b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148bd:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  80042148c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148c5:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042148c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  80042148cd:	90                   	nop
  80042148ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042148d2:	48 8b 00             	mov    (%rax),%rax
  80042148d5:	48 8d 48 01          	lea    0x1(%rax),%rcx
  80042148d9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042148dd:	48 89 0a             	mov    %rcx,(%rdx)
  80042148e0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042148e4:	48 01 d0             	add    %rdx,%rax
  80042148e7:	0f b6 00             	movzbl (%rax),%eax
  80042148ea:	84 c0                	test   %al,%al
  80042148ec:	75 e0                	jne    80042148ce <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  80042148ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042148f2:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042148f6:	0f b6 00             	movzbl (%rax),%eax
  80042148f9:	84 c0                	test   %al,%al
  80042148fb:	74 48                	je     8004214945 <_dwarf_frame_set_cie+0x22f>
  80042148fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214901:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214905:	0f b6 00             	movzbl (%rax),%eax
  8004214908:	3c 7a                	cmp    $0x7a,%al
  800421490a:	74 39                	je     8004214945 <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  800421490c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214910:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214914:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214918:	75 07                	jne    8004214921 <_dwarf_frame_set_cie+0x20b>
  800421491a:	b8 04 00 00 00       	mov    $0x4,%eax
  800421491f:	eb 05                	jmp    8004214926 <_dwarf_frame_set_cie+0x210>
  8004214921:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214926:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214929:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421492d:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214931:	48 01 c2             	add    %rax,%rdx
  8004214934:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214938:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  800421493b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214940:	e9 32 02 00 00       	jmpq   8004214b77 <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214945:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214949:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421494d:	48 be 25 f5 21 04 80 	movabs $0x800421f525,%rsi
  8004214954:	00 00 00 
  8004214957:	48 89 c7             	mov    %rax,%rdi
  800421495a:	48 b8 58 0d 21 04 80 	movabs $0x8004210d58,%rax
  8004214961:	00 00 00 
  8004214964:	ff d0                	callq  *%rax
  8004214966:	48 85 c0             	test   %rax,%rax
  8004214969:	74 28                	je     8004214993 <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  800421496b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421496f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214973:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214977:	8b 52 28             	mov    0x28(%rdx),%edx
  800421497a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421497e:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214982:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214986:	48 89 cf             	mov    %rcx,%rdi
  8004214989:	ff d0                	callq  *%rax
  800421498b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421498f:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214993:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214997:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421499b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421499f:	48 89 d6             	mov    %rdx,%rsi
  80042149a2:	48 89 c7             	mov    %rax,%rdi
  80042149a5:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  80042149ac:	00 00 00 
  80042149af:	ff d0                	callq  *%rax
  80042149b1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042149b5:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042149b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042149bd:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042149c1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042149c5:	48 89 d6             	mov    %rdx,%rsi
  80042149c8:	48 89 c7             	mov    %rax,%rdi
  80042149cb:	48 b8 a1 13 21 04 80 	movabs $0x80042113a1,%rax
  80042149d2:	00 00 00 
  80042149d5:	ff d0                	callq  *%rax
  80042149d7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042149db:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  80042149df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149e3:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  80042149e7:	66 83 f8 01          	cmp    $0x1,%ax
  80042149eb:	75 2b                	jne    8004214a18 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  80042149ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042149f1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042149f5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042149f9:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042149fd:	48 89 d1             	mov    %rdx,%rcx
  8004214a00:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214a04:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214a09:	48 89 cf             	mov    %rcx,%rdi
  8004214a0c:	ff d0                	callq  *%rax
  8004214a0e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a12:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214a16:	eb 26                	jmp    8004214a3e <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214a18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a1c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214a20:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214a24:	48 89 d6             	mov    %rdx,%rsi
  8004214a27:	48 89 c7             	mov    %rax,%rdi
  8004214a2a:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004214a31:	00 00 00 
  8004214a34:	ff d0                	callq  *%rax
  8004214a36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a3a:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  8004214a3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a42:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214a46:	0f b6 00             	movzbl (%rax),%eax
  8004214a49:	3c 7a                	cmp    $0x7a,%al
  8004214a4b:	0f 85 93 00 00 00    	jne    8004214ae4 <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214a51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a55:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214a59:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214a5d:	48 89 d6             	mov    %rdx,%rsi
  8004214a60:	48 89 c7             	mov    %rax,%rdi
  8004214a63:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004214a6a:	00 00 00 
  8004214a6d:	ff d0                	callq  *%rax
  8004214a6f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214a73:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214a77:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214a7b:	48 8b 10             	mov    (%rax),%rdx
  8004214a7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a82:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214a86:	48 01 d0             	add    %rdx,%rax
  8004214a89:	48 89 c2             	mov    %rax,%rdx
  8004214a8c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a90:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214a94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214a98:	48 8b 10             	mov    (%rax),%rdx
  8004214a9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a9f:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214aa3:	48 01 c2             	add    %rax,%rdx
  8004214aa6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214aaa:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004214aad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ab1:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214ab5:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004214ab9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004214abd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ac1:	48 89 ce             	mov    %rcx,%rsi
  8004214ac4:	48 89 c7             	mov    %rax,%rdi
  8004214ac7:	48 b8 cb 45 21 04 80 	movabs $0x80042145cb,%rax
  8004214ace:	00 00 00 
  8004214ad1:	ff d0                	callq  *%rax
  8004214ad3:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214ad6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214ada:	74 08                	je     8004214ae4 <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214adc:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214adf:	e9 93 00 00 00       	jmpq   8004214b77 <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214ae4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ae8:	48 8b 10             	mov    (%rax),%rdx
  8004214aeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214aef:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214af3:	48 01 d0             	add    %rdx,%rax
  8004214af6:	48 89 c2             	mov    %rax,%rdx
  8004214af9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214afd:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004214b01:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214b05:	75 2a                	jne    8004214b31 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004214b07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b0b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214b0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214b13:	48 01 c2             	add    %rax,%rdx
  8004214b16:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b1a:	48 8b 00             	mov    (%rax),%rax
  8004214b1d:	48 29 c2             	sub    %rax,%rdx
  8004214b20:	48 89 d0             	mov    %rdx,%rax
  8004214b23:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214b27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b2b:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004214b2f:	eb 28                	jmp    8004214b59 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004214b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b35:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214b3d:	48 01 c2             	add    %rax,%rdx
  8004214b40:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b44:	48 8b 00             	mov    (%rax),%rax
  8004214b47:	48 29 c2             	sub    %rax,%rdx
  8004214b4a:	48 89 d0             	mov    %rdx,%rax
  8004214b4d:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214b51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b55:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  8004214b59:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b5d:	48 8b 10             	mov    (%rax),%rdx
  8004214b60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b64:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004214b68:	48 01 c2             	add    %rax,%rdx
  8004214b6b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b6f:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214b72:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214b77:	c9                   	leaveq 
  8004214b78:	c3                   	retq   

0000008004214b79 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  8004214b79:	55                   	push   %rbp
  8004214b7a:	48 89 e5             	mov    %rsp,%rbp
  8004214b7d:	48 83 ec 70          	sub    $0x70,%rsp
  8004214b81:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214b85:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214b89:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214b8d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214b91:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  8004214b95:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  8004214b99:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214b9d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004214ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ba5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ba9:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214bac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214bb0:	48 8b 10             	mov    (%rax),%rdx
  8004214bb3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214bb7:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214bbb:	48 01 d0             	add    %rdx,%rax
  8004214bbe:	48 89 c2             	mov    %rax,%rdx
  8004214bc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214bc5:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  8004214bc9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214bcd:	48 8b 10             	mov    (%rax),%rdx
  8004214bd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214bd4:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214bd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214bdc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214be0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214be4:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214be8:	48 89 d1             	mov    %rdx,%rcx
  8004214beb:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214bef:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214bf4:	48 89 cf             	mov    %rcx,%rdi
  8004214bf7:	ff d0                	callq  *%rax
  8004214bf9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214bfd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214c02:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214c06:	75 2e                	jne    8004214c36 <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  8004214c08:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214c0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c13:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c17:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c1b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c1f:	48 89 d1             	mov    %rdx,%rcx
  8004214c22:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214c26:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214c2b:	48 89 cf             	mov    %rcx,%rdi
  8004214c2e:	ff d0                	callq  *%rax
  8004214c30:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214c34:	eb 07                	jmp    8004214c3d <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004214c36:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214c3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c41:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214c45:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214c49:	48 8b 00             	mov    (%rax),%rax
  8004214c4c:	48 29 c2             	sub    %rax,%rdx
  8004214c4f:	48 89 d0             	mov    %rdx,%rax
  8004214c52:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214c56:	73 0a                	jae    8004214c62 <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214c58:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214c5d:	e9 ca 02 00 00       	jmpq   8004214f2c <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  8004214c62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c66:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214c6a:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004214c6e:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214c72:	74 5e                	je     8004214cd2 <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214c74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c78:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c7c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c80:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c84:	48 89 d1             	mov    %rdx,%rcx
  8004214c87:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214c8b:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214c90:	48 89 cf             	mov    %rcx,%rdi
  8004214c93:	ff d0                	callq  *%rax
  8004214c95:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c99:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  8004214c9d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ca1:	48 8b 10             	mov    (%rax),%rdx
  8004214ca4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ca8:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214cac:	48 29 c2             	sub    %rax,%rdx
  8004214caf:	48 89 d0             	mov    %rdx,%rax
  8004214cb2:	48 83 e8 04          	sub    $0x4,%rax
  8004214cb6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004214cba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cbe:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214cc2:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214cc6:	75 3d                	jne    8004214d05 <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214cc8:	b8 13 00 00 00       	mov    $0x13,%eax
  8004214ccd:	e9 5a 02 00 00       	jmpq   8004214f2c <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  8004214cd2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cd6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214cda:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214cde:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214ce2:	48 89 d1             	mov    %rdx,%rcx
  8004214ce5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214ce8:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214cec:	48 89 cf             	mov    %rcx,%rdi
  8004214cef:	ff d0                	callq  *%rax
  8004214cf1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214cf5:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  8004214cf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cfd:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214d01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004214d05:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214d09:	0f 84 c9 00 00 00    	je     8004214dd8 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214d0f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d13:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214d17:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214d1b:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d1e:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214d22:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214d26:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d2a:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214d2e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d32:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d36:	48 89 c2             	mov    %rax,%rdx
  8004214d39:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214d3d:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214d41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d45:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214d49:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214d4d:	48 89 c7             	mov    %rax,%rdi
  8004214d50:	48 b8 b1 43 21 04 80 	movabs $0x80042143b1,%rax
  8004214d57:	00 00 00 
  8004214d5a:	ff d0                	callq  *%rax
  8004214d5c:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  8004214d5f:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214d63:	74 08                	je     8004214d6d <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  8004214d65:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214d68:	e9 bf 01 00 00       	jmpq   8004214f2c <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  8004214d6d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214d71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d75:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  8004214d79:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214d7d:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d81:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214d85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d89:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214d8d:	48 89 c2             	mov    %rax,%rdx
  8004214d90:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214d94:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214d98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d9c:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214da0:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214da4:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214daa:	48 89 c7             	mov    %rax,%rdi
  8004214dad:	48 b8 b1 43 21 04 80 	movabs $0x80042143b1,%rax
  8004214db4:	00 00 00 
  8004214db7:	ff d0                	callq  *%rax
  8004214db9:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  8004214dbc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214dc0:	74 08                	je     8004214dca <_dwarf_frame_set_fde+0x251>
			return (ret);
  8004214dc2:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214dc5:	e9 62 01 00 00       	jmpq   8004214f2c <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  8004214dca:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214dce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dd2:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004214dd6:	eb 50                	jmp    8004214e28 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214dd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ddc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214de0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214de4:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214de7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214deb:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214def:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214df3:	48 89 cf             	mov    %rcx,%rdi
  8004214df6:	ff d0                	callq  *%rax
  8004214df8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214dfc:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214e00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e04:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e08:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e0c:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214e0f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214e13:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214e17:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214e1b:	48 89 cf             	mov    %rcx,%rdi
  8004214e1e:	ff d0                	callq  *%rax
  8004214e20:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e24:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  8004214e28:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214e2c:	74 6b                	je     8004214e99 <_dwarf_frame_set_fde+0x320>
  8004214e2e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214e32:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214e36:	0f b6 00             	movzbl (%rax),%eax
  8004214e39:	3c 7a                	cmp    $0x7a,%al
  8004214e3b:	75 5c                	jne    8004214e99 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214e3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e41:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214e45:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004214e49:	48 89 d6             	mov    %rdx,%rsi
  8004214e4c:	48 89 c7             	mov    %rax,%rdi
  8004214e4f:	48 b8 45 14 21 04 80 	movabs $0x8004211445,%rax
  8004214e56:	00 00 00 
  8004214e59:	ff d0                	callq  *%rax
  8004214e5b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214e5f:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214e63:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e67:	48 8b 10             	mov    (%rax),%rdx
  8004214e6a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e6e:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214e72:	48 01 d0             	add    %rdx,%rax
  8004214e75:	48 89 c2             	mov    %rax,%rdx
  8004214e78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e7c:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  8004214e80:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e84:	48 8b 10             	mov    (%rax),%rdx
  8004214e87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e8b:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004214e8f:	48 01 c2             	add    %rax,%rdx
  8004214e92:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e96:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214e99:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e9d:	48 8b 10             	mov    (%rax),%rdx
  8004214ea0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ea4:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214ea8:	48 01 d0             	add    %rdx,%rax
  8004214eab:	48 89 c2             	mov    %rax,%rdx
  8004214eae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214eb2:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  8004214eb6:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214eba:	75 2a                	jne    8004214ee6 <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  8004214ebc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ec0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214ec4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214ec8:	48 01 c2             	add    %rax,%rdx
  8004214ecb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ecf:	48 8b 00             	mov    (%rax),%rax
  8004214ed2:	48 29 c2             	sub    %rax,%rdx
  8004214ed5:	48 89 d0             	mov    %rdx,%rax
  8004214ed8:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214edc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ee0:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004214ee4:	eb 28                	jmp    8004214f0e <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  8004214ee6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214eea:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004214eee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214ef2:	48 01 c2             	add    %rax,%rdx
  8004214ef5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ef9:	48 8b 00             	mov    (%rax),%rax
  8004214efc:	48 29 c2             	sub    %rax,%rdx
  8004214eff:	48 89 d0             	mov    %rdx,%rax
  8004214f02:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214f06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f0a:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  8004214f0e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f12:	48 8b 10             	mov    (%rax),%rdx
  8004214f15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f19:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214f1d:	48 01 c2             	add    %rax,%rdx
  8004214f20:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f24:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214f27:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214f2c:	c9                   	leaveq 
  8004214f2d:	c3                   	retq   

0000008004214f2e <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004214f2e:	55                   	push   %rbp
  8004214f2f:	48 89 e5             	mov    %rsp,%rbp
  8004214f32:	48 83 ec 20          	sub    $0x20,%rsp
  8004214f36:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214f3a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  8004214f3e:	48 b8 a0 c6 4d 04 80 	movabs $0x80044dc6a0,%rax
  8004214f45:	00 00 00 
  8004214f48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004214f4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f50:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214f54:	48 85 c0             	test   %rax,%rax
  8004214f57:	74 07                	je     8004214f60 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  8004214f59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214f5e:	eb 33                	jmp    8004214f93 <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  8004214f60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f64:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  8004214f68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214f6c:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  8004214f70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214f74:	48 b9 40 ae 6d 04 80 	movabs $0x80046dae40,%rcx
  8004214f7b:	00 00 00 
  8004214f7e:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  8004214f82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f86:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214f8a:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  8004214f8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214f93:	c9                   	leaveq 
  8004214f94:	c3                   	retq   

0000008004214f95 <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  8004214f95:	55                   	push   %rbp
  8004214f96:	48 89 e5             	mov    %rsp,%rbp
  8004214f99:	48 83 ec 60          	sub    $0x60,%rsp
  8004214f9d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214fa1:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004214fa4:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214fa8:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  8004214fac:	48 b8 a0 36 23 04 80 	movabs $0x80042336a0,%rax
  8004214fb3:	00 00 00 
  8004214fb6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  8004214fba:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004214fc1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fc5:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214fc9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  8004214fcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fd1:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214fd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214fd9:	48 39 c2             	cmp    %rax,%rdx
  8004214fdc:	0f 86 fe 01 00 00    	jbe    80042151e0 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  8004214fe2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214fe6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  8004214fea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fee:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214ff2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ff6:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214ffa:	48 89 d1             	mov    %rdx,%rcx
  8004214ffd:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215001:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215006:	48 89 cf             	mov    %rcx,%rdi
  8004215009:	ff d0                	callq  *%rax
  800421500b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  800421500f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215014:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004215018:	75 2e                	jne    8004215048 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  800421501a:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  8004215021:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215025:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215029:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421502d:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215031:	48 89 d1             	mov    %rdx,%rcx
  8004215034:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215038:	ba 08 00 00 00       	mov    $0x8,%edx
  800421503d:	48 89 cf             	mov    %rcx,%rdi
  8004215040:	ff d0                	callq  *%rax
  8004215042:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215046:	eb 07                	jmp    800421504f <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  8004215048:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  800421504f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215053:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004215057:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421505b:	48 29 c2             	sub    %rax,%rdx
  800421505e:	48 89 d0             	mov    %rdx,%rax
  8004215061:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004215065:	72 0d                	jb     8004215074 <_dwarf_get_next_fde+0xdf>
  8004215067:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421506c:	75 10                	jne    800421507e <_dwarf_get_next_fde+0xe9>
  800421506e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215072:	75 0a                	jne    800421507e <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004215074:	b8 12 00 00 00       	mov    $0x12,%eax
  8004215079:	e9 67 01 00 00       	jmpq   80042151e5 <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  800421507e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215082:	74 11                	je     8004215095 <_dwarf_get_next_fde+0x100>
  8004215084:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215089:	75 0a                	jne    8004215095 <_dwarf_get_next_fde+0x100>
			return(-1);
  800421508b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215090:	e9 50 01 00 00       	jmpq   80042151e5 <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  8004215095:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215099:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421509d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042150a1:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042150a5:	48 89 d1             	mov    %rdx,%rcx
  80042150a8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042150ab:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042150af:	48 89 cf             	mov    %rcx,%rdi
  80042150b2:	ff d0                	callq  *%rax
  80042150b4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  80042150b8:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042150bc:	74 79                	je     8004215137 <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  80042150be:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042150c3:	75 32                	jne    80042150f7 <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042150c5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150c9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042150cd:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042150d1:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042150d5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042150d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150dd:	49 89 f8             	mov    %rdi,%r8
  80042150e0:	48 89 c7             	mov    %rax,%rdi
  80042150e3:	48 b8 16 47 21 04 80 	movabs $0x8004214716,%rax
  80042150ea:	00 00 00 
  80042150ed:	ff d0                	callq  *%rax
  80042150ef:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042150f2:	e9 c8 00 00 00       	jmpq   80042151bf <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  80042150f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150fb:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042150ff:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215103:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215107:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421510b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421510f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215113:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004215117:	4d 89 c1             	mov    %r8,%r9
  800421511a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004215120:	48 89 c7             	mov    %rax,%rdi
  8004215123:	48 b8 79 4b 21 04 80 	movabs $0x8004214b79,%rax
  800421512a:	00 00 00 
  800421512d:	ff d0                	callq  *%rax
  800421512f:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215132:	e9 88 00 00 00       	jmpq   80042151bf <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  8004215137:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  800421513b:	75 0b                	jne    8004215148 <_dwarf_get_next_fde+0x1b3>
  800421513d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215142:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004215146:	74 0d                	je     8004215155 <_dwarf_get_next_fde+0x1c0>
  8004215148:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  800421514c:	75 36                	jne    8004215184 <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  800421514e:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  8004215153:	75 2f                	jne    8004215184 <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  8004215155:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215159:	48 8b 48 08          	mov    0x8(%rax),%rcx
  800421515d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215161:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8004215165:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004215169:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421516d:	49 89 f8             	mov    %rdi,%r8
  8004215170:	48 89 c7             	mov    %rax,%rdi
  8004215173:	48 b8 16 47 21 04 80 	movabs $0x8004214716,%rax
  800421517a:	00 00 00 
  800421517d:	ff d0                	callq  *%rax
  800421517f:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004215182:	eb 3b                	jmp    80042151bf <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  8004215184:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215188:	4c 8b 40 08          	mov    0x8(%rax),%r8
  800421518c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215190:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215194:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215198:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421519c:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042151a0:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042151a4:	4d 89 c1             	mov    %r8,%r9
  80042151a7:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042151ad:	48 89 c7             	mov    %rax,%rdi
  80042151b0:	48 b8 79 4b 21 04 80 	movabs $0x8004214b79,%rax
  80042151b7:	00 00 00 
  80042151ba:	ff d0                	callq  *%rax
  80042151bc:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  80042151bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042151c3:	74 07                	je     80042151cc <_dwarf_get_next_fde+0x237>
			return(-1);
  80042151c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042151ca:	eb 19                	jmp    80042151e5 <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  80042151cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042151d0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  80042151d4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042151d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042151dc:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  80042151e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042151e5:	c9                   	leaveq 
  80042151e6:	c3                   	retq   

00000080042151e7 <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  80042151e7:	55                   	push   %rbp
  80042151e8:	48 89 e5             	mov    %rsp,%rbp
  80042151eb:	48 83 ec 1c          	sub    $0x1c,%rsp
  80042151ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042151f3:	89 f0                	mov    %esi,%eax
  80042151f5:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  80042151f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151fd:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215201:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  8004215205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215209:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  800421520d:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004215211:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  8004215215:	c9                   	leaveq 
  8004215216:	c3                   	retq   

0000008004215217 <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004215217:	55                   	push   %rbp
  8004215218:	48 89 e5             	mov    %rsp,%rbp
  800421521b:	48 83 ec 10          	sub    $0x10,%rsp
  800421521f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004215223:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  8004215227:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421522c:	75 0a                	jne    8004215238 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  800421522e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215233:	e9 85 00 00 00       	jmpq   80042152bd <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004215238:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421523c:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215240:	48 85 c0             	test   %rax,%rax
  8004215243:	75 25                	jne    800421526a <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  8004215245:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004215249:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421524d:	48 89 d6             	mov    %rdx,%rsi
  8004215250:	48 89 c7             	mov    %rax,%rdi
  8004215253:	48 b8 2e 4f 21 04 80 	movabs $0x8004214f2e,%rax
  800421525a:	00 00 00 
  800421525d:	ff d0                	callq  *%rax
  800421525f:	85 c0                	test   %eax,%eax
  8004215261:	74 07                	je     800421526a <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  8004215263:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215268:	eb 53                	jmp    80042152bd <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  800421526a:	48 bf a0 36 23 04 80 	movabs $0x80042336a0,%rdi
  8004215271:	00 00 00 
  8004215274:	48 b8 e3 2c 21 04 80 	movabs $0x8004212ce3,%rax
  800421527b:	00 00 00 
  800421527e:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  8004215280:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215284:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  800421528b:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  800421528c:	48 b8 a0 36 23 04 80 	movabs $0x80042336a0,%rax
  8004215293:	00 00 00 
  8004215296:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421529a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421529e:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  80042152a2:	48 b8 a0 36 23 04 80 	movabs $0x80042336a0,%rax
  80042152a9:	00 00 00 
  80042152ac:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042152b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042152b4:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  80042152b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042152bd:	c9                   	leaveq 
  80042152be:	c3                   	retq   

00000080042152bf <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042152bf:	55                   	push   %rbp
  80042152c0:	48 89 e5             	mov    %rsp,%rbp
  80042152c3:	53                   	push   %rbx
  80042152c4:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  80042152cb:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  80042152cf:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  80042152d3:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  80042152da:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  80042152e1:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  80042152e8:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  80042152ef:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042152f3:	48 83 c0 48          	add    $0x48,%rax
  80042152f7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  80042152fb:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215302:	00 
  8004215303:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800421530a:	00 
  800421530b:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215312:	00 
  8004215313:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421531a:	00 
  800421531b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421531f:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215323:	0f b6 c0             	movzbl %al,%eax
  8004215326:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215329:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215330:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215337:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  800421533e:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215345:	e9 0a 05 00 00       	jmpq   8004215854 <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  800421534a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215351:	0f b6 00             	movzbl (%rax),%eax
  8004215354:	84 c0                	test   %al,%al
  8004215356:	0f 85 78 01 00 00    	jne    80042154d4 <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  800421535c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215363:	48 83 c0 01          	add    $0x1,%rax
  8004215367:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  800421536e:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215375:	48 89 c7             	mov    %rax,%rdi
  8004215378:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  800421537f:	00 00 00 
  8004215382:	ff d0                	callq  *%rax
  8004215384:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  8004215388:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421538f:	0f b6 00             	movzbl (%rax),%eax
  8004215392:	0f b6 c0             	movzbl %al,%eax
  8004215395:	83 f8 02             	cmp    $0x2,%eax
  8004215398:	74 7a                	je     8004215414 <_dwarf_lineno_run_program+0x155>
  800421539a:	83 f8 03             	cmp    $0x3,%eax
  800421539d:	0f 84 b3 00 00 00    	je     8004215456 <_dwarf_lineno_run_program+0x197>
  80042153a3:	83 f8 01             	cmp    $0x1,%eax
  80042153a6:	0f 85 09 01 00 00    	jne    80042154b5 <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  80042153ac:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042153b3:	48 83 c0 01          	add    $0x1,%rax
  80042153b7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  80042153be:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  80042153c5:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042153cc:	00 
  80042153cd:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  80042153d4:	00 
  80042153d5:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  80042153dc:	00 
  80042153dd:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  80042153e4:	00 
  80042153e5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042153e9:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042153ed:	0f b6 c0             	movzbl %al,%eax
  80042153f0:	89 45 cc             	mov    %eax,-0x34(%rbp)
  80042153f3:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  80042153fa:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215401:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215408:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  800421540f:	e9 bb 00 00 00       	jmpq   80042154cf <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  8004215414:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421541b:	48 83 c0 01          	add    $0x1,%rax
  800421541f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  8004215426:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800421542d:	00 00 00 
  8004215430:	48 8b 00             	mov    (%rax),%rax
  8004215433:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004215437:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421543b:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  800421543f:	0f b6 ca             	movzbl %dl,%ecx
  8004215442:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215449:	89 ce                	mov    %ecx,%esi
  800421544b:	48 89 d7             	mov    %rdx,%rdi
  800421544e:	ff d0                	callq  *%rax
  8004215450:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  8004215454:	eb 79                	jmp    80042154cf <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  8004215456:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421545d:	48 83 c0 01          	add    $0x1,%rax
  8004215461:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  8004215468:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  800421546f:	00 00 00 
  8004215472:	48 8b 08             	mov    (%rax),%rcx
  8004215475:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421547c:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  8004215483:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215487:	49 89 c8             	mov    %rcx,%r8
  800421548a:	48 89 d1             	mov    %rdx,%rcx
  800421548d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215492:	48 89 c7             	mov    %rax,%rdi
  8004215495:	48 b8 77 58 21 04 80 	movabs $0x8004215877,%rax
  800421549c:	00 00 00 
  800421549f:	ff d0                	callq  *%rax
  80042154a1:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  80042154a4:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  80042154a8:	74 09                	je     80042154b3 <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  80042154aa:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  80042154ab:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  80042154ae:	e9 ba 03 00 00       	jmpq   800421586d <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  80042154b3:	eb 1a                	jmp    80042154cf <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  80042154b5:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042154bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042154c0:	48 01 d0             	add    %rdx,%rax
  80042154c3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042154ca:	e9 85 03 00 00       	jmpq   8004215854 <_dwarf_lineno_run_program+0x595>
  80042154cf:	e9 80 03 00 00       	jmpq   8004215854 <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  80042154d4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042154db:	0f b6 00             	movzbl (%rax),%eax
  80042154de:	84 c0                	test   %al,%al
  80042154e0:	0f 84 3c 02 00 00    	je     8004215722 <_dwarf_lineno_run_program+0x463>
  80042154e6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042154ed:	0f b6 10             	movzbl (%rax),%edx
  80042154f0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042154f4:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042154f8:	38 c2                	cmp    %al,%dl
  80042154fa:	0f 83 22 02 00 00    	jae    8004215722 <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004215500:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215507:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421550b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215512:	0f b6 00             	movzbl (%rax),%eax
  8004215515:	0f b6 c0             	movzbl %al,%eax
  8004215518:	83 f8 0c             	cmp    $0xc,%eax
  800421551b:	0f 87 fb 01 00 00    	ja     800421571c <_dwarf_lineno_run_program+0x45d>
  8004215521:	89 c0                	mov    %eax,%eax
  8004215523:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421552a:	00 
  800421552b:	48 b8 28 f5 21 04 80 	movabs $0x800421f528,%rax
  8004215532:	00 00 00 
  8004215535:	48 01 d0             	add    %rdx,%rax
  8004215538:	48 8b 00             	mov    (%rax),%rax
  800421553b:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  800421553d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215544:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215548:	73 0a                	jae    8004215554 <_dwarf_lineno_run_program+0x295>
  800421554a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421554f:	e9 19 03 00 00       	jmpq   800421586d <_dwarf_lineno_run_program+0x5ae>
  8004215554:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215558:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421555c:	48 89 10             	mov    %rdx,(%rax)
  800421555f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215563:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  800421556a:	00 
  800421556b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421556f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215573:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215577:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421557b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421557f:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215583:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215587:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421558b:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800421558f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215593:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215596:	89 50 28             	mov    %edx,0x28(%rax)
  8004215599:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421559d:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042155a0:	89 50 2c             	mov    %edx,0x2c(%rax)
  80042155a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042155a7:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042155aa:	89 50 30             	mov    %edx,0x30(%rax)
  80042155ad:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042155b1:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  80042155b8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042155bc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042155c0:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  80042155c7:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  80042155ce:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  80042155d5:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  80042155dc:	e9 3c 01 00 00       	jmpq   800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  80042155e1:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042155e8:	48 89 c7             	mov    %rax,%rdi
  80042155eb:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042155f2:	00 00 00 
  80042155f5:	ff d0                	callq  *%rax
					li->li_minlen;
  80042155f7:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042155fb:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  80042155ff:	0f b6 d2             	movzbl %dl,%edx
  8004215602:	48 0f af c2          	imul   %rdx,%rax
  8004215606:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  800421560a:	e9 0e 01 00 00       	jmpq   800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  800421560f:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215616:	48 89 c7             	mov    %rax,%rdi
  8004215619:	48 b8 c4 14 21 04 80 	movabs $0x80042114c4,%rax
  8004215620:	00 00 00 
  8004215623:	ff d0                	callq  *%rax
  8004215625:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004215629:	e9 ef 00 00 00       	jmpq   800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  800421562e:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215635:	48 89 c7             	mov    %rax,%rdi
  8004215638:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  800421563f:	00 00 00 
  8004215642:	ff d0                	callq  *%rax
  8004215644:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004215648:	e9 d0 00 00 00       	jmpq   800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  800421564d:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215654:	48 89 c7             	mov    %rax,%rdi
  8004215657:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  800421565e:	00 00 00 
  8004215661:	ff d0                	callq  *%rax
  8004215663:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  8004215667:	e9 b1 00 00 00       	jmpq   800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  800421566c:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004215670:	0f 94 c0             	sete   %al
  8004215673:	0f b6 c0             	movzbl %al,%eax
  8004215676:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  8004215679:	e9 9f 00 00 00       	jmpq   800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  800421567e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  8004215685:	e9 93 00 00 00       	jmpq   800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  800421568a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421568e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215692:	0f b6 c0             	movzbl %al,%eax
  8004215695:	ba ff 00 00 00       	mov    $0xff,%edx
  800421569a:	89 d1                	mov    %edx,%ecx
  800421569c:	29 c1                	sub    %eax,%ecx
  800421569e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042156a2:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042156a6:	0f b6 d8             	movzbl %al,%ebx
  80042156a9:	89 c8                	mov    %ecx,%eax
  80042156ab:	99                   	cltd   
  80042156ac:	f7 fb                	idiv   %ebx
  80042156ae:	89 c2                	mov    %eax,%edx
  80042156b0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042156b4:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  80042156b8:	0f b6 c0             	movzbl %al,%eax
  80042156bb:	0f af c2             	imul   %edx,%eax
  80042156be:	48 98                	cltq   
  80042156c0:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  80042156c4:	eb 57                	jmp    800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  80042156c6:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  80042156cd:	00 00 00 
  80042156d0:	48 8b 00             	mov    (%rax),%rax
  80042156d3:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042156d7:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  80042156de:	be 02 00 00 00       	mov    $0x2,%esi
  80042156e3:	48 89 d7             	mov    %rdx,%rdi
  80042156e6:	ff d0                	callq  *%rax
  80042156e8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  80042156ec:	eb 2f                	jmp    800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  80042156ee:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  80042156f5:	eb 26                	jmp    800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  80042156f7:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  80042156fe:	eb 1d                	jmp    800421571d <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004215700:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215707:	48 89 c7             	mov    %rax,%rdi
  800421570a:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  8004215711:	00 00 00 
  8004215714:	ff d0                	callq  *%rax
  8004215716:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  800421571a:	eb 01                	jmp    800421571d <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  800421571c:	90                   	nop
			}

		} else {
  800421571d:	e9 32 01 00 00       	jmpq   8004215854 <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  8004215722:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215726:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  800421572a:	0f be c8             	movsbl %al,%ecx
  800421572d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215734:	0f b6 00             	movzbl (%rax),%eax
  8004215737:	0f b6 d0             	movzbl %al,%edx
  800421573a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421573e:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215742:	0f b6 c0             	movzbl %al,%eax
  8004215745:	29 c2                	sub    %eax,%edx
  8004215747:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421574b:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  800421574f:	0f b6 f0             	movzbl %al,%esi
  8004215752:	89 d0                	mov    %edx,%eax
  8004215754:	99                   	cltd   
  8004215755:	f7 fe                	idiv   %esi
  8004215757:	89 d0                	mov    %edx,%eax
  8004215759:	01 c8                	add    %ecx,%eax
  800421575b:	48 98                	cltq   
  800421575d:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004215761:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215768:	0f b6 00             	movzbl (%rax),%eax
  800421576b:	0f b6 d0             	movzbl %al,%edx
  800421576e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215772:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215776:	0f b6 c0             	movzbl %al,%eax
  8004215779:	89 d1                	mov    %edx,%ecx
  800421577b:	29 c1                	sub    %eax,%ecx
  800421577d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215781:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215785:	0f b6 d8             	movzbl %al,%ebx
  8004215788:	89 c8                	mov    %ecx,%eax
  800421578a:	99                   	cltd   
  800421578b:	f7 fb                	idiv   %ebx
  800421578d:	89 c2                	mov    %eax,%edx
  800421578f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215793:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215797:	0f b6 c0             	movzbl %al,%eax
  800421579a:	0f af c2             	imul   %edx,%eax
  800421579d:	48 98                	cltq   
  800421579f:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  80042157a3:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042157aa:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042157ae:	73 0a                	jae    80042157ba <_dwarf_lineno_run_program+0x4fb>
  80042157b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042157b5:	e9 b3 00 00 00       	jmpq   800421586d <_dwarf_lineno_run_program+0x5ae>
  80042157ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042157c2:	48 89 10             	mov    %rdx,(%rax)
  80042157c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157c9:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  80042157d0:	00 
  80042157d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157d5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042157d9:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042157dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157e1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042157e5:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042157e9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042157ed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157f1:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042157f5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157f9:	8b 55 c8             	mov    -0x38(%rbp),%edx
  80042157fc:	89 50 28             	mov    %edx,0x28(%rax)
  80042157ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215803:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215806:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215809:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421580d:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215810:	89 50 30             	mov    %edx,0x30(%rax)
  8004215813:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215817:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  800421581e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215822:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215826:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  800421582d:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215834:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  800421583b:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004215842:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215849:	48 83 c0 01          	add    $0x1,%rax
  800421584d:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215854:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421585b:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004215862:	0f 82 e2 fa ff ff    	jb     800421534a <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004215868:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  800421586d:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004215874:	5b                   	pop    %rbx
  8004215875:	5d                   	pop    %rbp
  8004215876:	c3                   	retq   

0000008004215877 <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004215877:	55                   	push   %rbp
  8004215878:	48 89 e5             	mov    %rsp,%rbp
  800421587b:	53                   	push   %rbx
  800421587c:	48 83 ec 48          	sub    $0x48,%rsp
  8004215880:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004215884:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004215888:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421588c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004215890:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004215894:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215898:	48 8b 00             	mov    (%rax),%rax
  800421589b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  800421589f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042158a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  80042158a7:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  80042158ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042158af:	48 89 c7             	mov    %rax,%rdi
  80042158b2:	48 b8 2e 06 21 04 80 	movabs $0x800421062e,%rax
  80042158b9:	00 00 00 
  80042158bc:	ff d0                	callq  *%rax
  80042158be:	48 98                	cltq   
  80042158c0:	48 83 c0 01          	add    $0x1,%rax
  80042158c4:	48 01 d8             	add    %rbx,%rax
  80042158c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  80042158cb:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042158cf:	48 89 c7             	mov    %rax,%rdi
  80042158d2:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042158d9:	00 00 00 
  80042158dc:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  80042158de:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042158e2:	48 89 c7             	mov    %rax,%rdi
  80042158e5:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042158ec:	00 00 00 
  80042158ef:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  80042158f1:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042158f5:	48 89 c7             	mov    %rax,%rdi
  80042158f8:	48 b8 56 15 21 04 80 	movabs $0x8004211556,%rax
  80042158ff:	00 00 00 
  8004215902:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215904:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215908:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421590c:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  800421590f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215914:	48 83 c4 48          	add    $0x48,%rsp
  8004215918:	5b                   	pop    %rbx
  8004215919:	5d                   	pop    %rbp
  800421591a:	c3                   	retq   

000000800421591b <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  800421591b:	55                   	push   %rbp
  800421591c:	48 89 e5             	mov    %rsp,%rbp
  800421591f:	53                   	push   %rbx
  8004215920:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215927:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  800421592e:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215935:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  800421593c:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215943:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  800421594a:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004215951:	00 
  8004215952:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004215959:	00 
  800421595a:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004215961:	00 
  8004215962:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215969:	00 
  800421596a:	48 b8 90 f5 21 04 80 	movabs $0x800421f590,%rax
  8004215971:	00 00 00 
  8004215974:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215978:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800421597c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004215980:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215987:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800421598e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004215992:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215997:	75 35                	jne    80042159ce <_dwarf_lineno_init+0xb3>
  8004215999:	48 b9 9c f5 21 04 80 	movabs $0x800421f59c,%rcx
  80042159a0:	00 00 00 
  80042159a3:	48 ba a7 f5 21 04 80 	movabs $0x800421f5a7,%rdx
  80042159aa:	00 00 00 
  80042159ad:	be 13 01 00 00       	mov    $0x113,%esi
  80042159b2:	48 bf bc f5 21 04 80 	movabs $0x800421f5bc,%rdi
  80042159b9:	00 00 00 
  80042159bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042159c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042159c8:	00 00 00 
  80042159cb:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  80042159ce:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  80042159d5:	00 00 00 
  80042159d8:	48 8b 00             	mov    (%rax),%rax
  80042159db:	48 85 c0             	test   %rax,%rax
  80042159de:	75 35                	jne    8004215a15 <_dwarf_lineno_init+0xfa>
  80042159e0:	48 b9 d3 f5 21 04 80 	movabs $0x800421f5d3,%rcx
  80042159e7:	00 00 00 
  80042159ea:	48 ba a7 f5 21 04 80 	movabs $0x800421f5a7,%rdx
  80042159f1:	00 00 00 
  80042159f4:	be 14 01 00 00       	mov    $0x114,%esi
  80042159f9:	48 bf bc f5 21 04 80 	movabs $0x800421f5bc,%rdi
  8004215a00:	00 00 00 
  8004215a03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a08:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215a0f:	00 00 00 
  8004215a12:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215a15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215a19:	48 89 c7             	mov    %rax,%rdi
  8004215a1c:	48 b8 e3 2c 21 04 80 	movabs $0x8004212ce3,%rax
  8004215a23:	00 00 00 
  8004215a26:	ff d0                	callq  *%rax
  8004215a28:	85 c0                	test   %eax,%eax
  8004215a2a:	74 0a                	je     8004215a36 <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215a2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a31:	e9 4f 04 00 00       	jmpq   8004215e85 <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215a36:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004215a3d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004215a41:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215a48:	00 00 00 
  8004215a4b:	48 8b 00             	mov    (%rax),%rax
  8004215a4e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215a52:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215a56:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215a5a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215a61:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215a66:	48 89 cf             	mov    %rcx,%rdi
  8004215a69:	ff d0                	callq  *%rax
  8004215a6b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  8004215a6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215a74:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215a78:	75 37                	jne    8004215ab1 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215a7a:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004215a81:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215a88:	00 00 00 
  8004215a8b:	48 8b 00             	mov    (%rax),%rax
  8004215a8e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215a92:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215a96:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215a9a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215aa1:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215aa6:	48 89 cf             	mov    %rcx,%rdi
  8004215aa9:	ff d0                	callq  *%rax
  8004215aab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215aaf:	eb 07                	jmp    8004215ab8 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215ab1:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215ab8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215abc:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215ac0:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215ac7:	48 29 c2             	sub    %rax,%rdx
  8004215aca:	48 89 d0             	mov    %rdx,%rax
  8004215acd:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215ad1:	73 0a                	jae    8004215add <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215ad3:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215ad8:	e9 a8 03 00 00       	jmpq   8004215e85 <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  8004215add:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215ae1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215ae5:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215ae8:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004215aef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215af3:	48 01 d0             	add    %rdx,%rax
  8004215af6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215afa:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215b01:	00 00 00 
  8004215b04:	48 8b 00             	mov    (%rax),%rax
  8004215b07:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215b0b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215b0f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215b13:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215b1a:	ba 02 00 00 00       	mov    $0x2,%edx
  8004215b1f:	48 89 cf             	mov    %rcx,%rdi
  8004215b22:	ff d0                	callq  *%rax
  8004215b24:	89 c2                	mov    %eax,%edx
  8004215b26:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215b2a:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  8004215b2e:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215b35:	00 00 00 
  8004215b38:	48 8b 00             	mov    (%rax),%rax
  8004215b3b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215b3f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215b43:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215b47:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004215b4a:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215b51:	48 89 cf             	mov    %rcx,%rdi
  8004215b54:	ff d0                	callq  *%rax
  8004215b56:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215b5a:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  8004215b5e:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215b65:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  8004215b69:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215b70:	00 00 00 
  8004215b73:	48 8b 00             	mov    (%rax),%rax
  8004215b76:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215b7a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215b7e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215b82:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215b89:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215b8e:	48 89 cf             	mov    %rcx,%rdi
  8004215b91:	ff d0                	callq  *%rax
  8004215b93:	89 c2                	mov    %eax,%edx
  8004215b95:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215b99:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004215b9c:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215ba3:	00 00 00 
  8004215ba6:	48 8b 00             	mov    (%rax),%rax
  8004215ba9:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215bad:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215bb1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215bb5:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215bbc:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215bc1:	48 89 cf             	mov    %rcx,%rdi
  8004215bc4:	ff d0                	callq  *%rax
  8004215bc6:	89 c2                	mov    %eax,%edx
  8004215bc8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215bcc:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004215bcf:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215bd6:	00 00 00 
  8004215bd9:	48 8b 00             	mov    (%rax),%rax
  8004215bdc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215be0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215be4:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215be8:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215bef:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215bf4:	48 89 cf             	mov    %rcx,%rdi
  8004215bf7:	ff d0                	callq  *%rax
  8004215bf9:	89 c2                	mov    %eax,%edx
  8004215bfb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215bff:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004215c02:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215c09:	00 00 00 
  8004215c0c:	48 8b 00             	mov    (%rax),%rax
  8004215c0f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215c13:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215c17:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215c1b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215c22:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215c27:	48 89 cf             	mov    %rcx,%rdi
  8004215c2a:	ff d0                	callq  *%rax
  8004215c2c:	89 c2                	mov    %eax,%edx
  8004215c2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c32:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215c35:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215c3c:	00 00 00 
  8004215c3f:	48 8b 00             	mov    (%rax),%rax
  8004215c42:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215c46:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215c4a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215c4e:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215c55:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215c5a:	48 89 cf             	mov    %rcx,%rdi
  8004215c5d:	ff d0                	callq  *%rax
  8004215c5f:	89 c2                	mov    %eax,%edx
  8004215c61:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c65:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  8004215c68:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c6c:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215c70:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004215c73:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c77:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215c7b:	0f b6 c0             	movzbl %al,%eax
  8004215c7e:	83 e8 01             	sub    $0x1,%eax
  8004215c81:	39 c2                	cmp    %eax,%edx
  8004215c83:	7d 0c                	jge    8004215c91 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215c85:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215c8c:	e9 f1 01 00 00       	jmpq   8004215e82 <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004215c91:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215c95:	48 bb 80 b4 6d 04 80 	movabs $0x80046db480,%rbx
  8004215c9c:	00 00 00 
  8004215c9f:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215ca3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004215caa:	eb 41                	jmp    8004215ced <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004215cac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215cb0:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215cb4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004215cb7:	48 98                	cltq   
  8004215cb9:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004215cbd:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215cc4:	00 00 00 
  8004215cc7:	48 8b 00             	mov    (%rax),%rax
  8004215cca:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215cce:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215cd2:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215cd6:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215cdd:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215ce2:	48 89 cf             	mov    %rcx,%rdi
  8004215ce5:	ff d0                	callq  *%rax
  8004215ce7:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215ce9:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004215ced:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215cf1:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215cf5:	0f b6 c0             	movzbl %al,%eax
  8004215cf8:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  8004215cfb:	7f af                	jg     8004215cac <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  8004215cfd:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215d04:	00 
	p = ds->ds_data + offset;
  8004215d05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d09:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215d0d:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215d14:	48 01 d0             	add    %rdx,%rax
  8004215d17:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  8004215d1e:	eb 1f                	jmp    8004215d3f <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  8004215d20:	90                   	nop
  8004215d21:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215d28:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215d2c:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215d33:	0f b6 00             	movzbl (%rax),%eax
  8004215d36:	84 c0                	test   %al,%al
  8004215d38:	75 e7                	jne    8004215d21 <_dwarf_lineno_init+0x406>
			;
		length++;
  8004215d3a:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  8004215d3f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215d46:	0f b6 00             	movzbl (%rax),%eax
  8004215d49:	84 c0                	test   %al,%al
  8004215d4b:	75 d3                	jne    8004215d20 <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  8004215d4d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215d51:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215d55:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  8004215d59:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215d60:	48 89 c2             	mov    %rax,%rdx
  8004215d63:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d67:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215d6b:	48 29 c2             	sub    %rax,%rdx
  8004215d6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d72:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d76:	48 98                	cltq   
  8004215d78:	48 39 c2             	cmp    %rax,%rdx
  8004215d7b:	7e 0c                	jle    8004215d89 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215d7d:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215d84:	e9 f9 00 00 00       	jmpq   8004215e82 <_dwarf_lineno_init+0x567>
	}
	p++;
  8004215d89:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215d90:	48 83 c0 01          	add    $0x1,%rax
  8004215d94:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215d9b:	eb 3c                	jmp    8004215dd9 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  8004215d9d:	48 b8 88 36 23 04 80 	movabs $0x8004233688,%rax
  8004215da4:	00 00 00 
  8004215da7:	48 8b 08             	mov    (%rax),%rcx
  8004215daa:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004215db1:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004215db8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215dbc:	49 89 c8             	mov    %rcx,%r8
  8004215dbf:	48 89 d1             	mov    %rdx,%rcx
  8004215dc2:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215dc7:	48 89 c7             	mov    %rax,%rdi
  8004215dca:	48 b8 77 58 21 04 80 	movabs $0x8004215877,%rax
  8004215dd1:	00 00 00 
  8004215dd4:	ff d0                	callq  *%rax
  8004215dd6:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215dd9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215de0:	0f b6 00             	movzbl (%rax),%eax
  8004215de3:	84 c0                	test   %al,%al
  8004215de5:	75 b6                	jne    8004215d9d <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  8004215de7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215dee:	48 83 c0 01          	add    $0x1,%rax
  8004215df2:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  8004215df9:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215e00:	48 89 c2             	mov    %rax,%rdx
  8004215e03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215e07:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215e0b:	48 29 c2             	sub    %rax,%rdx
  8004215e0e:	48 89 d0             	mov    %rdx,%rax
  8004215e11:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  8004215e15:	48 89 c2             	mov    %rax,%rdx
  8004215e18:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e1c:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215e20:	48 39 c2             	cmp    %rax,%rdx
  8004215e23:	74 09                	je     8004215e2e <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215e25:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215e2c:	eb 54                	jmp    8004215e82 <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  8004215e2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215e32:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215e36:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215e3a:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004215e3e:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004215e45:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  8004215e4c:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  8004215e53:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004215e57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215e5b:	4d 89 c1             	mov    %r8,%r9
  8004215e5e:	49 89 f8             	mov    %rdi,%r8
  8004215e61:	48 89 c7             	mov    %rax,%rdi
  8004215e64:	48 b8 bf 52 21 04 80 	movabs $0x80042152bf,%rax
  8004215e6b:	00 00 00 
  8004215e6e:	ff d0                	callq  *%rax
  8004215e70:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  8004215e73:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215e77:	74 02                	je     8004215e7b <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  8004215e79:	eb 07                	jmp    8004215e82 <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  8004215e7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215e80:	eb 03                	jmp    8004215e85 <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  8004215e82:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  8004215e85:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004215e8c:	5b                   	pop    %rbx
  8004215e8d:	5d                   	pop    %rbp
  8004215e8e:	c3                   	retq   

0000008004215e8f <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004215e8f:	55                   	push   %rbp
  8004215e90:	48 89 e5             	mov    %rsp,%rbp
  8004215e93:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004215e9a:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004215ea1:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004215ea8:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004215eaf:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  8004215eb6:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  8004215ebd:	00 
  8004215ebe:	75 35                	jne    8004215ef5 <dwarf_srclines+0x66>
  8004215ec0:	48 b9 df f5 21 04 80 	movabs $0x800421f5df,%rcx
  8004215ec7:	00 00 00 
  8004215eca:	48 ba a7 f5 21 04 80 	movabs $0x800421f5a7,%rdx
  8004215ed1:	00 00 00 
  8004215ed4:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004215ed9:	48 bf bc f5 21 04 80 	movabs $0x800421f5bc,%rdi
  8004215ee0:	00 00 00 
  8004215ee3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215ee8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215eef:	00 00 00 
  8004215ef2:	41 ff d0             	callq  *%r8
	assert(linebuf);
  8004215ef5:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004215efc:	00 
  8004215efd:	75 35                	jne    8004215f34 <dwarf_srclines+0xa5>
  8004215eff:	48 b9 e3 f5 21 04 80 	movabs $0x800421f5e3,%rcx
  8004215f06:	00 00 00 
  8004215f09:	48 ba a7 f5 21 04 80 	movabs $0x800421f5a7,%rdx
  8004215f10:	00 00 00 
  8004215f13:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004215f18:	48 bf bc f5 21 04 80 	movabs $0x800421f5bc,%rdi
  8004215f1f:	00 00 00 
  8004215f22:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215f27:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215f2e:	00 00 00 
  8004215f31:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  8004215f34:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004215f3b:	ba 88 00 00 00       	mov    $0x88,%edx
  8004215f40:	be 00 00 00 00       	mov    $0x0,%esi
  8004215f45:	48 89 c7             	mov    %rax,%rdi
  8004215f48:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004215f4f:	00 00 00 
  8004215f52:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  8004215f54:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215f5b:	be 10 00 00 00       	mov    $0x10,%esi
  8004215f60:	48 89 c7             	mov    %rax,%rdi
  8004215f63:	48 b8 68 28 21 04 80 	movabs $0x8004212868,%rax
  8004215f6a:	00 00 00 
  8004215f6d:	ff d0                	callq  *%rax
  8004215f6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004215f73:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215f78:	75 0a                	jne    8004215f84 <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004215f7a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215f7f:	e9 84 00 00 00       	jmpq   8004216008 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  8004215f84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215f88:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004215f8c:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  8004215f93:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  8004215f9a:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004215fa1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215fa8:	49 89 f8             	mov    %rdi,%r8
  8004215fab:	48 89 c7             	mov    %rax,%rdi
  8004215fae:	48 b8 1b 59 21 04 80 	movabs $0x800421591b,%rax
  8004215fb5:	00 00 00 
  8004215fb8:	ff d0                	callq  *%rax
  8004215fba:	85 c0                	test   %eax,%eax
  8004215fbc:	74 07                	je     8004215fc5 <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  8004215fbe:	b8 01 00 00 00       	mov    $0x1,%eax
  8004215fc3:	eb 43                	jmp    8004216008 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  8004215fc5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004215fcc:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004215fd0:	48 89 10             	mov    %rdx,(%rax)
  8004215fd3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215fd7:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004215fdb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215fdf:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215fe3:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215fe7:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215feb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215fef:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215ff3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215ff7:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004215ffb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215fff:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  8004216003:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004216008:	c9                   	leaveq 
  8004216009:	c3                   	retq   

000000800421600a <_dwarf_find_section>:
  800421600a:	55                   	push   %rbp
  800421600b:	48 89 e5             	mov    %rsp,%rbp
  800421600e:	48 83 ec 20          	sub    $0x20,%rsp
  8004216012:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216016:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421601d:	00 
  800421601e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216025:	eb 57                	jmp    800421607e <_dwarf_find_section+0x74>
  8004216027:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421602e:	00 00 00 
  8004216031:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216034:	48 63 d2             	movslq %edx,%rdx
  8004216037:	48 c1 e2 05          	shl    $0x5,%rdx
  800421603b:	48 01 d0             	add    %rdx,%rax
  800421603e:	48 8b 00             	mov    (%rax),%rax
  8004216041:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216045:	48 89 d6             	mov    %rdx,%rsi
  8004216048:	48 89 c7             	mov    %rax,%rdi
  800421604b:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004216052:	00 00 00 
  8004216055:	ff d0                	callq  *%rax
  8004216057:	85 c0                	test   %eax,%eax
  8004216059:	75 1f                	jne    800421607a <_dwarf_find_section+0x70>
  800421605b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421605e:	48 98                	cltq   
  8004216060:	48 c1 e0 05          	shl    $0x5,%rax
  8004216064:	48 89 c2             	mov    %rax,%rdx
  8004216067:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421606e:	00 00 00 
  8004216071:	48 01 d0             	add    %rdx,%rax
  8004216074:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216078:	eb 0a                	jmp    8004216084 <_dwarf_find_section+0x7a>
  800421607a:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421607e:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004216082:	7e a3                	jle    8004216027 <_dwarf_find_section+0x1d>
  8004216084:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216088:	c9                   	leaveq 
  8004216089:	c3                   	retq   

000000800421608a <find_debug_sections>:
  800421608a:	55                   	push   %rbp
  800421608b:	48 89 e5             	mov    %rsp,%rbp
  800421608e:	48 83 ec 40          	sub    $0x40,%rsp
  8004216092:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004216096:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421609a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421609e:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  80042160a5:	00 
  80042160a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042160aa:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042160ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042160b2:	48 01 d0             	add    %rdx,%rax
  80042160b5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042160b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042160bd:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042160c1:	0f b7 c0             	movzwl %ax,%eax
  80042160c4:	48 c1 e0 06          	shl    $0x6,%rax
  80042160c8:	48 89 c2             	mov    %rax,%rdx
  80042160cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042160cf:	48 01 d0             	add    %rdx,%rax
  80042160d2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042160d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042160da:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042160de:	0f b7 c0             	movzwl %ax,%eax
  80042160e1:	48 c1 e0 06          	shl    $0x6,%rax
  80042160e5:	48 89 c2             	mov    %rax,%rdx
  80042160e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042160ec:	48 01 d0             	add    %rdx,%rax
  80042160ef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042160f3:	e9 4b 02 00 00       	jmpq   8004216343 <find_debug_sections+0x2b9>
  80042160f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042160fc:	8b 00                	mov    (%rax),%eax
  80042160fe:	89 c2                	mov    %eax,%edx
  8004216100:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216104:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004216108:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421610c:	48 01 c8             	add    %rcx,%rax
  800421610f:	48 01 d0             	add    %rdx,%rax
  8004216112:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216116:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421611a:	48 be eb f5 21 04 80 	movabs $0x800421f5eb,%rsi
  8004216121:	00 00 00 
  8004216124:	48 89 c7             	mov    %rax,%rdi
  8004216127:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  800421612e:	00 00 00 
  8004216131:	ff d0                	callq  *%rax
  8004216133:	85 c0                	test   %eax,%eax
  8004216135:	75 4b                	jne    8004216182 <find_debug_sections+0xf8>
  8004216137:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421613b:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216142:	00 00 00 
  8004216145:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216149:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216150:	00 00 00 
  8004216153:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216157:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421615b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421615f:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216163:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421616a:	00 00 00 
  800421616d:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216171:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216175:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216179:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421617d:	e9 bc 01 00 00       	jmpq   800421633e <find_debug_sections+0x2b4>
  8004216182:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216186:	48 be f7 f5 21 04 80 	movabs $0x800421f5f7,%rsi
  800421618d:	00 00 00 
  8004216190:	48 89 c7             	mov    %rax,%rdi
  8004216193:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  800421619a:	00 00 00 
  800421619d:	ff d0                	callq  *%rax
  800421619f:	85 c0                	test   %eax,%eax
  80042161a1:	75 4b                	jne    80042161ee <find_debug_sections+0x164>
  80042161a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042161a7:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042161ae:	00 00 00 
  80042161b1:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042161b5:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042161bc:	00 00 00 
  80042161bf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042161c3:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042161c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042161cb:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042161cf:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042161d6:	00 00 00 
  80042161d9:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042161dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042161e1:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042161e5:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042161e9:	e9 50 01 00 00       	jmpq   800421633e <find_debug_sections+0x2b4>
  80042161ee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042161f2:	48 be 0f f6 21 04 80 	movabs $0x800421f60f,%rsi
  80042161f9:	00 00 00 
  80042161fc:	48 89 c7             	mov    %rax,%rdi
  80042161ff:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004216206:	00 00 00 
  8004216209:	ff d0                	callq  *%rax
  800421620b:	85 c0                	test   %eax,%eax
  800421620d:	75 4b                	jne    800421625a <find_debug_sections+0x1d0>
  800421620f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216213:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421621a:	00 00 00 
  800421621d:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216221:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216228:	00 00 00 
  800421622b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421622f:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216233:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216237:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421623b:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216242:	00 00 00 
  8004216245:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216249:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421624d:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216251:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216255:	e9 e4 00 00 00       	jmpq   800421633e <find_debug_sections+0x2b4>
  800421625a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421625e:	48 be 05 f6 21 04 80 	movabs $0x800421f605,%rsi
  8004216265:	00 00 00 
  8004216268:	48 89 c7             	mov    %rax,%rdi
  800421626b:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004216272:	00 00 00 
  8004216275:	ff d0                	callq  *%rax
  8004216277:	85 c0                	test   %eax,%eax
  8004216279:	75 53                	jne    80042162ce <find_debug_sections+0x244>
  800421627b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421627f:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216283:	48 89 c2             	mov    %rax,%rdx
  8004216286:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421628d:	00 00 00 
  8004216290:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216294:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216298:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800421629c:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042162a3:	00 00 00 
  80042162a6:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042162aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042162ae:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042162b2:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042162b9:	00 00 00 
  80042162bc:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042162c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042162c4:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042162c8:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042162cc:	eb 70                	jmp    800421633e <find_debug_sections+0x2b4>
  80042162ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042162d2:	48 be 1b f6 21 04 80 	movabs $0x800421f61b,%rsi
  80042162d9:	00 00 00 
  80042162dc:	48 89 c7             	mov    %rax,%rdi
  80042162df:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  80042162e6:	00 00 00 
  80042162e9:	ff d0                	callq  *%rax
  80042162eb:	85 c0                	test   %eax,%eax
  80042162ed:	75 4f                	jne    800421633e <find_debug_sections+0x2b4>
  80042162ef:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042162f3:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042162fa:	00 00 00 
  80042162fd:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216304:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421630b:	00 00 00 
  800421630e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216312:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216319:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421631d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216321:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216328:	00 00 00 
  800421632b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216332:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216336:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421633a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421633e:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  8004216343:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216347:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800421634b:	0f 82 a7 fd ff ff    	jb     80042160f8 <find_debug_sections+0x6e>
  8004216351:	c9                   	leaveq 
  8004216352:	c3                   	retq   

0000008004216353 <read_section_headers>:
  8004216353:	55                   	push   %rbp
  8004216354:	48 89 e5             	mov    %rsp,%rbp
  8004216357:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  800421635e:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  8004216365:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  800421636c:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  8004216373:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216378:	ba 14 00 00 00       	mov    $0x14,%edx
  800421637d:	48 89 f7             	mov    %rsi,%rdi
  8004216380:	48 89 d1             	mov    %rdx,%rcx
  8004216383:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  8004216386:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  800421638d:	00 
  800421638e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216392:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004216399:	48 01 d0             	add    %rdx,%rax
  800421639c:	48 83 e8 01          	sub    $0x1,%rax
  80042163a0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042163a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042163a8:	ba 00 00 00 00       	mov    $0x0,%edx
  80042163ad:	48 f7 75 e8          	divq   -0x18(%rbp)
  80042163b1:	48 89 d0             	mov    %rdx,%rax
  80042163b4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042163b8:	48 29 c2             	sub    %rax,%rdx
  80042163bb:	48 89 d0             	mov    %rdx,%rax
  80042163be:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042163c2:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  80042163c9:	00 00 00 00 
  80042163cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042163d1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042163d5:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  80042163dc:	00 
  80042163dd:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  80042163e4:	00 00 00 
  80042163e7:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  80042163ee:	75 11                	jne    8004216401 <read_section_headers+0xae>
  80042163f0:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042163f7:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042163fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042163ff:	eb 26                	jmp    8004216427 <read_section_headers+0xd4>
  8004216401:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216408:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800421640c:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216413:	48 01 c2             	add    %rax,%rdx
  8004216416:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  800421641d:	ff ff ff 
  8004216420:	48 01 d0             	add    %rdx,%rax
  8004216423:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216427:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421642e:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216432:	0f b7 c0             	movzwl %ax,%eax
  8004216435:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004216438:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421643f:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  8004216443:	0f b7 c0             	movzwl %ax,%eax
  8004216446:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004216449:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216450:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004216454:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216457:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  800421645b:	48 63 f0             	movslq %eax,%rsi
  800421645e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216462:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216469:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421646d:	48 89 c7             	mov    %rax,%rdi
  8004216470:	48 b8 92 6a 21 04 80 	movabs $0x8004216a92,%rax
  8004216477:	00 00 00 
  800421647a:	ff d0                	callq  *%rax
  800421647c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216480:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004216484:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216488:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  800421648e:	48 89 c2             	mov    %rax,%rdx
  8004216491:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216495:	48 29 d0             	sub    %rdx,%rax
  8004216498:	48 89 c2             	mov    %rax,%rdx
  800421649b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421649f:	48 01 d0             	add    %rdx,%rax
  80042164a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042164a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042164ad:	eb 24                	jmp    80042164d3 <read_section_headers+0x180>
  80042164af:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042164b2:	48 98                	cltq   
  80042164b4:	48 c1 e0 06          	shl    $0x6,%rax
  80042164b8:	48 89 c2             	mov    %rax,%rdx
  80042164bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042164bf:	48 01 c2             	add    %rax,%rdx
  80042164c2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042164c5:	48 98                	cltq   
  80042164c7:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  80042164ce:	ff 
  80042164cf:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042164d3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042164d6:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  80042164d9:	7c d4                	jl     80042164af <read_section_headers+0x15c>
  80042164db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042164df:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042164e3:	0f b7 c0             	movzwl %ax,%eax
  80042164e6:	48 98                	cltq   
  80042164e8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042164ef:	ff 
  80042164f0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042164f4:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042164fb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042164ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216503:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216507:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421650b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421650f:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216516:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421651a:	48 01 c8             	add    %rcx,%rax
  800421651d:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216524:	48 89 c7             	mov    %rax,%rdi
  8004216527:	48 b8 92 6a 21 04 80 	movabs $0x8004216a92,%rax
  800421652e:	00 00 00 
  8004216531:	ff d0                	callq  *%rax
  8004216533:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216537:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421653b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421653f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216543:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004216547:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421654b:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216551:	48 29 c2             	sub    %rax,%rdx
  8004216554:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216558:	48 01 c2             	add    %rax,%rdx
  800421655b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421655f:	48 01 d0             	add    %rdx,%rax
  8004216562:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004216566:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421656d:	e9 04 05 00 00       	jmpq   8004216a76 <read_section_headers+0x723>
  8004216572:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216575:	48 98                	cltq   
  8004216577:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421657e:	ff 
  800421657f:	8b 00                	mov    (%rax),%eax
  8004216581:	89 c2                	mov    %eax,%edx
  8004216583:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004216587:	48 01 d0             	add    %rdx,%rax
  800421658a:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421658e:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216595:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421659a:	48 85 c0             	test   %rax,%rax
  800421659d:	74 35                	je     80042165d4 <read_section_headers+0x281>
  800421659f:	48 b9 26 f6 21 04 80 	movabs $0x800421f626,%rcx
  80042165a6:	00 00 00 
  80042165a9:	48 ba 3f f6 21 04 80 	movabs $0x800421f63f,%rdx
  80042165b0:	00 00 00 
  80042165b3:	be 8a 00 00 00       	mov    $0x8a,%esi
  80042165b8:	48 bf 54 f6 21 04 80 	movabs $0x800421f654,%rdi
  80042165bf:	00 00 00 
  80042165c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042165c7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042165ce:	00 00 00 
  80042165d1:	41 ff d0             	callq  *%r8
  80042165d4:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042165db:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042165df:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042165e3:	48 be eb f5 21 04 80 	movabs $0x800421f5eb,%rsi
  80042165ea:	00 00 00 
  80042165ed:	48 89 c7             	mov    %rax,%rdi
  80042165f0:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  80042165f7:	00 00 00 
  80042165fa:	ff d0                	callq  *%rax
  80042165fc:	85 c0                	test   %eax,%eax
  80042165fe:	0f 85 d8 00 00 00    	jne    80042166dc <read_section_headers+0x389>
  8004216604:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216607:	48 98                	cltq   
  8004216609:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216610:	ff 
  8004216611:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216615:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216618:	48 98                	cltq   
  800421661a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216621:	ff 
  8004216622:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216626:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421662d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216631:	48 01 c8             	add    %rcx,%rax
  8004216634:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421663b:	48 89 c7             	mov    %rax,%rdi
  800421663e:	48 b8 92 6a 21 04 80 	movabs $0x8004216a92,%rax
  8004216645:	00 00 00 
  8004216648:	ff d0                	callq  *%rax
  800421664a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421664d:	48 98                	cltq   
  800421664f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216656:	ff 
  8004216657:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421665b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421665e:	48 98                	cltq   
  8004216660:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216667:	ff 
  8004216668:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421666c:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004216670:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004216674:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  800421667a:	48 29 c2             	sub    %rax,%rdx
  800421667d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216681:	48 01 c2             	add    %rax,%rdx
  8004216684:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216688:	48 01 c2             	add    %rax,%rdx
  800421668b:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216692:	00 00 00 
  8004216695:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216699:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042166a0:	00 00 00 
  80042166a3:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042166a7:	48 89 c2             	mov    %rax,%rdx
  80042166aa:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042166b1:	00 00 00 
  80042166b4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042166b8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042166bb:	48 98                	cltq   
  80042166bd:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042166c4:	ff 
  80042166c5:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042166c9:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042166d0:	00 00 00 
  80042166d3:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042166d7:	e9 96 03 00 00       	jmpq   8004216a72 <read_section_headers+0x71f>
  80042166dc:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042166e0:	48 be f7 f5 21 04 80 	movabs $0x800421f5f7,%rsi
  80042166e7:	00 00 00 
  80042166ea:	48 89 c7             	mov    %rax,%rdi
  80042166ed:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  80042166f4:	00 00 00 
  80042166f7:	ff d0                	callq  *%rax
  80042166f9:	85 c0                	test   %eax,%eax
  80042166fb:	0f 85 de 00 00 00    	jne    80042167df <read_section_headers+0x48c>
  8004216701:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216704:	48 98                	cltq   
  8004216706:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421670d:	ff 
  800421670e:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216712:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216715:	48 98                	cltq   
  8004216717:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421671e:	ff 
  800421671f:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216723:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421672a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421672e:	48 01 c8             	add    %rcx,%rax
  8004216731:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216738:	48 89 c7             	mov    %rax,%rdi
  800421673b:	48 b8 92 6a 21 04 80 	movabs $0x8004216a92,%rax
  8004216742:	00 00 00 
  8004216745:	ff d0                	callq  *%rax
  8004216747:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421674a:	48 98                	cltq   
  800421674c:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216753:	ff 
  8004216754:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216758:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421675b:	48 98                	cltq   
  800421675d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216764:	ff 
  8004216765:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216769:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004216770:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004216777:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  800421677d:	48 29 c2             	sub    %rax,%rdx
  8004216780:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216784:	48 01 c2             	add    %rax,%rdx
  8004216787:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421678b:	48 01 c2             	add    %rax,%rdx
  800421678e:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216795:	00 00 00 
  8004216798:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421679c:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042167a3:	00 00 00 
  80042167a6:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042167aa:	48 89 c2             	mov    %rax,%rdx
  80042167ad:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042167b4:	00 00 00 
  80042167b7:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042167bb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042167be:	48 98                	cltq   
  80042167c0:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042167c7:	ff 
  80042167c8:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042167cc:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042167d3:	00 00 00 
  80042167d6:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042167da:	e9 93 02 00 00       	jmpq   8004216a72 <read_section_headers+0x71f>
  80042167df:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042167e3:	48 be 0f f6 21 04 80 	movabs $0x800421f60f,%rsi
  80042167ea:	00 00 00 
  80042167ed:	48 89 c7             	mov    %rax,%rdi
  80042167f0:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  80042167f7:	00 00 00 
  80042167fa:	ff d0                	callq  *%rax
  80042167fc:	85 c0                	test   %eax,%eax
  80042167fe:	0f 85 de 00 00 00    	jne    80042168e2 <read_section_headers+0x58f>
  8004216804:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216807:	48 98                	cltq   
  8004216809:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216810:	ff 
  8004216811:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216815:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216818:	48 98                	cltq   
  800421681a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216821:	ff 
  8004216822:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216826:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421682d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216831:	48 01 c8             	add    %rcx,%rax
  8004216834:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421683b:	48 89 c7             	mov    %rax,%rdi
  800421683e:	48 b8 92 6a 21 04 80 	movabs $0x8004216a92,%rax
  8004216845:	00 00 00 
  8004216848:	ff d0                	callq  *%rax
  800421684a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421684d:	48 98                	cltq   
  800421684f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216856:	ff 
  8004216857:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421685b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421685e:	48 98                	cltq   
  8004216860:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216867:	ff 
  8004216868:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421686c:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004216873:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  800421687a:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216880:	48 29 c2             	sub    %rax,%rdx
  8004216883:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216887:	48 01 c2             	add    %rax,%rdx
  800421688a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421688e:	48 01 c2             	add    %rax,%rdx
  8004216891:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216898:	00 00 00 
  800421689b:	48 89 50 68          	mov    %rdx,0x68(%rax)
  800421689f:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042168a6:	00 00 00 
  80042168a9:	48 8b 40 68          	mov    0x68(%rax),%rax
  80042168ad:	48 89 c2             	mov    %rax,%rdx
  80042168b0:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042168b7:	00 00 00 
  80042168ba:	48 89 50 70          	mov    %rdx,0x70(%rax)
  80042168be:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042168c1:	48 98                	cltq   
  80042168c3:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042168ca:	ff 
  80042168cb:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042168cf:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  80042168d6:	00 00 00 
  80042168d9:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042168dd:	e9 90 01 00 00       	jmpq   8004216a72 <read_section_headers+0x71f>
  80042168e2:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042168e6:	48 be 05 f6 21 04 80 	movabs $0x800421f605,%rsi
  80042168ed:	00 00 00 
  80042168f0:	48 89 c7             	mov    %rax,%rdi
  80042168f3:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  80042168fa:	00 00 00 
  80042168fd:	ff d0                	callq  *%rax
  80042168ff:	85 c0                	test   %eax,%eax
  8004216901:	75 65                	jne    8004216968 <read_section_headers+0x615>
  8004216903:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216906:	48 98                	cltq   
  8004216908:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421690f:	ff 
  8004216910:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216914:	48 89 c2             	mov    %rax,%rdx
  8004216917:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421691e:	00 00 00 
  8004216921:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216925:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421692c:	00 00 00 
  800421692f:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216933:	48 89 c2             	mov    %rax,%rdx
  8004216936:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421693d:	00 00 00 
  8004216940:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216944:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216947:	48 98                	cltq   
  8004216949:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216950:	ff 
  8004216951:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216955:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  800421695c:	00 00 00 
  800421695f:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216963:	e9 0a 01 00 00       	jmpq   8004216a72 <read_section_headers+0x71f>
  8004216968:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421696c:	48 be 1b f6 21 04 80 	movabs $0x800421f61b,%rsi
  8004216973:	00 00 00 
  8004216976:	48 89 c7             	mov    %rax,%rdi
  8004216979:	48 b8 fc 07 21 04 80 	movabs $0x80042107fc,%rax
  8004216980:	00 00 00 
  8004216983:	ff d0                	callq  *%rax
  8004216985:	85 c0                	test   %eax,%eax
  8004216987:	0f 85 e5 00 00 00    	jne    8004216a72 <read_section_headers+0x71f>
  800421698d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216990:	48 98                	cltq   
  8004216992:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216999:	ff 
  800421699a:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421699e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169a1:	48 98                	cltq   
  80042169a3:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169aa:	ff 
  80042169ab:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042169af:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042169b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169ba:	48 01 c8             	add    %rcx,%rax
  80042169bd:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042169c4:	48 89 c7             	mov    %rax,%rdi
  80042169c7:	48 b8 92 6a 21 04 80 	movabs $0x8004216a92,%rax
  80042169ce:	00 00 00 
  80042169d1:	ff d0                	callq  *%rax
  80042169d3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169d6:	48 98                	cltq   
  80042169d8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169df:	ff 
  80042169e0:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042169e4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169e7:	48 98                	cltq   
  80042169e9:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169f0:	ff 
  80042169f1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042169f5:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  80042169fc:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216a03:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216a09:	48 29 c2             	sub    %rax,%rdx
  8004216a0c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216a10:	48 01 c2             	add    %rax,%rdx
  8004216a13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a17:	48 01 c2             	add    %rax,%rdx
  8004216a1a:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216a21:	00 00 00 
  8004216a24:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216a2b:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216a32:	00 00 00 
  8004216a35:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216a3c:	48 89 c2             	mov    %rax,%rdx
  8004216a3f:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216a46:	00 00 00 
  8004216a49:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216a50:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a53:	48 98                	cltq   
  8004216a55:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a5c:	ff 
  8004216a5d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216a61:	48 b8 c0 36 23 04 80 	movabs $0x80042336c0,%rax
  8004216a68:	00 00 00 
  8004216a6b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216a72:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216a76:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a79:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216a7c:	0f 8c f0 fa ff ff    	jl     8004216572 <read_section_headers+0x21f>
  8004216a82:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216a86:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216a8d:	48 01 d0             	add    %rdx,%rax
  8004216a90:	c9                   	leaveq 
  8004216a91:	c3                   	retq   

0000008004216a92 <readseg>:
  8004216a92:	55                   	push   %rbp
  8004216a93:	48 89 e5             	mov    %rsp,%rbp
  8004216a96:	48 83 ec 30          	sub    $0x30,%rsp
  8004216a9a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216a9e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004216aa2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216aa6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216aaa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216aae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216ab2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216ab6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216aba:	48 01 d0             	add    %rdx,%rax
  8004216abd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216ac1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216ac5:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216aca:	48 85 c0             	test   %rax,%rax
  8004216acd:	74 35                	je     8004216b04 <readseg+0x72>
  8004216acf:	48 b9 65 f6 21 04 80 	movabs $0x800421f665,%rcx
  8004216ad6:	00 00 00 
  8004216ad9:	48 ba 3f f6 21 04 80 	movabs $0x800421f63f,%rdx
  8004216ae0:	00 00 00 
  8004216ae3:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216ae8:	48 bf 54 f6 21 04 80 	movabs $0x800421f654,%rdi
  8004216aef:	00 00 00 
  8004216af2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216af7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216afe:	00 00 00 
  8004216b01:	41 ff d0             	callq  *%r8
  8004216b04:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  8004216b0b:	ff 
  8004216b0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b10:	48 c1 e8 09          	shr    $0x9,%rax
  8004216b14:	48 83 c0 01          	add    $0x1,%rax
  8004216b18:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216b1c:	eb 3c                	jmp    8004216b5a <readseg+0xc8>
  8004216b1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216b22:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216b26:	48 89 d6             	mov    %rdx,%rsi
  8004216b29:	48 89 c7             	mov    %rax,%rdi
  8004216b2c:	48 b8 22 6c 21 04 80 	movabs $0x8004216c22,%rax
  8004216b33:	00 00 00 
  8004216b36:	ff d0                	callq  *%rax
  8004216b38:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004216b3f:	00 
  8004216b40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b44:	48 8b 00             	mov    (%rax),%rax
  8004216b47:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216b4e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b52:	48 89 10             	mov    %rdx,(%rax)
  8004216b55:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004216b5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216b5e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004216b62:	72 ba                	jb     8004216b1e <readseg+0x8c>
  8004216b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216b68:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216b6d:	48 89 c2             	mov    %rax,%rdx
  8004216b70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216b74:	48 01 d0             	add    %rdx,%rax
  8004216b77:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  8004216b7d:	76 2f                	jbe    8004216bae <readseg+0x11c>
  8004216b7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216b83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216b87:	48 89 d6             	mov    %rdx,%rsi
  8004216b8a:	48 89 c7             	mov    %rax,%rdi
  8004216b8d:	48 b8 22 6c 21 04 80 	movabs $0x8004216c22,%rax
  8004216b94:	00 00 00 
  8004216b97:	ff d0                	callq  *%rax
  8004216b99:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216b9d:	48 8b 00             	mov    (%rax),%rax
  8004216ba0:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216ba7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216bab:	48 89 10             	mov    %rdx,(%rax)
  8004216bae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216bb2:	48 8b 00             	mov    (%rax),%rax
  8004216bb5:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216bba:	48 85 c0             	test   %rax,%rax
  8004216bbd:	74 35                	je     8004216bf4 <readseg+0x162>
  8004216bbf:	48 b9 78 f6 21 04 80 	movabs $0x800421f678,%rcx
  8004216bc6:	00 00 00 
  8004216bc9:	48 ba 3f f6 21 04 80 	movabs $0x800421f63f,%rdx
  8004216bd0:	00 00 00 
  8004216bd3:	be da 00 00 00       	mov    $0xda,%esi
  8004216bd8:	48 bf 54 f6 21 04 80 	movabs $0x800421f654,%rdi
  8004216bdf:	00 00 00 
  8004216be2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216be7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216bee:	00 00 00 
  8004216bf1:	41 ff d0             	callq  *%r8
  8004216bf4:	c9                   	leaveq 
  8004216bf5:	c3                   	retq   

0000008004216bf6 <waitdisk>:
  8004216bf6:	55                   	push   %rbp
  8004216bf7:	48 89 e5             	mov    %rsp,%rbp
  8004216bfa:	48 83 ec 10          	sub    $0x10,%rsp
  8004216bfe:	90                   	nop
  8004216bff:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216c06:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216c09:	89 c2                	mov    %eax,%edx
  8004216c0b:	ec                   	in     (%dx),%al
  8004216c0c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004216c0f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216c13:	0f b6 c0             	movzbl %al,%eax
  8004216c16:	25 c0 00 00 00       	and    $0xc0,%eax
  8004216c1b:	83 f8 40             	cmp    $0x40,%eax
  8004216c1e:	75 df                	jne    8004216bff <waitdisk+0x9>
  8004216c20:	c9                   	leaveq 
  8004216c21:	c3                   	retq   

0000008004216c22 <readsect>:
  8004216c22:	55                   	push   %rbp
  8004216c23:	48 89 e5             	mov    %rsp,%rbp
  8004216c26:	48 83 ec 60          	sub    $0x60,%rsp
  8004216c2a:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004216c2e:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004216c32:	48 b8 f6 6b 21 04 80 	movabs $0x8004216bf6,%rax
  8004216c39:	00 00 00 
  8004216c3c:	ff d0                	callq  *%rax
  8004216c3e:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004216c45:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216c49:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216c4d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216c50:	ee                   	out    %al,(%dx)
  8004216c51:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216c55:	0f b6 c0             	movzbl %al,%eax
  8004216c58:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  8004216c5f:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004216c62:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004216c66:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216c69:	ee                   	out    %al,(%dx)
  8004216c6a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216c6e:	48 c1 e8 08          	shr    $0x8,%rax
  8004216c72:	0f b6 c0             	movzbl %al,%eax
  8004216c75:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004216c7c:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004216c7f:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004216c83:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216c86:	ee                   	out    %al,(%dx)
  8004216c87:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216c8b:	48 c1 e8 10          	shr    $0x10,%rax
  8004216c8f:	0f b6 c0             	movzbl %al,%eax
  8004216c92:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  8004216c99:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004216c9c:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004216ca0:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216ca3:	ee                   	out    %al,(%dx)
  8004216ca4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ca8:	48 c1 e8 18          	shr    $0x18,%rax
  8004216cac:	83 c8 e0             	or     $0xffffffe0,%eax
  8004216caf:	0f b6 c0             	movzbl %al,%eax
  8004216cb2:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  8004216cb9:	88 45 db             	mov    %al,-0x25(%rbp)
  8004216cbc:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004216cc0:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216cc3:	ee                   	out    %al,(%dx)
  8004216cc4:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  8004216ccb:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004216ccf:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216cd3:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216cd6:	ee                   	out    %al,(%dx)
  8004216cd7:	48 b8 f6 6b 21 04 80 	movabs $0x8004216bf6,%rax
  8004216cde:	00 00 00 
  8004216ce1:	ff d0                	callq  *%rax
  8004216ce3:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  8004216cea:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216cee:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004216cf2:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004216cf9:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216cfc:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004216d00:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004216d03:	48 89 ce             	mov    %rcx,%rsi
  8004216d06:	48 89 f7             	mov    %rsi,%rdi
  8004216d09:	89 c1                	mov    %eax,%ecx
  8004216d0b:	fc                   	cld    
  8004216d0c:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  8004216d0e:	89 c8                	mov    %ecx,%eax
  8004216d10:	48 89 fe             	mov    %rdi,%rsi
  8004216d13:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004216d17:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004216d1a:	c9                   	leaveq 
  8004216d1b:	c3                   	retq   
  8004216d1c:	0f 1f 40 00          	nopl   0x0(%rax)

0000008004216d20 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216d20:	fa                   	cli    
	xorw    %ax, %ax
  8004216d21:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004216d23:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216d25:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216d27:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216d29:	0f 01 16             	lgdt   (%rsi)
  8004216d2c:	e0 70                	loopne 8004216d9e <start64+0x10>
	movl    %cr0, %eax
  8004216d2e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216d31:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004216d35:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004216d38:	ea                   	(bad)  
  8004216d39:	1d                   	.byte 0x1d
  8004216d3a:	70 08                	jo     8004216d44 <start32+0x7>
	...

0000008004216d3d <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  8004216d3d:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216d41:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216d43:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216d45:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216d47:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216d4b:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216d4d:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  8004216d4f:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  8004216d54:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  8004216d57:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421de1e <etext+0x111b>
	movl    %cr0, %eax
  8004216d5e:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216d61:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  8004216d64:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  8004216d67:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  8004216d6c:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  8004216d6f:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  8004216d74:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  8004216d76:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  8004216d7a:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  8004216d7c:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  8004216d7f:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  8004216d84:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  8004216d87:	ea                   	(bad)  
  8004216d88:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004216d89:	70 00                	jo     8004216d8b <start32+0x4e>
  8004216d8b:	00 08                	add    %cl,(%rax)
	...

0000008004216d8e <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  8004216d8e:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216d92:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216d94:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216d96:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216d98:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216d9c:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216d9e:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004216da0:	48 a1 e0 a5 6d 04 80 	movabs 0x80046da5e0,%rax
  8004216da7:	00 00 00 
	movq    %rax,%rsp
  8004216daa:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  8004216dad:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  8004216db4:	48 b8 03 04 20 04 80 	movabs $0x8004200403,%rax
  8004216dbb:	00 00 00 
	call    *%rax
  8004216dbe:	ff d0                	callq  *%rax

0000008004216dc0 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004216dc0:	eb fe                	jmp    8004216dc0 <spin>
  8004216dc2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004216dc8 <gdt>:
	...
  8004216dd0:	ff                   	(bad)  
  8004216dd1:	ff 00                	incl   (%rax)
  8004216dd3:	00 00                	add    %al,(%rax)
  8004216dd5:	9a                   	(bad)  
  8004216dd6:	af                   	scas   %es:(%rdi),%eax
  8004216dd7:	00 ff                	add    %bh,%bh
  8004216dd9:	ff 00                	incl   (%rax)
  8004216ddb:	00 00                	add    %al,(%rax)
  8004216ddd:	92                   	xchg   %eax,%edx
  8004216dde:	af                   	scas   %es:(%rdi),%eax
	...

0000008004216de0 <gdtdesc>:
  8004216de0:	17                   	(bad)  
  8004216de1:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  8004216de7:	90                   	nop

0000008004216de8 <gdt32>:
	...
  8004216df0:	ff                   	(bad)  
  8004216df1:	ff 00                	incl   (%rax)
  8004216df3:	00 00                	add    %al,(%rax)
  8004216df5:	9a                   	(bad)  
  8004216df6:	cf                   	iret   
  8004216df7:	00 ff                	add    %bh,%bh
  8004216df9:	ff 00                	incl   (%rax)
  8004216dfb:	00 00                	add    %al,(%rax)
  8004216dfd:	92                   	xchg   %eax,%edx
  8004216dfe:	cf                   	iret   
	...

0000008004216e00 <gdt32desc>:
  8004216e00:	17                   	(bad)  
  8004216e01:	00 c8                	add    %cl,%al
  8004216e03:	70 00                	jo     8004216e05 <gdt32desc+0x5>
	...

0000008004216e06 <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  8004216e06:	90                   	nop

0000008004216e07 <sum>:
  8004216e07:	55                   	push   %rbp
  8004216e08:	48 89 e5             	mov    %rsp,%rbp
  8004216e0b:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004216e0f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216e13:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004216e16:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004216e1d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004216e24:	eb 1a                	jmp    8004216e40 <sum+0x39>
  8004216e26:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216e29:	48 63 d0             	movslq %eax,%rdx
  8004216e2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216e30:	48 01 d0             	add    %rdx,%rax
  8004216e33:	0f b6 00             	movzbl (%rax),%eax
  8004216e36:	0f b6 c0             	movzbl %al,%eax
  8004216e39:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004216e3c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004216e40:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216e43:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004216e46:	7c de                	jl     8004216e26 <sum+0x1f>
  8004216e48:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004216e4b:	c9                   	leaveq 
  8004216e4c:	c3                   	retq   

0000008004216e4d <mpsearch1>:
  8004216e4d:	55                   	push   %rbp
  8004216e4e:	48 89 e5             	mov    %rsp,%rbp
  8004216e51:	48 83 ec 40          	sub    $0x40,%rsp
  8004216e55:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004216e59:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004216e5c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216e60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216e64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216e68:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216e6c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004216e6f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216e72:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004216e79:	00 00 00 
  8004216e7c:	48 8b 00             	mov    (%rax),%rax
  8004216e7f:	48 39 c2             	cmp    %rax,%rdx
  8004216e82:	72 32                	jb     8004216eb6 <mpsearch1+0x69>
  8004216e84:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216e88:	48 89 c1             	mov    %rax,%rcx
  8004216e8b:	48 ba 98 f6 21 04 80 	movabs $0x800421f698,%rdx
  8004216e92:	00 00 00 
  8004216e95:	be 74 00 00 00       	mov    $0x74,%esi
  8004216e9a:	48 bf bb f6 21 04 80 	movabs $0x800421f6bb,%rdi
  8004216ea1:	00 00 00 
  8004216ea4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216ea9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216eb0:	00 00 00 
  8004216eb3:	41 ff d0             	callq  *%r8
  8004216eb6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216ebd:	00 00 00 
  8004216ec0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216ec4:	48 01 d0             	add    %rdx,%rax
  8004216ec7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216ecb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004216ece:	48 63 d0             	movslq %eax,%rdx
  8004216ed1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216ed5:	48 01 d0             	add    %rdx,%rax
  8004216ed8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004216edc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216ee0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216ee4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004216ee7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216eea:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004216ef1:	00 00 00 
  8004216ef4:	48 8b 00             	mov    (%rax),%rax
  8004216ef7:	48 39 c2             	cmp    %rax,%rdx
  8004216efa:	72 32                	jb     8004216f2e <mpsearch1+0xe1>
  8004216efc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216f00:	48 89 c1             	mov    %rax,%rcx
  8004216f03:	48 ba 98 f6 21 04 80 	movabs $0x800421f698,%rdx
  8004216f0a:	00 00 00 
  8004216f0d:	be 74 00 00 00       	mov    $0x74,%esi
  8004216f12:	48 bf bb f6 21 04 80 	movabs $0x800421f6bb,%rdi
  8004216f19:	00 00 00 
  8004216f1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216f21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216f28:	00 00 00 
  8004216f2b:	41 ff d0             	callq  *%r8
  8004216f2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004216f35:	00 00 00 
  8004216f38:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216f3c:	48 01 d0             	add    %rdx,%rax
  8004216f3f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004216f43:	eb 4d                	jmp    8004216f92 <mpsearch1+0x145>
  8004216f45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216f49:	ba 04 00 00 00       	mov    $0x4,%edx
  8004216f4e:	48 be ce f6 21 04 80 	movabs $0x800421f6ce,%rsi
  8004216f55:	00 00 00 
  8004216f58:	48 89 c7             	mov    %rax,%rdi
  8004216f5b:	48 b8 09 0b 21 04 80 	movabs $0x8004210b09,%rax
  8004216f62:	00 00 00 
  8004216f65:	ff d0                	callq  *%rax
  8004216f67:	85 c0                	test   %eax,%eax
  8004216f69:	75 22                	jne    8004216f8d <mpsearch1+0x140>
  8004216f6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216f6f:	be 10 00 00 00       	mov    $0x10,%esi
  8004216f74:	48 89 c7             	mov    %rax,%rdi
  8004216f77:	48 b8 07 6e 21 04 80 	movabs $0x8004216e07,%rax
  8004216f7e:	00 00 00 
  8004216f81:	ff d0                	callq  *%rax
  8004216f83:	84 c0                	test   %al,%al
  8004216f85:	75 06                	jne    8004216f8d <mpsearch1+0x140>
  8004216f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216f8b:	eb 14                	jmp    8004216fa1 <mpsearch1+0x154>
  8004216f8d:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  8004216f92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216f96:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004216f9a:	72 a9                	jb     8004216f45 <mpsearch1+0xf8>
  8004216f9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216fa1:	c9                   	leaveq 
  8004216fa2:	c3                   	retq   

0000008004216fa3 <mpsearch>:
  8004216fa3:	55                   	push   %rbp
  8004216fa4:	48 89 e5             	mov    %rsp,%rbp
  8004216fa7:	48 83 ec 30          	sub    $0x30,%rsp
  8004216fab:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  8004216fb2:	00 
  8004216fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216fb7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004216fbb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004216fbe:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216fc1:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004216fc8:	00 00 00 
  8004216fcb:	48 8b 00             	mov    (%rax),%rax
  8004216fce:	48 39 c2             	cmp    %rax,%rdx
  8004216fd1:	72 32                	jb     8004217005 <mpsearch+0x62>
  8004216fd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216fd7:	48 89 c1             	mov    %rax,%rcx
  8004216fda:	48 ba 98 f6 21 04 80 	movabs $0x800421f698,%rdx
  8004216fe1:	00 00 00 
  8004216fe4:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004216fe9:	48 bf bb f6 21 04 80 	movabs $0x800421f6bb,%rdi
  8004216ff0:	00 00 00 
  8004216ff3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216ff8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216fff:	00 00 00 
  8004217002:	41 ff d0             	callq  *%r8
  8004217005:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421700c:	00 00 00 
  800421700f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217013:	48 01 d0             	add    %rdx,%rax
  8004217016:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421701a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421701e:	48 83 c0 0e          	add    $0xe,%rax
  8004217022:	0f b7 00             	movzwl (%rax),%eax
  8004217025:	0f b7 c0             	movzwl %ax,%eax
  8004217028:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421702b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421702f:	74 2c                	je     800421705d <mpsearch+0xba>
  8004217031:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  8004217035:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217038:	be 00 04 00 00       	mov    $0x400,%esi
  800421703d:	48 89 c7             	mov    %rax,%rdi
  8004217040:	48 b8 4d 6e 21 04 80 	movabs $0x8004216e4d,%rax
  8004217047:	00 00 00 
  800421704a:	ff d0                	callq  *%rax
  800421704c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217050:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217055:	74 49                	je     80042170a0 <mpsearch+0xfd>
  8004217057:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421705b:	eb 59                	jmp    80042170b6 <mpsearch+0x113>
  800421705d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217061:	48 83 c0 13          	add    $0x13,%rax
  8004217065:	0f b7 00             	movzwl (%rax),%eax
  8004217068:	0f b7 c0             	movzwl %ax,%eax
  800421706b:	c1 e0 0a             	shl    $0xa,%eax
  800421706e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217071:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217074:	2d 00 04 00 00       	sub    $0x400,%eax
  8004217079:	89 c0                	mov    %eax,%eax
  800421707b:	be 00 04 00 00       	mov    $0x400,%esi
  8004217080:	48 89 c7             	mov    %rax,%rdi
  8004217083:	48 b8 4d 6e 21 04 80 	movabs $0x8004216e4d,%rax
  800421708a:	00 00 00 
  800421708d:	ff d0                	callq  *%rax
  800421708f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217093:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217098:	74 06                	je     80042170a0 <mpsearch+0xfd>
  800421709a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421709e:	eb 16                	jmp    80042170b6 <mpsearch+0x113>
  80042170a0:	be 00 00 01 00       	mov    $0x10000,%esi
  80042170a5:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  80042170aa:	48 b8 4d 6e 21 04 80 	movabs $0x8004216e4d,%rax
  80042170b1:	00 00 00 
  80042170b4:	ff d0                	callq  *%rax
  80042170b6:	c9                   	leaveq 
  80042170b7:	c3                   	retq   

00000080042170b8 <mpconfig>:
  80042170b8:	55                   	push   %rbp
  80042170b9:	48 89 e5             	mov    %rsp,%rbp
  80042170bc:	48 83 ec 30          	sub    $0x30,%rsp
  80042170c0:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042170c4:	48 b8 a3 6f 21 04 80 	movabs $0x8004216fa3,%rax
  80042170cb:	00 00 00 
  80042170ce:	ff d0                	callq  *%rax
  80042170d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042170d4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042170d9:	75 0a                	jne    80042170e5 <mpconfig+0x2d>
  80042170db:	b8 00 00 00 00       	mov    $0x0,%eax
  80042170e0:	e9 f6 01 00 00       	jmpq   80042172db <mpconfig+0x223>
  80042170e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042170e9:	8b 40 04             	mov    0x4(%rax),%eax
  80042170ec:	85 c0                	test   %eax,%eax
  80042170ee:	74 0c                	je     80042170fc <mpconfig+0x44>
  80042170f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042170f4:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  80042170f8:	84 c0                	test   %al,%al
  80042170fa:	74 25                	je     8004217121 <mpconfig+0x69>
  80042170fc:	48 bf d8 f6 21 04 80 	movabs $0x800421f6d8,%rdi
  8004217103:	00 00 00 
  8004217106:	b8 00 00 00 00       	mov    $0x0,%eax
  800421710b:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004217112:	00 00 00 
  8004217115:	ff d2                	callq  *%rdx
  8004217117:	b8 00 00 00 00       	mov    $0x0,%eax
  800421711c:	e9 ba 01 00 00       	jmpq   80042172db <mpconfig+0x223>
  8004217121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217125:	8b 40 04             	mov    0x4(%rax),%eax
  8004217128:	89 c0                	mov    %eax,%eax
  800421712a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421712e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217132:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217136:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217139:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421713c:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004217143:	00 00 00 
  8004217146:	48 8b 00             	mov    (%rax),%rax
  8004217149:	48 39 c2             	cmp    %rax,%rdx
  800421714c:	72 32                	jb     8004217180 <mpconfig+0xc8>
  800421714e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217152:	48 89 c1             	mov    %rax,%rcx
  8004217155:	48 ba 98 f6 21 04 80 	movabs $0x800421f698,%rdx
  800421715c:	00 00 00 
  800421715f:	be ad 00 00 00       	mov    $0xad,%esi
  8004217164:	48 bf bb f6 21 04 80 	movabs $0x800421f6bb,%rdi
  800421716b:	00 00 00 
  800421716e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217173:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421717a:	00 00 00 
  800421717d:	41 ff d0             	callq  *%r8
  8004217180:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217187:	00 00 00 
  800421718a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421718e:	48 01 d0             	add    %rdx,%rax
  8004217191:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217195:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217199:	ba 04 00 00 00       	mov    $0x4,%edx
  800421719e:	48 be 05 f7 21 04 80 	movabs $0x800421f705,%rsi
  80042171a5:	00 00 00 
  80042171a8:	48 89 c7             	mov    %rax,%rdi
  80042171ab:	48 b8 09 0b 21 04 80 	movabs $0x8004210b09,%rax
  80042171b2:	00 00 00 
  80042171b5:	ff d0                	callq  *%rax
  80042171b7:	85 c0                	test   %eax,%eax
  80042171b9:	74 25                	je     80042171e0 <mpconfig+0x128>
  80042171bb:	48 bf 10 f7 21 04 80 	movabs $0x800421f710,%rdi
  80042171c2:	00 00 00 
  80042171c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042171ca:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042171d1:	00 00 00 
  80042171d4:	ff d2                	callq  *%rdx
  80042171d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042171db:	e9 fb 00 00 00       	jmpq   80042172db <mpconfig+0x223>
  80042171e0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042171e4:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  80042171e8:	0f b7 d0             	movzwl %ax,%edx
  80042171eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042171ef:	89 d6                	mov    %edx,%esi
  80042171f1:	48 89 c7             	mov    %rax,%rdi
  80042171f4:	48 b8 07 6e 21 04 80 	movabs $0x8004216e07,%rax
  80042171fb:	00 00 00 
  80042171fe:	ff d0                	callq  *%rax
  8004217200:	84 c0                	test   %al,%al
  8004217202:	74 25                	je     8004217229 <mpconfig+0x171>
  8004217204:	48 bf 48 f7 21 04 80 	movabs $0x800421f748,%rdi
  800421720b:	00 00 00 
  800421720e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217213:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421721a:	00 00 00 
  800421721d:	ff d2                	callq  *%rdx
  800421721f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217224:	e9 b2 00 00 00       	jmpq   80042172db <mpconfig+0x223>
  8004217229:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421722d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217231:	3c 01                	cmp    $0x1,%al
  8004217233:	74 3b                	je     8004217270 <mpconfig+0x1b8>
  8004217235:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217239:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  800421723d:	3c 04                	cmp    $0x4,%al
  800421723f:	74 2f                	je     8004217270 <mpconfig+0x1b8>
  8004217241:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217245:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217249:	0f b6 c0             	movzbl %al,%eax
  800421724c:	89 c6                	mov    %eax,%esi
  800421724e:	48 bf 70 f7 21 04 80 	movabs $0x800421f770,%rdi
  8004217255:	00 00 00 
  8004217258:	b8 00 00 00 00       	mov    $0x0,%eax
  800421725d:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004217264:	00 00 00 
  8004217267:	ff d2                	callq  *%rdx
  8004217269:	b8 00 00 00 00       	mov    $0x0,%eax
  800421726e:	eb 6b                	jmp    80042172db <mpconfig+0x223>
  8004217270:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217274:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  8004217278:	0f b7 c0             	movzwl %ax,%eax
  800421727b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421727f:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  8004217283:	0f b7 ca             	movzwl %dx,%ecx
  8004217286:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421728a:	48 01 ca             	add    %rcx,%rdx
  800421728d:	89 c6                	mov    %eax,%esi
  800421728f:	48 89 d7             	mov    %rdx,%rdi
  8004217292:	48 b8 07 6e 21 04 80 	movabs $0x8004216e07,%rax
  8004217299:	00 00 00 
  800421729c:	ff d0                	callq  *%rax
  800421729e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042172a2:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  80042172a6:	38 d0                	cmp    %dl,%al
  80042172a8:	74 22                	je     80042172cc <mpconfig+0x214>
  80042172aa:	48 bf 90 f7 21 04 80 	movabs $0x800421f790,%rdi
  80042172b1:	00 00 00 
  80042172b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042172b9:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042172c0:	00 00 00 
  80042172c3:	ff d2                	callq  *%rdx
  80042172c5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042172ca:	eb 0f                	jmp    80042172db <mpconfig+0x223>
  80042172cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042172d0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042172d4:	48 89 10             	mov    %rdx,(%rax)
  80042172d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042172db:	c9                   	leaveq 
  80042172dc:	c3                   	retq   

00000080042172dd <mp_init>:
  80042172dd:	55                   	push   %rbp
  80042172de:	48 89 e5             	mov    %rsp,%rbp
  80042172e1:	53                   	push   %rbx
  80042172e2:	48 83 ec 58          	sub    $0x58,%rsp
  80042172e6:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  80042172ed:	00 00 00 
  80042172f0:	48 bb 20 c0 6d 04 80 	movabs $0x80046dc020,%rbx
  80042172f7:	00 00 00 
  80042172fa:	48 89 18             	mov    %rbx,(%rax)
  80042172fd:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217301:	48 89 c7             	mov    %rax,%rdi
  8004217304:	48 b8 b8 70 21 04 80 	movabs $0x80042170b8,%rax
  800421730b:	00 00 00 
  800421730e:	ff d0                	callq  *%rax
  8004217310:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217314:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217319:	75 05                	jne    8004217320 <mp_init+0x43>
  800421731b:	e9 d2 03 00 00       	jmpq   80042176f2 <mp_init+0x415>
  8004217320:	48 b8 00 c0 6d 04 80 	movabs $0x80046dc000,%rax
  8004217327:	00 00 00 
  800421732a:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217330:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217334:	8b 40 24             	mov    0x24(%rax),%eax
  8004217337:	89 c2                	mov    %eax,%edx
  8004217339:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  8004217340:	00 00 00 
  8004217343:	48 89 10             	mov    %rdx,(%rax)
  8004217346:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421734a:	48 83 c0 2c          	add    $0x2c,%rax
  800421734e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004217352:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217359:	e9 17 02 00 00       	jmpq   8004217575 <mp_init+0x298>
  800421735e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217362:	0f b6 00             	movzbl (%rax),%eax
  8004217365:	0f b6 c0             	movzbl %al,%eax
  8004217368:	85 c0                	test   %eax,%eax
  800421736a:	74 16                	je     8004217382 <mp_init+0xa5>
  800421736c:	85 c0                	test   %eax,%eax
  800421736e:	0f 88 b8 01 00 00    	js     800421752c <mp_init+0x24f>
  8004217374:	83 f8 04             	cmp    $0x4,%eax
  8004217377:	0f 8f af 01 00 00    	jg     800421752c <mp_init+0x24f>
  800421737d:	e9 a3 01 00 00       	jmpq   8004217525 <mp_init+0x248>
  8004217382:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217386:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421738a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421738e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217392:	0f b6 c0             	movzbl %al,%eax
  8004217395:	83 e0 02             	and    $0x2,%eax
  8004217398:	85 c0                	test   %eax,%eax
  800421739a:	74 51                	je     80042173ed <mp_init+0x110>
  800421739c:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042173a3:	00 00 00 
  80042173a6:	8b 00                	mov    (%rax),%eax
  80042173a8:	48 98                	cltq   
  80042173aa:	48 c1 e0 03          	shl    $0x3,%rax
  80042173ae:	48 89 c2             	mov    %rax,%rdx
  80042173b1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042173b5:	48 01 d0             	add    %rdx,%rax
  80042173b8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042173bf:	00 00 00 
  80042173c2:	48 01 c2             	add    %rax,%rdx
  80042173c5:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  80042173cc:	00 00 00 
  80042173cf:	48 89 10             	mov    %rdx,(%rax)
  80042173d2:	48 bf bd f7 21 04 80 	movabs $0x800421f7bd,%rdi
  80042173d9:	00 00 00 
  80042173dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173e1:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042173e8:	00 00 00 
  80042173eb:	ff d2                	callq  *%rdx
  80042173ed:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042173f4:	00 00 00 
  80042173f7:	8b 00                	mov    (%rax),%eax
  80042173f9:	83 f8 03             	cmp    $0x3,%eax
  80042173fc:	0f 8f f4 00 00 00    	jg     80042174f6 <mp_init+0x219>
  8004217402:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217406:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  800421740a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421740e:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217412:	0f b6 f0             	movzbl %al,%esi
  8004217415:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217419:	8b 78 08             	mov    0x8(%rax),%edi
  800421741c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217420:	4c 8d 50 04          	lea    0x4(%rax),%r10
  8004217424:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217428:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  800421742c:	0f b6 c8             	movzbl %al,%ecx
  800421742f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217433:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217437:	0f b6 d0             	movzbl %al,%edx
  800421743a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421743e:	0f b6 00             	movzbl (%rax),%eax
  8004217441:	0f b6 c0             	movzbl %al,%eax
  8004217444:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004217449:	89 34 24             	mov    %esi,(%rsp)
  800421744c:	41 89 f9             	mov    %edi,%r9d
  800421744f:	4d 89 d0             	mov    %r10,%r8
  8004217452:	89 c6                	mov    %eax,%esi
  8004217454:	48 bf d0 f7 21 04 80 	movabs $0x800421f7d0,%rdi
  800421745b:	00 00 00 
  800421745e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217463:	49 ba 14 9c 20 04 80 	movabs $0x8004209c14,%r10
  800421746a:	00 00 00 
  800421746d:	41 ff d2             	callq  *%r10
  8004217470:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217474:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  8004217478:	0f b6 c0             	movzbl %al,%eax
  800421747b:	83 e0 01             	and    $0x1,%eax
  800421747e:	85 c0                	test   %eax,%eax
  8004217480:	74 57                	je     80042174d9 <mp_init+0x1fc>
  8004217482:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217489:	00 00 00 
  800421748c:	8b 30                	mov    (%rax),%esi
  800421748e:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217495:	00 00 00 
  8004217498:	8b 00                	mov    (%rax),%eax
  800421749a:	89 c2                	mov    %eax,%edx
  800421749c:	48 b9 20 c0 6d 04 80 	movabs $0x80046dc020,%rcx
  80042174a3:	00 00 00 
  80042174a6:	48 63 c6             	movslq %esi,%rax
  80042174a9:	48 c1 e0 03          	shl    $0x3,%rax
  80042174ad:	48 89 c6             	mov    %rax,%rsi
  80042174b0:	48 c1 e6 04          	shl    $0x4,%rsi
  80042174b4:	48 01 f0             	add    %rsi,%rax
  80042174b7:	48 01 c8             	add    %rcx,%rax
  80042174ba:	88 10                	mov    %dl,(%rax)
  80042174bc:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042174c3:	00 00 00 
  80042174c6:	8b 00                	mov    (%rax),%eax
  80042174c8:	8d 50 01             	lea    0x1(%rax),%edx
  80042174cb:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  80042174d2:	00 00 00 
  80042174d5:	89 10                	mov    %edx,(%rax)
  80042174d7:	eb 45                	jmp    800421751e <mp_init+0x241>
  80042174d9:	48 bf 20 f8 21 04 80 	movabs $0x800421f820,%rdi
  80042174e0:	00 00 00 
  80042174e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174e8:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042174ef:	00 00 00 
  80042174f2:	ff d2                	callq  *%rdx
  80042174f4:	eb 28                	jmp    800421751e <mp_init+0x241>
  80042174f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042174fa:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042174fe:	0f b6 c0             	movzbl %al,%eax
  8004217501:	89 c6                	mov    %eax,%esi
  8004217503:	48 bf 50 f8 21 04 80 	movabs $0x800421f850,%rdi
  800421750a:	00 00 00 
  800421750d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217512:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004217519:	00 00 00 
  800421751c:	ff d2                	callq  *%rdx
  800421751e:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  8004217523:	eb 4c                	jmp    8004217571 <mp_init+0x294>
  8004217525:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  800421752a:	eb 45                	jmp    8004217571 <mp_init+0x294>
  800421752c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217530:	0f b6 00             	movzbl (%rax),%eax
  8004217533:	0f b6 c0             	movzbl %al,%eax
  8004217536:	89 c6                	mov    %eax,%esi
  8004217538:	48 bf 78 f8 21 04 80 	movabs $0x800421f878,%rdi
  800421753f:	00 00 00 
  8004217542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217547:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421754e:	00 00 00 
  8004217551:	ff d2                	callq  *%rdx
  8004217553:	48 b8 00 c0 6d 04 80 	movabs $0x80046dc000,%rax
  800421755a:	00 00 00 
  800421755d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217563:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217567:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  800421756b:	0f b7 c0             	movzwl %ax,%eax
  800421756e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217571:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  8004217575:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217579:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  800421757d:	0f b7 c0             	movzwl %ax,%eax
  8004217580:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  8004217583:	0f 87 d5 fd ff ff    	ja     800421735e <mp_init+0x81>
  8004217589:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217590:	eb 53                	jmp    80042175e5 <mp_init+0x308>
  8004217592:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004217599:	00 00 00 
  800421759c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421759f:	48 c1 e0 03          	shl    $0x3,%rax
  80042175a3:	48 89 c1             	mov    %rax,%rcx
  80042175a6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042175aa:	48 01 c8             	add    %rcx,%rax
  80042175ad:	48 01 d0             	add    %rdx,%rax
  80042175b0:	48 83 c0 70          	add    $0x70,%rax
  80042175b4:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  80042175b8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042175bf:	00 00 00 
  80042175c2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042175c5:	48 c1 e0 03          	shl    $0x3,%rax
  80042175c9:	48 89 c1             	mov    %rax,%rcx
  80042175cc:	48 c1 e1 04          	shl    $0x4,%rcx
  80042175d0:	48 01 c8             	add    %rcx,%rax
  80042175d3:	48 01 d0             	add    %rdx,%rax
  80042175d6:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  80042175da:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042175e1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  80042175e5:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  80042175e9:	76 a7                	jbe    8004217592 <mp_init+0x2b5>
  80042175eb:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  80042175f2:	00 00 00 
  80042175f5:	48 8b 00             	mov    (%rax),%rax
  80042175f8:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  80042175ff:	48 b8 00 c0 6d 04 80 	movabs $0x80046dc000,%rax
  8004217606:	00 00 00 
  8004217609:	8b 00                	mov    (%rax),%eax
  800421760b:	85 c0                	test   %eax,%eax
  800421760d:	75 41                	jne    8004217650 <mp_init+0x373>
  800421760f:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217616:	00 00 00 
  8004217619:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  800421761f:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  8004217626:	00 00 00 
  8004217629:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217630:	48 bf 98 f8 21 04 80 	movabs $0x800421f898,%rdi
  8004217637:	00 00 00 
  800421763a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421763f:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004217646:	00 00 00 
  8004217649:	ff d2                	callq  *%rdx
  800421764b:	e9 a2 00 00 00       	jmpq   80042176f2 <mp_init+0x415>
  8004217650:	48 b8 48 c2 6d 04 80 	movabs $0x80046dc248,%rax
  8004217657:	00 00 00 
  800421765a:	8b 10                	mov    (%rax),%edx
  800421765c:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  8004217663:	00 00 00 
  8004217666:	48 8b 00             	mov    (%rax),%rax
  8004217669:	0f b6 00             	movzbl (%rax),%eax
  800421766c:	0f b6 c0             	movzbl %al,%eax
  800421766f:	89 c6                	mov    %eax,%esi
  8004217671:	48 bf c4 f8 21 04 80 	movabs $0x800421f8c4,%rdi
  8004217678:	00 00 00 
  800421767b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217680:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  8004217687:	00 00 00 
  800421768a:	ff d1                	callq  *%rcx
  800421768c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004217690:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004217694:	84 c0                	test   %al,%al
  8004217696:	74 5a                	je     80042176f2 <mp_init+0x415>
  8004217698:	48 bf e8 f8 21 04 80 	movabs $0x800421f8e8,%rdi
  800421769f:	00 00 00 
  80042176a2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176a7:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042176ae:	00 00 00 
  80042176b1:	ff d2                	callq  *%rdx
  80042176b3:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  80042176ba:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042176be:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042176c2:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042176c5:	ee                   	out    %al,(%dx)
  80042176c6:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042176cd:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042176d0:	89 c2                	mov    %eax,%edx
  80042176d2:	ec                   	in     (%dx),%al
  80042176d3:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042176d6:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042176da:	83 c8 01             	or     $0x1,%eax
  80042176dd:	0f b6 c0             	movzbl %al,%eax
  80042176e0:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  80042176e7:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042176ea:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  80042176ee:	8b 55 bc             	mov    -0x44(%rbp),%edx
  80042176f1:	ee                   	out    %al,(%dx)
  80042176f2:	48 83 c4 58          	add    $0x58,%rsp
  80042176f6:	5b                   	pop    %rbx
  80042176f7:	5d                   	pop    %rbp
  80042176f8:	c3                   	retq   

00000080042176f9 <lapicw>:
  80042176f9:	55                   	push   %rbp
  80042176fa:	48 89 e5             	mov    %rsp,%rbp
  80042176fd:	48 83 ec 08          	sub    $0x8,%rsp
  8004217701:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217704:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004217707:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421770e:	00 00 00 
  8004217711:	48 8b 00             	mov    (%rax),%rax
  8004217714:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004217717:	48 63 d2             	movslq %edx,%rdx
  800421771a:	48 c1 e2 02          	shl    $0x2,%rdx
  800421771e:	48 01 c2             	add    %rax,%rdx
  8004217721:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217724:	89 02                	mov    %eax,(%rdx)
  8004217726:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421772d:	00 00 00 
  8004217730:	48 8b 00             	mov    (%rax),%rax
  8004217733:	48 83 c0 20          	add    $0x20,%rax
  8004217737:	8b 00                	mov    (%rax),%eax
  8004217739:	c9                   	leaveq 
  800421773a:	c3                   	retq   

000000800421773b <lapic_init>:
  800421773b:	55                   	push   %rbp
  800421773c:	48 89 e5             	mov    %rsp,%rbp
  800421773f:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  8004217746:	00 00 00 
  8004217749:	48 8b 00             	mov    (%rax),%rax
  800421774c:	48 85 c0             	test   %rax,%rax
  800421774f:	75 05                	jne    8004217756 <lapic_init+0x1b>
  8004217751:	e9 da 01 00 00       	jmpq   8004217930 <lapic_init+0x1f5>
  8004217756:	48 b8 00 d0 71 04 80 	movabs $0x800471d000,%rax
  800421775d:	00 00 00 
  8004217760:	48 8b 00             	mov    (%rax),%rax
  8004217763:	be 00 10 00 00       	mov    $0x1000,%esi
  8004217768:	48 89 c7             	mov    %rax,%rdi
  800421776b:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  8004217772:	00 00 00 
  8004217775:	ff d0                	callq  *%rax
  8004217777:	48 ba 08 d0 71 04 80 	movabs $0x800471d008,%rdx
  800421777e:	00 00 00 
  8004217781:	48 89 02             	mov    %rax,(%rdx)
  8004217784:	be 27 01 00 00       	mov    $0x127,%esi
  8004217789:	bf 3c 00 00 00       	mov    $0x3c,%edi
  800421778e:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217795:	00 00 00 
  8004217798:	ff d0                	callq  *%rax
  800421779a:	be 0b 00 00 00       	mov    $0xb,%esi
  800421779f:	bf f8 00 00 00       	mov    $0xf8,%edi
  80042177a4:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  80042177ab:	00 00 00 
  80042177ae:	ff d0                	callq  *%rax
  80042177b0:	be 20 00 02 00       	mov    $0x20020,%esi
  80042177b5:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042177ba:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  80042177c1:	00 00 00 
  80042177c4:	ff d0                	callq  *%rax
  80042177c6:	be 80 96 98 00       	mov    $0x989680,%esi
  80042177cb:	bf e0 00 00 00       	mov    $0xe0,%edi
  80042177d0:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  80042177d7:	00 00 00 
  80042177da:	ff d0                	callq  *%rax
  80042177dc:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  80042177e3:	00 00 00 
  80042177e6:	ff d0                	callq  *%rax
  80042177e8:	48 98                	cltq   
  80042177ea:	48 c1 e0 03          	shl    $0x3,%rax
  80042177ee:	48 89 c2             	mov    %rax,%rdx
  80042177f1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042177f5:	48 01 d0             	add    %rdx,%rax
  80042177f8:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  80042177ff:	00 00 00 
  8004217802:	48 01 c2             	add    %rax,%rdx
  8004217805:	48 b8 40 c2 6d 04 80 	movabs $0x80046dc240,%rax
  800421780c:	00 00 00 
  800421780f:	48 8b 00             	mov    (%rax),%rax
  8004217812:	48 39 c2             	cmp    %rax,%rdx
  8004217815:	74 16                	je     800421782d <lapic_init+0xf2>
  8004217817:	be 00 00 01 00       	mov    $0x10000,%esi
  800421781c:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217821:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217828:	00 00 00 
  800421782b:	ff d0                	callq  *%rax
  800421782d:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217832:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217837:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  800421783e:	00 00 00 
  8004217841:	ff d0                	callq  *%rax
  8004217843:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421784a:	00 00 00 
  800421784d:	48 8b 00             	mov    (%rax),%rax
  8004217850:	48 83 c0 30          	add    $0x30,%rax
  8004217854:	8b 00                	mov    (%rax),%eax
  8004217856:	c1 e8 10             	shr    $0x10,%eax
  8004217859:	0f b6 c0             	movzbl %al,%eax
  800421785c:	83 f8 03             	cmp    $0x3,%eax
  800421785f:	76 16                	jbe    8004217877 <lapic_init+0x13c>
  8004217861:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217866:	bf d0 00 00 00       	mov    $0xd0,%edi
  800421786b:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217872:	00 00 00 
  8004217875:	ff d0                	callq  *%rax
  8004217877:	be 33 00 00 00       	mov    $0x33,%esi
  800421787c:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004217881:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217888:	00 00 00 
  800421788b:	ff d0                	callq  *%rax
  800421788d:	be 00 00 00 00       	mov    $0x0,%esi
  8004217892:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217897:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  800421789e:	00 00 00 
  80042178a1:	ff d0                	callq  *%rax
  80042178a3:	be 00 00 00 00       	mov    $0x0,%esi
  80042178a8:	bf a0 00 00 00       	mov    $0xa0,%edi
  80042178ad:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  80042178b4:	00 00 00 
  80042178b7:	ff d0                	callq  *%rax
  80042178b9:	be 00 00 00 00       	mov    $0x0,%esi
  80042178be:	bf 2c 00 00 00       	mov    $0x2c,%edi
  80042178c3:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  80042178ca:	00 00 00 
  80042178cd:	ff d0                	callq  *%rax
  80042178cf:	be 00 00 00 00       	mov    $0x0,%esi
  80042178d4:	bf c4 00 00 00       	mov    $0xc4,%edi
  80042178d9:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  80042178e0:	00 00 00 
  80042178e3:	ff d0                	callq  *%rax
  80042178e5:	be 00 85 08 00       	mov    $0x88500,%esi
  80042178ea:	bf c0 00 00 00       	mov    $0xc0,%edi
  80042178ef:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  80042178f6:	00 00 00 
  80042178f9:	ff d0                	callq  *%rax
  80042178fb:	90                   	nop
  80042178fc:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  8004217903:	00 00 00 
  8004217906:	48 8b 00             	mov    (%rax),%rax
  8004217909:	48 05 00 03 00 00    	add    $0x300,%rax
  800421790f:	8b 00                	mov    (%rax),%eax
  8004217911:	25 00 10 00 00       	and    $0x1000,%eax
  8004217916:	85 c0                	test   %eax,%eax
  8004217918:	75 e2                	jne    80042178fc <lapic_init+0x1c1>
  800421791a:	be 00 00 00 00       	mov    $0x0,%esi
  800421791f:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217924:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  800421792b:	00 00 00 
  800421792e:	ff d0                	callq  *%rax
  8004217930:	5d                   	pop    %rbp
  8004217931:	c3                   	retq   

0000008004217932 <cpunum>:
  8004217932:	55                   	push   %rbp
  8004217933:	48 89 e5             	mov    %rsp,%rbp
  8004217936:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421793d:	00 00 00 
  8004217940:	48 8b 00             	mov    (%rax),%rax
  8004217943:	48 85 c0             	test   %rax,%rax
  8004217946:	74 18                	je     8004217960 <cpunum+0x2e>
  8004217948:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  800421794f:	00 00 00 
  8004217952:	48 8b 00             	mov    (%rax),%rax
  8004217955:	48 83 c0 20          	add    $0x20,%rax
  8004217959:	8b 00                	mov    (%rax),%eax
  800421795b:	c1 e8 18             	shr    $0x18,%eax
  800421795e:	eb 05                	jmp    8004217965 <cpunum+0x33>
  8004217960:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217965:	5d                   	pop    %rbp
  8004217966:	c3                   	retq   

0000008004217967 <lapic_eoi>:
  8004217967:	55                   	push   %rbp
  8004217968:	48 89 e5             	mov    %rsp,%rbp
  800421796b:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  8004217972:	00 00 00 
  8004217975:	48 8b 00             	mov    (%rax),%rax
  8004217978:	48 85 c0             	test   %rax,%rax
  800421797b:	74 16                	je     8004217993 <lapic_eoi+0x2c>
  800421797d:	be 00 00 00 00       	mov    $0x0,%esi
  8004217982:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217987:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  800421798e:	00 00 00 
  8004217991:	ff d0                	callq  *%rax
  8004217993:	5d                   	pop    %rbp
  8004217994:	c3                   	retq   

0000008004217995 <microdelay>:
  8004217995:	55                   	push   %rbp
  8004217996:	48 89 e5             	mov    %rsp,%rbp
  8004217999:	48 83 ec 04          	sub    $0x4,%rsp
  800421799d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042179a0:	c9                   	leaveq 
  80042179a1:	c3                   	retq   

00000080042179a2 <lapic_startap>:
  80042179a2:	55                   	push   %rbp
  80042179a3:	48 89 e5             	mov    %rsp,%rbp
  80042179a6:	48 83 ec 40          	sub    $0x40,%rsp
  80042179aa:	89 f8                	mov    %edi,%eax
  80042179ac:	89 75 c8             	mov    %esi,-0x38(%rbp)
  80042179af:	88 45 cc             	mov    %al,-0x34(%rbp)
  80042179b2:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  80042179b9:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  80042179bd:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042179c1:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042179c4:	ee                   	out    %al,(%dx)
  80042179c5:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  80042179cc:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  80042179d0:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042179d4:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042179d7:	ee                   	out    %al,(%dx)
  80042179d8:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  80042179df:	00 
  80042179e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042179e4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042179e8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042179eb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042179ee:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042179f5:	00 00 00 
  80042179f8:	48 8b 00             	mov    (%rax),%rax
  80042179fb:	48 39 c2             	cmp    %rax,%rdx
  80042179fe:	72 32                	jb     8004217a32 <lapic_startap+0x90>
  8004217a00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217a04:	48 89 c1             	mov    %rax,%rcx
  8004217a07:	48 ba 30 f9 21 04 80 	movabs $0x800421f930,%rdx
  8004217a0e:	00 00 00 
  8004217a11:	be 99 00 00 00       	mov    $0x99,%esi
  8004217a16:	48 bf 53 f9 21 04 80 	movabs $0x800421f953,%rdi
  8004217a1d:	00 00 00 
  8004217a20:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217a25:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217a2c:	00 00 00 
  8004217a2f:	41 ff d0             	callq  *%r8
  8004217a32:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217a39:	00 00 00 
  8004217a3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217a40:	48 01 d0             	add    %rdx,%rax
  8004217a43:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217a47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217a4b:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217a50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217a54:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217a58:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217a5b:	c1 e8 04             	shr    $0x4,%eax
  8004217a5e:	66 89 02             	mov    %ax,(%rdx)
  8004217a61:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217a65:	c1 e0 18             	shl    $0x18,%eax
  8004217a68:	89 c6                	mov    %eax,%esi
  8004217a6a:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217a6f:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217a76:	00 00 00 
  8004217a79:	ff d0                	callq  *%rax
  8004217a7b:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217a80:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217a85:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217a8c:	00 00 00 
  8004217a8f:	ff d0                	callq  *%rax
  8004217a91:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217a96:	48 b8 95 79 21 04 80 	movabs $0x8004217995,%rax
  8004217a9d:	00 00 00 
  8004217aa0:	ff d0                	callq  *%rax
  8004217aa2:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217aa7:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217aac:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217ab3:	00 00 00 
  8004217ab6:	ff d0                	callq  *%rax
  8004217ab8:	bf 64 00 00 00       	mov    $0x64,%edi
  8004217abd:	48 b8 95 79 21 04 80 	movabs $0x8004217995,%rax
  8004217ac4:	00 00 00 
  8004217ac7:	ff d0                	callq  *%rax
  8004217ac9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217ad0:	eb 4b                	jmp    8004217b1d <lapic_startap+0x17b>
  8004217ad2:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217ad6:	c1 e0 18             	shl    $0x18,%eax
  8004217ad9:	89 c6                	mov    %eax,%esi
  8004217adb:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217ae0:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217ae7:	00 00 00 
  8004217aea:	ff d0                	callq  *%rax
  8004217aec:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217aef:	c1 e8 0c             	shr    $0xc,%eax
  8004217af2:	80 cc 06             	or     $0x6,%ah
  8004217af5:	89 c6                	mov    %eax,%esi
  8004217af7:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217afc:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217b03:	00 00 00 
  8004217b06:	ff d0                	callq  *%rax
  8004217b08:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217b0d:	48 b8 95 79 21 04 80 	movabs $0x8004217995,%rax
  8004217b14:	00 00 00 
  8004217b17:	ff d0                	callq  *%rax
  8004217b19:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217b1d:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217b21:	7e af                	jle    8004217ad2 <lapic_startap+0x130>
  8004217b23:	c9                   	leaveq 
  8004217b24:	c3                   	retq   

0000008004217b25 <lapic_ipi>:
  8004217b25:	55                   	push   %rbp
  8004217b26:	48 89 e5             	mov    %rsp,%rbp
  8004217b29:	48 83 ec 08          	sub    $0x8,%rsp
  8004217b2d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217b30:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217b33:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217b38:	89 c6                	mov    %eax,%esi
  8004217b3a:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217b3f:	48 b8 f9 76 21 04 80 	movabs $0x80042176f9,%rax
  8004217b46:	00 00 00 
  8004217b49:	ff d0                	callq  *%rax
  8004217b4b:	90                   	nop
  8004217b4c:	48 b8 08 d0 71 04 80 	movabs $0x800471d008,%rax
  8004217b53:	00 00 00 
  8004217b56:	48 8b 00             	mov    (%rax),%rax
  8004217b59:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217b5f:	8b 00                	mov    (%rax),%eax
  8004217b61:	25 00 10 00 00       	and    $0x1000,%eax
  8004217b66:	85 c0                	test   %eax,%eax
  8004217b68:	75 e2                	jne    8004217b4c <lapic_ipi+0x27>
  8004217b6a:	c9                   	leaveq 
  8004217b6b:	c3                   	retq   

0000008004217b6c <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004217b6c:	55                   	push   %rbp
  8004217b6d:	48 89 e5             	mov    %rsp,%rbp
  8004217b70:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217b74:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217b78:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004217b7b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004217b7f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217b82:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004217b86:	f0 87 02             	lock xchg %eax,(%rdx)
  8004217b89:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004217b8c:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004217b8f:	c9                   	leaveq 
  8004217b90:	c3                   	retq   

0000008004217b91 <get_caller_pcs>:
  8004217b91:	55                   	push   %rbp
  8004217b92:	48 89 e5             	mov    %rsp,%rbp
  8004217b95:	48 83 ec 28          	sub    $0x28,%rsp
  8004217b99:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004217b9d:	48 89 e8             	mov    %rbp,%rax
  8004217ba0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004217ba4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ba8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217bac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004217bb3:	eb 45                	jmp    8004217bfa <get_caller_pcs+0x69>
  8004217bb5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217bba:	74 44                	je     8004217c00 <get_caller_pcs+0x6f>
  8004217bbc:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217bc3:	00 00 00 
  8004217bc6:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004217bca:	76 34                	jbe    8004217c00 <get_caller_pcs+0x6f>
  8004217bcc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217bcf:	48 98                	cltq   
  8004217bd1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217bd8:	00 
  8004217bd9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217bdd:	48 01 c2             	add    %rax,%rdx
  8004217be0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217be4:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217be8:	48 89 02             	mov    %rax,(%rdx)
  8004217beb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217bef:	48 8b 00             	mov    (%rax),%rax
  8004217bf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217bf6:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217bfa:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217bfe:	7e b5                	jle    8004217bb5 <get_caller_pcs+0x24>
  8004217c00:	eb 1f                	jmp    8004217c21 <get_caller_pcs+0x90>
  8004217c02:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217c05:	48 98                	cltq   
  8004217c07:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217c0e:	00 
  8004217c0f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217c13:	48 01 d0             	add    %rdx,%rax
  8004217c16:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217c1d:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217c21:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217c25:	7e db                	jle    8004217c02 <get_caller_pcs+0x71>
  8004217c27:	c9                   	leaveq 
  8004217c28:	c3                   	retq   

0000008004217c29 <holding>:
  8004217c29:	55                   	push   %rbp
  8004217c2a:	48 89 e5             	mov    %rsp,%rbp
  8004217c2d:	53                   	push   %rbx
  8004217c2e:	48 83 ec 18          	sub    $0x18,%rsp
  8004217c32:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217c36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217c3a:	8b 00                	mov    (%rax),%eax
  8004217c3c:	85 c0                	test   %eax,%eax
  8004217c3e:	74 3d                	je     8004217c7d <holding+0x54>
  8004217c40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217c44:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004217c48:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004217c4f:	00 00 00 
  8004217c52:	ff d0                	callq  *%rax
  8004217c54:	48 98                	cltq   
  8004217c56:	48 c1 e0 03          	shl    $0x3,%rax
  8004217c5a:	48 89 c2             	mov    %rax,%rdx
  8004217c5d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217c61:	48 01 d0             	add    %rdx,%rax
  8004217c64:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004217c6b:	00 00 00 
  8004217c6e:	48 01 d0             	add    %rdx,%rax
  8004217c71:	48 39 c3             	cmp    %rax,%rbx
  8004217c74:	75 07                	jne    8004217c7d <holding+0x54>
  8004217c76:	b8 01 00 00 00       	mov    $0x1,%eax
  8004217c7b:	eb 05                	jmp    8004217c82 <holding+0x59>
  8004217c7d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c82:	48 83 c4 18          	add    $0x18,%rsp
  8004217c86:	5b                   	pop    %rbx
  8004217c87:	5d                   	pop    %rbp
  8004217c88:	c3                   	retq   

0000008004217c89 <__spin_initlock>:
  8004217c89:	55                   	push   %rbp
  8004217c8a:	48 89 e5             	mov    %rsp,%rbp
  8004217c8d:	48 83 ec 10          	sub    $0x10,%rsp
  8004217c91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217c95:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004217c99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217c9d:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217ca3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217ca7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004217cab:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004217caf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217cb3:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004217cba:	00 
  8004217cbb:	c9                   	leaveq 
  8004217cbc:	c3                   	retq   

0000008004217cbd <spin_lock>:
  8004217cbd:	55                   	push   %rbp
  8004217cbe:	48 89 e5             	mov    %rsp,%rbp
  8004217cc1:	53                   	push   %rbx
  8004217cc2:	48 83 ec 18          	sub    $0x18,%rsp
  8004217cc6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217cca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217cce:	48 89 c7             	mov    %rax,%rdi
  8004217cd1:	48 b8 29 7c 21 04 80 	movabs $0x8004217c29,%rax
  8004217cd8:	00 00 00 
  8004217cdb:	ff d0                	callq  *%rax
  8004217cdd:	85 c0                	test   %eax,%eax
  8004217cdf:	74 44                	je     8004217d25 <spin_lock+0x68>
  8004217ce1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ce5:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217ce9:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004217cf0:	00 00 00 
  8004217cf3:	ff d0                	callq  *%rax
  8004217cf5:	49 89 d8             	mov    %rbx,%r8
  8004217cf8:	89 c1                	mov    %eax,%ecx
  8004217cfa:	48 ba 78 f9 21 04 80 	movabs $0x800421f978,%rdx
  8004217d01:	00 00 00 
  8004217d04:	be 42 00 00 00       	mov    $0x42,%esi
  8004217d09:	48 bf a2 f9 21 04 80 	movabs $0x800421f9a2,%rdi
  8004217d10:	00 00 00 
  8004217d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217d18:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  8004217d1f:	00 00 00 
  8004217d22:	41 ff d1             	callq  *%r9
  8004217d25:	eb 02                	jmp    8004217d29 <spin_lock+0x6c>
  8004217d27:	f3 90                	pause  
  8004217d29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217d2d:	be 01 00 00 00       	mov    $0x1,%esi
  8004217d32:	48 89 c7             	mov    %rax,%rdi
  8004217d35:	48 b8 6c 7b 21 04 80 	movabs $0x8004217b6c,%rax
  8004217d3c:	00 00 00 
  8004217d3f:	ff d0                	callq  *%rax
  8004217d41:	85 c0                	test   %eax,%eax
  8004217d43:	75 e2                	jne    8004217d27 <spin_lock+0x6a>
  8004217d45:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004217d4c:	00 00 00 
  8004217d4f:	ff d0                	callq  *%rax
  8004217d51:	48 98                	cltq   
  8004217d53:	48 c1 e0 03          	shl    $0x3,%rax
  8004217d57:	48 89 c2             	mov    %rax,%rdx
  8004217d5a:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217d5e:	48 01 d0             	add    %rdx,%rax
  8004217d61:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  8004217d68:	00 00 00 
  8004217d6b:	48 01 c2             	add    %rax,%rdx
  8004217d6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217d72:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004217d76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217d7a:	48 83 c0 18          	add    $0x18,%rax
  8004217d7e:	48 89 c7             	mov    %rax,%rdi
  8004217d81:	48 b8 91 7b 21 04 80 	movabs $0x8004217b91,%rax
  8004217d88:	00 00 00 
  8004217d8b:	ff d0                	callq  *%rax
  8004217d8d:	48 83 c4 18          	add    $0x18,%rsp
  8004217d91:	5b                   	pop    %rbx
  8004217d92:	5d                   	pop    %rbp
  8004217d93:	c3                   	retq   

0000008004217d94 <spin_unlock>:
  8004217d94:	55                   	push   %rbp
  8004217d95:	48 89 e5             	mov    %rsp,%rbp
  8004217d98:	41 54                	push   %r12
  8004217d9a:	53                   	push   %rbx
  8004217d9b:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  8004217da2:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004217da9:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217db0:	48 89 c7             	mov    %rax,%rdi
  8004217db3:	48 b8 29 7c 21 04 80 	movabs $0x8004217c29,%rax
  8004217dba:	00 00 00 
  8004217dbd:	ff d0                	callq  *%rax
  8004217dbf:	85 c0                	test   %eax,%eax
  8004217dc1:	0f 85 d2 01 00 00    	jne    8004217f99 <spin_unlock+0x205>
  8004217dc7:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217dce:	48 8d 48 18          	lea    0x18(%rax),%rcx
  8004217dd2:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004217dd9:	ba 28 00 00 00       	mov    $0x28,%edx
  8004217dde:	48 89 ce             	mov    %rcx,%rsi
  8004217de1:	48 89 c7             	mov    %rax,%rdi
  8004217de4:	48 b8 be 09 21 04 80 	movabs $0x80042109be,%rax
  8004217deb:	00 00 00 
  8004217dee:	ff d0                	callq  *%rax
  8004217df0:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217df7:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004217dfb:	48 85 c0             	test   %rax,%rax
  8004217dfe:	75 39                	jne    8004217e39 <spin_unlock+0xa5>
  8004217e00:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217e07:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217e0b:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004217e12:	00 00 00 
  8004217e15:	ff d0                	callq  *%rax
  8004217e17:	48 89 da             	mov    %rbx,%rdx
  8004217e1a:	89 c6                	mov    %eax,%esi
  8004217e1c:	48 bf b8 f9 21 04 80 	movabs $0x800421f9b8,%rdi
  8004217e23:	00 00 00 
  8004217e26:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e2b:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  8004217e32:	00 00 00 
  8004217e35:	ff d1                	callq  *%rcx
  8004217e37:	eb 4d                	jmp    8004217e86 <spin_unlock+0xf2>
  8004217e39:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217e40:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004217e44:	0f b6 00             	movzbl (%rax),%eax
  8004217e47:	44 0f b6 e0          	movzbl %al,%r12d
  8004217e4b:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217e52:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217e56:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  8004217e5d:	00 00 00 
  8004217e60:	ff d0                	callq  *%rax
  8004217e62:	44 89 e1             	mov    %r12d,%ecx
  8004217e65:	48 89 da             	mov    %rbx,%rdx
  8004217e68:	89 c6                	mov    %eax,%esi
  8004217e6a:	48 bf f8 f9 21 04 80 	movabs $0x800421f9f8,%rdi
  8004217e71:	00 00 00 
  8004217e74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217e79:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  8004217e80:	00 00 00 
  8004217e83:	41 ff d0             	callq  *%r8
  8004217e86:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004217e8d:	e9 c3 00 00 00       	jmpq   8004217f55 <spin_unlock+0x1c1>
  8004217e92:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217e95:	48 98                	cltq   
  8004217e97:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217e9e:	89 c0                	mov    %eax,%eax
  8004217ea0:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  8004217ea7:	48 89 d6             	mov    %rdx,%rsi
  8004217eaa:	48 89 c7             	mov    %rax,%rdi
  8004217ead:	48 b8 9f f5 20 04 80 	movabs $0x800420f59f,%rax
  8004217eb4:	00 00 00 
  8004217eb7:	ff d0                	callq  *%rax
  8004217eb9:	85 c0                	test   %eax,%eax
  8004217ebb:	78 6b                	js     8004217f28 <spin_unlock+0x194>
  8004217ebd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217ec0:	48 98                	cltq   
  8004217ec2:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217ec9:	89 c2                	mov    %eax,%edx
  8004217ecb:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  8004217ed2:	48 29 c2             	sub    %rax,%rdx
  8004217ed5:	49 89 d0             	mov    %rdx,%r8
  8004217ed8:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  8004217edf:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  8004217ee5:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  8004217eeb:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  8004217ef2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217ef5:	48 98                	cltq   
  8004217ef7:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217efe:	4c 89 04 24          	mov    %r8,(%rsp)
  8004217f02:	49 89 f9             	mov    %rdi,%r9
  8004217f05:	41 89 f0             	mov    %esi,%r8d
  8004217f08:	89 c6                	mov    %eax,%esi
  8004217f0a:	48 bf 2e fa 21 04 80 	movabs $0x800421fa2e,%rdi
  8004217f11:	00 00 00 
  8004217f14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f19:	49 ba 14 9c 20 04 80 	movabs $0x8004209c14,%r10
  8004217f20:	00 00 00 
  8004217f23:	41 ff d2             	callq  *%r10
  8004217f26:	eb 29                	jmp    8004217f51 <spin_unlock+0x1bd>
  8004217f28:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217f2b:	48 98                	cltq   
  8004217f2d:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217f34:	89 c6                	mov    %eax,%esi
  8004217f36:	48 bf 45 fa 21 04 80 	movabs $0x800421fa45,%rdi
  8004217f3d:	00 00 00 
  8004217f40:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f45:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004217f4c:	00 00 00 
  8004217f4f:	ff d2                	callq  *%rdx
  8004217f51:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004217f55:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  8004217f59:	7f 14                	jg     8004217f6f <spin_unlock+0x1db>
  8004217f5b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004217f5e:	48 98                	cltq   
  8004217f60:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004217f67:	85 c0                	test   %eax,%eax
  8004217f69:	0f 85 23 ff ff ff    	jne    8004217e92 <spin_unlock+0xfe>
  8004217f6f:	48 ba 4d fa 21 04 80 	movabs $0x800421fa4d,%rdx
  8004217f76:	00 00 00 
  8004217f79:	be 6c 00 00 00       	mov    $0x6c,%esi
  8004217f7e:	48 bf a2 f9 21 04 80 	movabs $0x800421f9a2,%rdi
  8004217f85:	00 00 00 
  8004217f88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f8d:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004217f94:	00 00 00 
  8004217f97:	ff d1                	callq  *%rcx
  8004217f99:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217fa0:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  8004217fa7:	00 
  8004217fa8:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217faf:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004217fb6:	00 
  8004217fb7:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217fbe:	be 00 00 00 00       	mov    $0x0,%esi
  8004217fc3:	48 89 c7             	mov    %rax,%rdi
  8004217fc6:	48 b8 6c 7b 21 04 80 	movabs $0x8004217b6c,%rax
  8004217fcd:	00 00 00 
  8004217fd0:	ff d0                	callq  *%rax
  8004217fd2:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004217fd9:	5b                   	pop    %rbx
  8004217fda:	41 5c                	pop    %r12
  8004217fdc:	5d                   	pop    %rbp
  8004217fdd:	c3                   	retq   

0000008004217fde <e1000_attach>:
  8004217fde:	55                   	push   %rbp
  8004217fdf:	48 89 e5             	mov    %rsp,%rbp
  8004217fe2:	48 83 ec 40          	sub    $0x40,%rsp
  8004217fe6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004217fea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217fee:	48 89 c7             	mov    %rax,%rdi
  8004217ff1:	48 b8 9b 8e 21 04 80 	movabs $0x8004218e9b,%rax
  8004217ff8:	00 00 00 
  8004217ffb:	ff d0                	callq  *%rax
  8004217ffd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218001:	8b 40 30             	mov    0x30(%rax),%eax
  8004218004:	89 c2                	mov    %eax,%edx
  8004218006:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421800a:	8b 40 18             	mov    0x18(%rax),%eax
  800421800d:	89 c0                	mov    %eax,%eax
  800421800f:	48 89 d6             	mov    %rdx,%rsi
  8004218012:	48 89 c7             	mov    %rax,%rdi
  8004218015:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  800421801c:	00 00 00 
  800421801f:	ff d0                	callq  *%rax
  8004218021:	48 ba 20 c7 4d 04 80 	movabs $0x80044dc720,%rdx
  8004218028:	00 00 00 
  800421802b:	48 89 02             	mov    %rax,(%rdx)
  800421802e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218035:	e9 a9 00 00 00       	jmpq   80042180e3 <e1000_attach+0x105>
  800421803a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421803d:	48 98                	cltq   
  800421803f:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  8004218046:	48 b8 40 c8 4d 04 80 	movabs $0x80044dc840,%rax
  800421804d:	00 00 00 
  8004218050:	48 01 d0             	add    %rdx,%rax
  8004218053:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004218057:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421805e:	00 00 00 
  8004218061:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  8004218065:	77 32                	ja     8004218099 <e1000_attach+0xbb>
  8004218067:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421806b:	48 89 c1             	mov    %rax,%rcx
  800421806e:	48 ba 60 fa 21 04 80 	movabs $0x800421fa60,%rdx
  8004218075:	00 00 00 
  8004218078:	be 97 00 00 00       	mov    $0x97,%esi
  800421807d:	48 bf 84 fa 21 04 80 	movabs $0x800421fa84,%rdi
  8004218084:	00 00 00 
  8004218087:	b8 00 00 00 00       	mov    $0x0,%eax
  800421808c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218093:	00 00 00 
  8004218096:	41 ff d0             	callq  *%r8
  8004218099:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042180a0:	ff ff ff 
  80042180a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042180a7:	48 01 c2             	add    %rax,%rdx
  80042180aa:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  80042180b1:	00 00 00 
  80042180b4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042180b7:	48 63 c9             	movslq %ecx,%rcx
  80042180ba:	48 c1 e1 04          	shl    $0x4,%rcx
  80042180be:	48 01 c8             	add    %rcx,%rax
  80042180c1:	48 89 10             	mov    %rdx,(%rax)
  80042180c4:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  80042180cb:	00 00 00 
  80042180ce:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042180d1:	48 63 d2             	movslq %edx,%rdx
  80042180d4:	48 c1 e2 04          	shl    $0x4,%rdx
  80042180d8:	48 01 d0             	add    %rdx,%rax
  80042180db:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  80042180df:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042180e3:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042180e7:	0f 8e 4d ff ff ff    	jle    800421803a <e1000_attach+0x5c>
  80042180ed:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042180f4:	00 00 00 
  80042180f7:	48 8b 00             	mov    (%rax),%rax
  80042180fa:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004218101:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  8004218108:	00 00 00 
  800421810b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421810f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218116:	00 00 00 
  8004218119:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421811d:	77 32                	ja     8004218151 <e1000_attach+0x173>
  800421811f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218123:	48 89 c1             	mov    %rax,%rcx
  8004218126:	48 ba 60 fa 21 04 80 	movabs $0x800421fa60,%rdx
  800421812d:	00 00 00 
  8004218130:	be 9a 00 00 00       	mov    $0x9a,%esi
  8004218135:	48 bf 84 fa 21 04 80 	movabs $0x800421fa84,%rdi
  800421813c:	00 00 00 
  800421813f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218144:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421814b:	00 00 00 
  800421814e:	41 ff d0             	callq  *%r8
  8004218151:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004218158:	ff ff ff 
  800421815b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421815f:	48 01 c8             	add    %rcx,%rax
  8004218162:	89 02                	mov    %eax,(%rdx)
  8004218164:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421816b:	00 00 00 
  800421816e:	48 8b 00             	mov    (%rax),%rax
  8004218171:	48 05 08 38 00 00    	add    $0x3808,%rax
  8004218177:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  800421817d:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218184:	00 00 00 
  8004218187:	48 8b 00             	mov    (%rax),%rax
  800421818a:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004218191:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218198:	00 00 00 
  800421819b:	48 8b 00             	mov    (%rax),%rax
  800421819e:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  80042181a5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181aa:	89 01                	mov    %eax,(%rcx)
  80042181ac:	89 02                	mov    %eax,(%rdx)
  80042181ae:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042181b5:	00 00 00 
  80042181b8:	48 8b 00             	mov    (%rax),%rax
  80042181bb:	48 05 00 04 00 00    	add    $0x400,%rax
  80042181c1:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  80042181c7:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042181ce:	00 00 00 
  80042181d1:	48 8b 00             	mov    (%rax),%rax
  80042181d4:	48 05 10 04 00 00    	add    $0x410,%rax
  80042181da:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  80042181e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042181e7:	e9 8e 00 00 00       	jmpq   800421827a <e1000_attach+0x29c>
  80042181ec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042181ef:	48 98                	cltq   
  80042181f1:	48 c1 e0 0b          	shl    $0xb,%rax
  80042181f5:	48 89 c2             	mov    %rax,%rdx
  80042181f8:	48 b8 a0 65 4e 04 80 	movabs $0x80044e65a0,%rax
  80042181ff:	00 00 00 
  8004218202:	48 01 d0             	add    %rdx,%rax
  8004218205:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218209:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218210:	00 00 00 
  8004218213:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  8004218217:	77 32                	ja     800421824b <e1000_attach+0x26d>
  8004218219:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421821d:	48 89 c1             	mov    %rax,%rcx
  8004218220:	48 ba 60 fa 21 04 80 	movabs $0x800421fa60,%rdx
  8004218227:	00 00 00 
  800421822a:	be b8 00 00 00       	mov    $0xb8,%esi
  800421822f:	48 bf 84 fa 21 04 80 	movabs $0x800421fa84,%rdi
  8004218236:	00 00 00 
  8004218239:	b8 00 00 00 00       	mov    $0x0,%eax
  800421823e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218245:	00 00 00 
  8004218248:	41 ff d0             	callq  *%r8
  800421824b:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218252:	ff ff ff 
  8004218255:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218259:	48 01 c2             	add    %rax,%rdx
  800421825c:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  8004218263:	00 00 00 
  8004218266:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218269:	48 63 c9             	movslq %ecx,%rcx
  800421826c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218270:	48 01 c8             	add    %rcx,%rax
  8004218273:	48 89 10             	mov    %rdx,(%rax)
  8004218276:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421827a:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  8004218281:	0f 8e 65 ff ff ff    	jle    80042181ec <e1000_attach+0x20e>
  8004218287:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421828e:	00 00 00 
  8004218291:	48 8b 00             	mov    (%rax),%rax
  8004218294:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  800421829b:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  80042182a2:	00 00 00 
  80042182a5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042182a9:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042182b0:	00 00 00 
  80042182b3:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  80042182b7:	77 32                	ja     80042182eb <e1000_attach+0x30d>
  80042182b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042182bd:	48 89 c1             	mov    %rax,%rcx
  80042182c0:	48 ba 60 fa 21 04 80 	movabs $0x800421fa60,%rdx
  80042182c7:	00 00 00 
  80042182ca:	be ba 00 00 00       	mov    $0xba,%esi
  80042182cf:	48 bf 84 fa 21 04 80 	movabs $0x800421fa84,%rdi
  80042182d6:	00 00 00 
  80042182d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042182de:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042182e5:	00 00 00 
  80042182e8:	41 ff d0             	callq  *%r8
  80042182eb:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042182f2:	ff ff ff 
  80042182f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042182f9:	48 01 c8             	add    %rcx,%rax
  80042182fc:	89 02                	mov    %eax,(%rdx)
  80042182fe:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218305:	00 00 00 
  8004218308:	48 8b 00             	mov    (%rax),%rax
  800421830b:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004218311:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  8004218317:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421831e:	00 00 00 
  8004218321:	48 8b 00             	mov    (%rax),%rax
  8004218324:	48 05 10 28 00 00    	add    $0x2810,%rax
  800421832a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218330:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218337:	00 00 00 
  800421833a:	48 8b 00             	mov    (%rax),%rax
  800421833d:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218343:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004218349:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218350:	00 00 00 
  8004218353:	48 8b 00             	mov    (%rax),%rax
  8004218356:	48 05 00 01 00 00    	add    $0x100,%rax
  800421835c:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  8004218362:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218367:	c9                   	leaveq 
  8004218368:	c3                   	retq   

0000008004218369 <e1000_transmit>:
  8004218369:	55                   	push   %rbp
  800421836a:	48 89 e5             	mov    %rsp,%rbp
  800421836d:	48 83 ec 20          	sub    $0x20,%rsp
  8004218371:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218375:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218378:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421837f:	00 00 00 
  8004218382:	48 8b 00             	mov    (%rax),%rax
  8004218385:	48 85 c0             	test   %rax,%rax
  8004218388:	74 09                	je     8004218393 <e1000_transmit+0x2a>
  800421838a:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004218391:	76 0a                	jbe    800421839d <e1000_transmit+0x34>
  8004218393:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004218398:	e9 39 01 00 00       	jmpq   80042184d6 <e1000_transmit+0x16d>
  800421839d:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042183a4:	00 00 00 
  80042183a7:	48 8b 00             	mov    (%rax),%rax
  80042183aa:	48 05 18 38 00 00    	add    $0x3818,%rax
  80042183b0:	8b 00                	mov    (%rax),%eax
  80042183b2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042183b5:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  80042183bc:	00 00 00 
  80042183bf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042183c2:	48 63 d2             	movslq %edx,%rdx
  80042183c5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042183c9:	48 01 d0             	add    %rdx,%rax
  80042183cc:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042183d0:	0f b6 c0             	movzbl %al,%eax
  80042183d3:	83 e0 01             	and    $0x1,%eax
  80042183d6:	85 c0                	test   %eax,%eax
  80042183d8:	75 25                	jne    80042183ff <e1000_transmit+0x96>
  80042183da:	48 bf 94 fa 21 04 80 	movabs $0x800421fa94,%rdi
  80042183e1:	00 00 00 
  80042183e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183e9:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  80042183f0:	00 00 00 
  80042183f3:	ff d2                	callq  *%rdx
  80042183f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183fa:	e9 d7 00 00 00       	jmpq   80042184d6 <e1000_transmit+0x16d>
  80042183ff:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004218402:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218405:	48 98                	cltq   
  8004218407:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  800421840e:	48 b8 40 c8 4d 04 80 	movabs $0x80044dc840,%rax
  8004218415:	00 00 00 
  8004218418:	48 01 c1             	add    %rax,%rcx
  800421841b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421841f:	48 89 c6             	mov    %rax,%rsi
  8004218422:	48 89 cf             	mov    %rcx,%rdi
  8004218425:	48 b8 be 09 21 04 80 	movabs $0x80042109be,%rax
  800421842c:	00 00 00 
  800421842f:	ff d0                	callq  *%rax
  8004218431:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218434:	48 ba 30 c7 4d 04 80 	movabs $0x80044dc730,%rdx
  800421843b:	00 00 00 
  800421843e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218441:	48 63 c9             	movslq %ecx,%rcx
  8004218444:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218448:	48 01 ca             	add    %rcx,%rdx
  800421844b:	66 89 42 08          	mov    %ax,0x8(%rdx)
  800421844f:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  8004218456:	00 00 00 
  8004218459:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421845c:	48 63 d2             	movslq %edx,%rdx
  800421845f:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218463:	48 01 d0             	add    %rdx,%rax
  8004218466:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  800421846a:	83 e0 fe             	and    $0xfffffffe,%eax
  800421846d:	89 c2                	mov    %eax,%edx
  800421846f:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  8004218476:	00 00 00 
  8004218479:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421847c:	48 63 c9             	movslq %ecx,%rcx
  800421847f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218483:	48 01 c8             	add    %rcx,%rax
  8004218486:	88 50 0c             	mov    %dl,0xc(%rax)
  8004218489:	48 b8 30 c7 4d 04 80 	movabs $0x80044dc730,%rax
  8004218490:	00 00 00 
  8004218493:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218496:	48 63 d2             	movslq %edx,%rdx
  8004218499:	48 c1 e2 04          	shl    $0x4,%rdx
  800421849d:	48 01 d0             	add    %rdx,%rax
  80042184a0:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  80042184a4:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042184ab:	00 00 00 
  80042184ae:	48 8b 00             	mov    (%rax),%rax
  80042184b1:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  80042184b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042184bb:	8d 50 01             	lea    0x1(%rax),%edx
  80042184be:	89 d0                	mov    %edx,%eax
  80042184c0:	c1 f8 1f             	sar    $0x1f,%eax
  80042184c3:	c1 e8 1c             	shr    $0x1c,%eax
  80042184c6:	01 c2                	add    %eax,%edx
  80042184c8:	83 e2 0f             	and    $0xf,%edx
  80042184cb:	29 c2                	sub    %eax,%edx
  80042184cd:	89 d0                	mov    %edx,%eax
  80042184cf:	89 01                	mov    %eax,(%rcx)
  80042184d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042184d6:	c9                   	leaveq 
  80042184d7:	c3                   	retq   

00000080042184d8 <e1000_receive>:
  80042184d8:	55                   	push   %rbp
  80042184d9:	48 89 e5             	mov    %rsp,%rbp
  80042184dc:	48 83 ec 20          	sub    $0x20,%rsp
  80042184e0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042184e4:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042184e7:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  80042184ee:	00 00 00 
  80042184f1:	48 8b 00             	mov    (%rax),%rax
  80042184f4:	48 85 c0             	test   %rax,%rax
  80042184f7:	75 0a                	jne    8004218503 <e1000_receive+0x2b>
  80042184f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042184fe:	e9 59 01 00 00       	jmpq   800421865c <e1000_receive+0x184>
  8004218503:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  800421850a:	00 00 00 
  800421850d:	48 8b 00             	mov    (%rax),%rax
  8004218510:	48 05 18 28 00 00    	add    $0x2818,%rax
  8004218516:	8b 00                	mov    (%rax),%eax
  8004218518:	8d 48 01             	lea    0x1(%rax),%ecx
  800421851b:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004218520:	89 c8                	mov    %ecx,%eax
  8004218522:	f7 e2                	mul    %edx
  8004218524:	89 d0                	mov    %edx,%eax
  8004218526:	c1 e8 06             	shr    $0x6,%eax
  8004218529:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  800421852f:	29 c1                	sub    %eax,%ecx
  8004218531:	89 c8                	mov    %ecx,%eax
  8004218533:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218536:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  800421853d:	00 00 00 
  8004218540:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218543:	48 63 d2             	movslq %edx,%rdx
  8004218546:	48 c1 e2 04          	shl    $0x4,%rdx
  800421854a:	48 01 d0             	add    %rdx,%rax
  800421854d:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218551:	0f b6 c0             	movzbl %al,%eax
  8004218554:	83 e0 01             	and    $0x1,%eax
  8004218557:	85 c0                	test   %eax,%eax
  8004218559:	75 0a                	jne    8004218565 <e1000_receive+0x8d>
  800421855b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218560:	e9 f7 00 00 00       	jmpq   800421865c <e1000_receive+0x184>
  8004218565:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  800421856c:	00 00 00 
  800421856f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218572:	48 63 d2             	movslq %edx,%rdx
  8004218575:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218579:	48 01 d0             	add    %rdx,%rax
  800421857c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218580:	0f b6 c0             	movzbl %al,%eax
  8004218583:	83 e0 02             	and    $0x2,%eax
  8004218586:	85 c0                	test   %eax,%eax
  8004218588:	75 35                	jne    80042185bf <e1000_receive+0xe7>
  800421858a:	48 b9 a8 fa 21 04 80 	movabs $0x800421faa8,%rcx
  8004218591:	00 00 00 
  8004218594:	48 ba d2 fa 21 04 80 	movabs $0x800421fad2,%rdx
  800421859b:	00 00 00 
  800421859e:	be ef 00 00 00       	mov    $0xef,%esi
  80042185a3:	48 bf 84 fa 21 04 80 	movabs $0x800421fa84,%rdi
  80042185aa:	00 00 00 
  80042185ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185b2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042185b9:	00 00 00 
  80042185bc:	41 ff d0             	callq  *%r8
  80042185bf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042185c2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042185c5:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  80042185cc:	00 00 00 
  80042185cf:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042185d2:	48 63 d2             	movslq %edx,%rdx
  80042185d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042185d9:	48 01 d0             	add    %rdx,%rax
  80042185dc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042185e0:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042185e4:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042185e8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042185eb:	39 c2                	cmp    %eax,%edx
  80042185ed:	0f 46 c2             	cmovbe %edx,%eax
  80042185f0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042185f3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042185f6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042185f9:	48 98                	cltq   
  80042185fb:	48 c1 e0 0b          	shl    $0xb,%rax
  80042185ff:	48 89 c1             	mov    %rax,%rcx
  8004218602:	48 b8 a0 65 4e 04 80 	movabs $0x80044e65a0,%rax
  8004218609:	00 00 00 
  800421860c:	48 01 c1             	add    %rax,%rcx
  800421860f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218613:	48 89 ce             	mov    %rcx,%rsi
  8004218616:	48 89 c7             	mov    %rax,%rdi
  8004218619:	48 b8 be 09 21 04 80 	movabs $0x80042109be,%rax
  8004218620:	00 00 00 
  8004218623:	ff d0                	callq  *%rax
  8004218625:	48 b8 20 27 4e 04 80 	movabs $0x80044e2720,%rax
  800421862c:	00 00 00 
  800421862f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218632:	48 63 d2             	movslq %edx,%rdx
  8004218635:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218639:	48 01 d0             	add    %rdx,%rax
  800421863c:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004218640:	48 b8 20 c7 4d 04 80 	movabs $0x80044dc720,%rax
  8004218647:	00 00 00 
  800421864a:	48 8b 00             	mov    (%rax),%rax
  800421864d:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  8004218654:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218657:	89 02                	mov    %eax,(%rdx)
  8004218659:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421865c:	c9                   	leaveq 
  800421865d:	c3                   	retq   

000000800421865e <pci_conf1_set_addr>:
  800421865e:	55                   	push   %rbp
  800421865f:	48 89 e5             	mov    %rsp,%rbp
  8004218662:	48 83 ec 20          	sub    $0x20,%rsp
  8004218666:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218669:	89 75 e8             	mov    %esi,-0x18(%rbp)
  800421866c:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  800421866f:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  8004218672:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  8004218679:	76 35                	jbe    80042186b0 <pci_conf1_set_addr+0x52>
  800421867b:	48 b9 e8 fa 21 04 80 	movabs $0x800421fae8,%rcx
  8004218682:	00 00 00 
  8004218685:	48 ba f2 fa 21 04 80 	movabs $0x800421faf2,%rdx
  800421868c:	00 00 00 
  800421868f:	be 31 00 00 00       	mov    $0x31,%esi
  8004218694:	48 bf 07 fb 21 04 80 	movabs $0x800421fb07,%rdi
  800421869b:	00 00 00 
  800421869e:	b8 00 00 00 00       	mov    $0x0,%eax
  80042186a3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042186aa:	00 00 00 
  80042186ad:	41 ff d0             	callq  *%r8
  80042186b0:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  80042186b4:	76 35                	jbe    80042186eb <pci_conf1_set_addr+0x8d>
  80042186b6:	48 b9 15 fb 21 04 80 	movabs $0x800421fb15,%rcx
  80042186bd:	00 00 00 
  80042186c0:	48 ba f2 fa 21 04 80 	movabs $0x800421faf2,%rdx
  80042186c7:	00 00 00 
  80042186ca:	be 32 00 00 00       	mov    $0x32,%esi
  80042186cf:	48 bf 07 fb 21 04 80 	movabs $0x800421fb07,%rdi
  80042186d6:	00 00 00 
  80042186d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042186de:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042186e5:	00 00 00 
  80042186e8:	41 ff d0             	callq  *%r8
  80042186eb:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  80042186ef:	76 35                	jbe    8004218726 <pci_conf1_set_addr+0xc8>
  80042186f1:	48 b9 1e fb 21 04 80 	movabs $0x800421fb1e,%rcx
  80042186f8:	00 00 00 
  80042186fb:	48 ba f2 fa 21 04 80 	movabs $0x800421faf2,%rdx
  8004218702:	00 00 00 
  8004218705:	be 33 00 00 00       	mov    $0x33,%esi
  800421870a:	48 bf 07 fb 21 04 80 	movabs $0x800421fb07,%rdi
  8004218711:	00 00 00 
  8004218714:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218719:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218720:	00 00 00 
  8004218723:	41 ff d0             	callq  *%r8
  8004218726:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  800421872d:	76 35                	jbe    8004218764 <pci_conf1_set_addr+0x106>
  800421872f:	48 b9 27 fb 21 04 80 	movabs $0x800421fb27,%rcx
  8004218736:	00 00 00 
  8004218739:	48 ba f2 fa 21 04 80 	movabs $0x800421faf2,%rdx
  8004218740:	00 00 00 
  8004218743:	be 34 00 00 00       	mov    $0x34,%esi
  8004218748:	48 bf 07 fb 21 04 80 	movabs $0x800421fb07,%rdi
  800421874f:	00 00 00 
  8004218752:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218757:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421875e:	00 00 00 
  8004218761:	41 ff d0             	callq  *%r8
  8004218764:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218767:	83 e0 03             	and    $0x3,%eax
  800421876a:	85 c0                	test   %eax,%eax
  800421876c:	74 35                	je     80042187a3 <pci_conf1_set_addr+0x145>
  800421876e:	48 b9 34 fb 21 04 80 	movabs $0x800421fb34,%rcx
  8004218775:	00 00 00 
  8004218778:	48 ba f2 fa 21 04 80 	movabs $0x800421faf2,%rdx
  800421877f:	00 00 00 
  8004218782:	be 35 00 00 00       	mov    $0x35,%esi
  8004218787:	48 bf 07 fb 21 04 80 	movabs $0x800421fb07,%rdi
  800421878e:	00 00 00 
  8004218791:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218796:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421879d:	00 00 00 
  80042187a0:	41 ff d0             	callq  *%r8
  80042187a3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042187a6:	c1 e0 10             	shl    $0x10,%eax
  80042187a9:	89 c2                	mov    %eax,%edx
  80042187ab:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042187ae:	c1 e0 0b             	shl    $0xb,%eax
  80042187b1:	09 c2                	or     %eax,%edx
  80042187b3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042187b6:	c1 e0 08             	shl    $0x8,%eax
  80042187b9:	09 d0                	or     %edx,%eax
  80042187bb:	0b 45 e0             	or     -0x20(%rbp),%eax
  80042187be:	0d 00 00 00 80       	or     $0x80000000,%eax
  80042187c3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042187c6:	48 b8 e4 37 23 04 80 	movabs $0x80042337e4,%rax
  80042187cd:	00 00 00 
  80042187d0:	8b 00                	mov    (%rax),%eax
  80042187d2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042187d5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042187d8:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  80042187db:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042187de:	8b 55 f8             	mov    -0x8(%rbp),%edx
  80042187e1:	ef                   	out    %eax,(%dx)
  80042187e2:	c9                   	leaveq 
  80042187e3:	c3                   	retq   

00000080042187e4 <pci_conf_read>:
  80042187e4:	55                   	push   %rbp
  80042187e5:	48 89 e5             	mov    %rsp,%rbp
  80042187e8:	48 83 ec 20          	sub    $0x20,%rsp
  80042187ec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042187f0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042187f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042187f7:	8b 50 0c             	mov    0xc(%rax),%edx
  80042187fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042187fe:	8b 70 08             	mov    0x8(%rax),%esi
  8004218801:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218805:	48 8b 00             	mov    (%rax),%rax
  8004218808:	8b 40 08             	mov    0x8(%rax),%eax
  800421880b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800421880e:	89 c7                	mov    %eax,%edi
  8004218810:	48 b8 5e 86 21 04 80 	movabs $0x800421865e,%rax
  8004218817:	00 00 00 
  800421881a:	ff d0                	callq  *%rax
  800421881c:	48 b8 e8 37 23 04 80 	movabs $0x80042337e8,%rax
  8004218823:	00 00 00 
  8004218826:	8b 00                	mov    (%rax),%eax
  8004218828:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  800421882b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421882e:	89 c2                	mov    %eax,%edx
  8004218830:	ed                   	in     (%dx),%eax
  8004218831:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218834:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218837:	c9                   	leaveq 
  8004218838:	c3                   	retq   

0000008004218839 <pci_conf_write>:
  8004218839:	55                   	push   %rbp
  800421883a:	48 89 e5             	mov    %rsp,%rbp
  800421883d:	48 83 ec 20          	sub    $0x20,%rsp
  8004218841:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218845:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218848:	89 55 e0             	mov    %edx,-0x20(%rbp)
  800421884b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421884f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218852:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218856:	8b 70 08             	mov    0x8(%rax),%esi
  8004218859:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421885d:	48 8b 00             	mov    (%rax),%rax
  8004218860:	8b 40 08             	mov    0x8(%rax),%eax
  8004218863:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218866:	89 c7                	mov    %eax,%edi
  8004218868:	48 b8 5e 86 21 04 80 	movabs $0x800421865e,%rax
  800421886f:	00 00 00 
  8004218872:	ff d0                	callq  *%rax
  8004218874:	48 b8 e8 37 23 04 80 	movabs $0x80042337e8,%rax
  800421887b:	00 00 00 
  800421887e:	8b 00                	mov    (%rax),%eax
  8004218880:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218883:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218886:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218889:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421888c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421888f:	ef                   	out    %eax,(%dx)
  8004218890:	c9                   	leaveq 
  8004218891:	c3                   	retq   

0000008004218892 <pci_attach_match>:
  8004218892:	55                   	push   %rbp
  8004218893:	48 89 e5             	mov    %rsp,%rbp
  8004218896:	48 83 ec 30          	sub    $0x30,%rsp
  800421889a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421889d:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042188a0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  80042188a4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  80042188a8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042188af:	e9 aa 00 00 00       	jmpq   800421895e <pci_attach_match+0xcc>
  80042188b4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042188b7:	48 c1 e0 04          	shl    $0x4,%rax
  80042188bb:	48 89 c2             	mov    %rax,%rdx
  80042188be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042188c2:	48 01 d0             	add    %rdx,%rax
  80042188c5:	8b 00                	mov    (%rax),%eax
  80042188c7:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042188ca:	0f 85 8a 00 00 00    	jne    800421895a <pci_attach_match+0xc8>
  80042188d0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042188d3:	48 c1 e0 04          	shl    $0x4,%rax
  80042188d7:	48 89 c2             	mov    %rax,%rdx
  80042188da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042188de:	48 01 d0             	add    %rdx,%rax
  80042188e1:	8b 40 04             	mov    0x4(%rax),%eax
  80042188e4:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  80042188e7:	75 71                	jne    800421895a <pci_attach_match+0xc8>
  80042188e9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042188ec:	48 c1 e0 04          	shl    $0x4,%rax
  80042188f0:	48 89 c2             	mov    %rax,%rdx
  80042188f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042188f7:	48 01 d0             	add    %rdx,%rax
  80042188fa:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042188fe:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218902:	48 89 d7             	mov    %rdx,%rdi
  8004218905:	ff d0                	callq  *%rax
  8004218907:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421890a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421890e:	7e 05                	jle    8004218915 <pci_attach_match+0x83>
  8004218910:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218913:	eb 6c                	jmp    8004218981 <pci_attach_match+0xef>
  8004218915:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218919:	79 3f                	jns    800421895a <pci_attach_match+0xc8>
  800421891b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421891e:	48 c1 e0 04          	shl    $0x4,%rax
  8004218922:	48 89 c2             	mov    %rax,%rdx
  8004218925:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218929:	48 01 d0             	add    %rdx,%rax
  800421892c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218930:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218933:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218936:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218939:	41 89 f0             	mov    %esi,%r8d
  800421893c:	89 c6                	mov    %eax,%esi
  800421893e:	48 bf 48 fb 21 04 80 	movabs $0x800421fb48,%rdi
  8004218945:	00 00 00 
  8004218948:	b8 00 00 00 00       	mov    $0x0,%eax
  800421894d:	49 b9 14 9c 20 04 80 	movabs $0x8004209c14,%r9
  8004218954:	00 00 00 
  8004218957:	41 ff d1             	callq  *%r9
  800421895a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421895e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218961:	48 c1 e0 04          	shl    $0x4,%rax
  8004218965:	48 89 c2             	mov    %rax,%rdx
  8004218968:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421896c:	48 01 d0             	add    %rdx,%rax
  800421896f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218973:	48 85 c0             	test   %rax,%rax
  8004218976:	0f 85 38 ff ff ff    	jne    80042188b4 <pci_attach_match+0x22>
  800421897c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218981:	c9                   	leaveq 
  8004218982:	c3                   	retq   

0000008004218983 <pci_attach>:
  8004218983:	55                   	push   %rbp
  8004218984:	48 89 e5             	mov    %rsp,%rbp
  8004218987:	48 83 ec 10          	sub    $0x10,%rsp
  800421898b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421898f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218993:	8b 40 14             	mov    0x14(%rax),%eax
  8004218996:	c1 e8 10             	shr    $0x10,%eax
  8004218999:	0f b6 c0             	movzbl %al,%eax
  800421899c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042189a0:	8b 52 14             	mov    0x14(%rdx),%edx
  80042189a3:	89 d7                	mov    %edx,%edi
  80042189a5:	c1 ef 18             	shr    $0x18,%edi
  80042189a8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042189ac:	48 89 d1             	mov    %rdx,%rcx
  80042189af:	48 ba 00 38 23 04 80 	movabs $0x8004233800,%rdx
  80042189b6:	00 00 00 
  80042189b9:	89 c6                	mov    %eax,%esi
  80042189bb:	48 b8 92 88 21 04 80 	movabs $0x8004218892,%rax
  80042189c2:	00 00 00 
  80042189c5:	ff d0                	callq  *%rax
  80042189c7:	85 c0                	test   %eax,%eax
  80042189c9:	75 39                	jne    8004218a04 <pci_attach+0x81>
  80042189cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042189cf:	8b 40 10             	mov    0x10(%rax),%eax
  80042189d2:	c1 e8 10             	shr    $0x10,%eax
  80042189d5:	89 c6                	mov    %eax,%esi
  80042189d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042189db:	8b 40 10             	mov    0x10(%rax),%eax
  80042189de:	0f b7 c0             	movzwl %ax,%eax
  80042189e1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042189e5:	48 89 d1             	mov    %rdx,%rcx
  80042189e8:	48 ba 20 38 23 04 80 	movabs $0x8004233820,%rdx
  80042189ef:	00 00 00 
  80042189f2:	89 c7                	mov    %eax,%edi
  80042189f4:	48 b8 92 88 21 04 80 	movabs $0x8004218892,%rax
  80042189fb:	00 00 00 
  80042189fe:	ff d0                	callq  *%rax
  8004218a00:	85 c0                	test   %eax,%eax
  8004218a02:	74 07                	je     8004218a0b <pci_attach+0x88>
  8004218a04:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218a09:	eb 05                	jmp    8004218a10 <pci_attach+0x8d>
  8004218a0b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a10:	c9                   	leaveq 
  8004218a11:	c3                   	retq   

0000008004218a12 <pci_print_func>:
  8004218a12:	55                   	push   %rbp
  8004218a13:	48 89 e5             	mov    %rsp,%rbp
  8004218a16:	48 83 ec 40          	sub    $0x40,%rsp
  8004218a1a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218a1e:	48 b8 40 38 23 04 80 	movabs $0x8004233840,%rax
  8004218a25:	00 00 00 
  8004218a28:	48 8b 00             	mov    (%rax),%rax
  8004218a2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218a2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a33:	8b 40 14             	mov    0x14(%rax),%eax
  8004218a36:	c1 e8 18             	shr    $0x18,%eax
  8004218a39:	83 f8 06             	cmp    $0x6,%eax
  8004218a3c:	77 20                	ja     8004218a5e <pci_print_func+0x4c>
  8004218a3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a42:	8b 40 14             	mov    0x14(%rax),%eax
  8004218a45:	c1 e8 18             	shr    $0x18,%eax
  8004218a48:	89 c2                	mov    %eax,%edx
  8004218a4a:	48 b8 40 38 23 04 80 	movabs $0x8004233840,%rax
  8004218a51:	00 00 00 
  8004218a54:	89 d2                	mov    %edx,%edx
  8004218a56:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004218a5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218a5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a62:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218a66:	0f b6 f8             	movzbl %al,%edi
  8004218a69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a6d:	8b 40 14             	mov    0x14(%rax),%eax
  8004218a70:	c1 e8 10             	shr    $0x10,%eax
  8004218a73:	0f b6 f0             	movzbl %al,%esi
  8004218a76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a7a:	8b 40 14             	mov    0x14(%rax),%eax
  8004218a7d:	c1 e8 18             	shr    $0x18,%eax
  8004218a80:	41 89 c1             	mov    %eax,%r9d
  8004218a83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a87:	8b 40 10             	mov    0x10(%rax),%eax
  8004218a8a:	c1 e8 10             	shr    $0x10,%eax
  8004218a8d:	41 89 c2             	mov    %eax,%r10d
  8004218a90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a94:	8b 40 10             	mov    0x10(%rax),%eax
  8004218a97:	44 0f b7 c0          	movzwl %ax,%r8d
  8004218a9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a9f:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218aa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218aa6:	8b 50 08             	mov    0x8(%rax),%edx
  8004218aa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218aad:	48 8b 00             	mov    (%rax),%rax
  8004218ab0:	8b 40 08             	mov    0x8(%rax),%eax
  8004218ab3:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218ab7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  8004218abb:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218ac0:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218ac4:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218ac8:	45 89 d1             	mov    %r10d,%r9d
  8004218acb:	89 c6                	mov    %eax,%esi
  8004218acd:	48 bf e8 fb 21 04 80 	movabs $0x800421fbe8,%rdi
  8004218ad4:	00 00 00 
  8004218ad7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218adc:	49 ba 14 9c 20 04 80 	movabs $0x8004209c14,%r10
  8004218ae3:	00 00 00 
  8004218ae6:	41 ff d2             	callq  *%r10
  8004218ae9:	c9                   	leaveq 
  8004218aea:	c3                   	retq   

0000008004218aeb <pci_scan_bus>:
  8004218aeb:	55                   	push   %rbp
  8004218aec:	48 89 e5             	mov    %rsp,%rbp
  8004218aef:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218af6:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  8004218afd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218b04:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218b08:	ba 50 00 00 00       	mov    $0x50,%edx
  8004218b0d:	be 00 00 00 00       	mov    $0x0,%esi
  8004218b12:	48 89 c7             	mov    %rax,%rdi
  8004218b15:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004218b1c:	00 00 00 
  8004218b1f:	ff d0                	callq  *%rax
  8004218b21:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218b28:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004218b2c:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218b33:	e9 22 02 00 00       	jmpq   8004218d5a <pci_scan_bus+0x26f>
  8004218b38:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218b3c:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218b41:	48 89 c7             	mov    %rax,%rdi
  8004218b44:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218b4b:	00 00 00 
  8004218b4e:	ff d0                	callq  *%rax
  8004218b50:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218b53:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218b56:	c1 e8 10             	shr    $0x10,%eax
  8004218b59:	83 e0 7f             	and    $0x7f,%eax
  8004218b5c:	83 f8 01             	cmp    $0x1,%eax
  8004218b5f:	0f 87 ec 01 00 00    	ja     8004218d51 <pci_scan_bus+0x266>
  8004218b65:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218b69:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004218b6d:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004218b74:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004218b78:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  8004218b7f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004218b83:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004218b8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004218b8e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004218b95:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004218b99:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004218ba0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218ba4:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004218bab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004218baf:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004218bb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218bba:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218bc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218bc5:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004218bcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218bd0:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218bd7:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  8004218bde:	00 00 00 
  8004218be1:	e9 45 01 00 00       	jmpq   8004218d2b <pci_scan_bus+0x240>
  8004218be6:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004218bed:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218bf4:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004218bfb:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004218c02:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004218c09:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004218c10:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004218c17:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004218c1e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004218c25:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004218c2c:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004218c33:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004218c3a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004218c41:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004218c45:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004218c4c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004218c50:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004218c57:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004218c5b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004218c62:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004218c66:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  8004218c6d:	be 00 00 00 00       	mov    $0x0,%esi
  8004218c72:	48 89 c7             	mov    %rax,%rdi
  8004218c75:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218c7c:	00 00 00 
  8004218c7f:	ff d0                	callq  *%rax
  8004218c81:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004218c87:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  8004218c8d:	0f b7 c0             	movzwl %ax,%eax
  8004218c90:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004218c95:	0f 84 81 00 00 00    	je     8004218d1c <pci_scan_bus+0x231>
  8004218c9b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218ca2:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004218ca7:	48 89 c7             	mov    %rax,%rdi
  8004218caa:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218cb1:	00 00 00 
  8004218cb4:	ff d0                	callq  *%rax
  8004218cb6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218cb9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218cbc:	88 45 98             	mov    %al,-0x68(%rbp)
  8004218cbf:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218cc6:	be 08 00 00 00       	mov    $0x8,%esi
  8004218ccb:	48 89 c7             	mov    %rax,%rdi
  8004218cce:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218cd5:	00 00 00 
  8004218cd8:	ff d0                	callq  *%rax
  8004218cda:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218ce0:	48 b8 e0 37 23 04 80 	movabs $0x80042337e0,%rax
  8004218ce7:	00 00 00 
  8004218cea:	8b 00                	mov    (%rax),%eax
  8004218cec:	85 c0                	test   %eax,%eax
  8004218cee:	74 16                	je     8004218d06 <pci_scan_bus+0x21b>
  8004218cf0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218cf7:	48 89 c7             	mov    %rax,%rdi
  8004218cfa:	48 b8 12 8a 21 04 80 	movabs $0x8004218a12,%rax
  8004218d01:	00 00 00 
  8004218d04:	ff d0                	callq  *%rax
  8004218d06:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218d0d:	48 89 c7             	mov    %rax,%rdi
  8004218d10:	48 b8 83 89 21 04 80 	movabs $0x8004218983,%rax
  8004218d17:	00 00 00 
  8004218d1a:	ff d0                	callq  *%rax
  8004218d1c:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004218d22:	83 c0 01             	add    $0x1,%eax
  8004218d25:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004218d2b:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004218d31:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218d34:	25 00 00 80 00       	and    $0x800000,%eax
  8004218d39:	85 c0                	test   %eax,%eax
  8004218d3b:	74 07                	je     8004218d44 <pci_scan_bus+0x259>
  8004218d3d:	b8 08 00 00 00       	mov    $0x8,%eax
  8004218d42:	eb 05                	jmp    8004218d49 <pci_scan_bus+0x25e>
  8004218d44:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218d49:	39 c2                	cmp    %eax,%edx
  8004218d4b:	0f 82 95 fe ff ff    	jb     8004218be6 <pci_scan_bus+0xfb>
  8004218d51:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218d54:	83 c0 01             	add    $0x1,%eax
  8004218d57:	89 45 a8             	mov    %eax,-0x58(%rbp)
  8004218d5a:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218d5d:	83 f8 1f             	cmp    $0x1f,%eax
  8004218d60:	0f 86 d2 fd ff ff    	jbe    8004218b38 <pci_scan_bus+0x4d>
  8004218d66:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218d69:	c9                   	leaveq 
  8004218d6a:	c3                   	retq   

0000008004218d6b <pci_bridge_attach>:
  8004218d6b:	55                   	push   %rbp
  8004218d6c:	48 89 e5             	mov    %rsp,%rbp
  8004218d6f:	48 83 ec 30          	sub    $0x30,%rsp
  8004218d73:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218d77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218d7b:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004218d80:	48 89 c7             	mov    %rax,%rdi
  8004218d83:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218d8a:	00 00 00 
  8004218d8d:	ff d0                	callq  *%rax
  8004218d8f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218d92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218d96:	be 18 00 00 00       	mov    $0x18,%esi
  8004218d9b:	48 89 c7             	mov    %rax,%rdi
  8004218d9e:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218da5:	00 00 00 
  8004218da8:	ff d0                	callq  *%rax
  8004218daa:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218dad:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218db0:	83 e0 0f             	and    $0xf,%eax
  8004218db3:	83 f8 01             	cmp    $0x1,%eax
  8004218db6:	75 40                	jne    8004218df8 <pci_bridge_attach+0x8d>
  8004218db8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218dbc:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218dbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218dc3:	8b 50 08             	mov    0x8(%rax),%edx
  8004218dc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218dca:	48 8b 00             	mov    (%rax),%rax
  8004218dcd:	8b 40 08             	mov    0x8(%rax),%eax
  8004218dd0:	89 c6                	mov    %eax,%esi
  8004218dd2:	48 bf 28 fc 21 04 80 	movabs $0x800421fc28,%rdi
  8004218dd9:	00 00 00 
  8004218ddc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218de1:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  8004218de8:	00 00 00 
  8004218deb:	41 ff d0             	callq  *%r8
  8004218dee:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218df3:	e9 a1 00 00 00       	jmpq   8004218e99 <pci_bridge_attach+0x12e>
  8004218df8:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004218dfc:	ba 10 00 00 00       	mov    $0x10,%edx
  8004218e01:	be 00 00 00 00       	mov    $0x0,%esi
  8004218e06:	48 89 c7             	mov    %rax,%rdi
  8004218e09:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  8004218e10:	00 00 00 
  8004218e13:	ff d0                	callq  *%rax
  8004218e15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e19:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218e1d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218e20:	c1 e8 08             	shr    $0x8,%eax
  8004218e23:	0f b6 c0             	movzbl %al,%eax
  8004218e26:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004218e29:	48 b8 e0 37 23 04 80 	movabs $0x80042337e0,%rax
  8004218e30:	00 00 00 
  8004218e33:	8b 00                	mov    (%rax),%eax
  8004218e35:	85 c0                	test   %eax,%eax
  8004218e37:	74 48                	je     8004218e81 <pci_bridge_attach+0x116>
  8004218e39:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218e3c:	c1 e8 10             	shr    $0x10,%eax
  8004218e3f:	0f b6 f8             	movzbl %al,%edi
  8004218e42:	8b 75 e8             	mov    -0x18(%rbp),%esi
  8004218e45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e49:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218e4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e50:	8b 50 08             	mov    0x8(%rax),%edx
  8004218e53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e57:	48 8b 00             	mov    (%rax),%rax
  8004218e5a:	8b 40 08             	mov    0x8(%rax),%eax
  8004218e5d:	41 89 f9             	mov    %edi,%r9d
  8004218e60:	41 89 f0             	mov    %esi,%r8d
  8004218e63:	89 c6                	mov    %eax,%esi
  8004218e65:	48 bf 60 fc 21 04 80 	movabs $0x800421fc60,%rdi
  8004218e6c:	00 00 00 
  8004218e6f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218e74:	49 ba 14 9c 20 04 80 	movabs $0x8004209c14,%r10
  8004218e7b:	00 00 00 
  8004218e7e:	41 ff d2             	callq  *%r10
  8004218e81:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004218e85:	48 89 c7             	mov    %rax,%rdi
  8004218e88:	48 b8 eb 8a 21 04 80 	movabs $0x8004218aeb,%rax
  8004218e8f:	00 00 00 
  8004218e92:	ff d0                	callq  *%rax
  8004218e94:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218e99:	c9                   	leaveq 
  8004218e9a:	c3                   	retq   

0000008004218e9b <pci_func_enable>:
  8004218e9b:	55                   	push   %rbp
  8004218e9c:	48 89 e5             	mov    %rsp,%rbp
  8004218e9f:	48 83 ec 40          	sub    $0x40,%rsp
  8004218ea3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218ea7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218eab:	ba 07 00 00 00       	mov    $0x7,%edx
  8004218eb0:	be 04 00 00 00       	mov    $0x4,%esi
  8004218eb5:	48 89 c7             	mov    %rax,%rdi
  8004218eb8:	48 b8 39 88 21 04 80 	movabs $0x8004218839,%rax
  8004218ebf:	00 00 00 
  8004218ec2:	ff d0                	callq  *%rax
  8004218ec4:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  8004218ecb:	e9 ee 01 00 00       	jmpq   80042190be <pci_func_enable+0x223>
  8004218ed0:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218ed3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ed7:	89 d6                	mov    %edx,%esi
  8004218ed9:	48 89 c7             	mov    %rax,%rdi
  8004218edc:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218ee3:	00 00 00 
  8004218ee6:	ff d0                	callq  *%rax
  8004218ee8:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004218eeb:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  8004218ef2:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004218ef5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ef9:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004218efe:	89 ce                	mov    %ecx,%esi
  8004218f00:	48 89 c7             	mov    %rax,%rdi
  8004218f03:	48 b8 39 88 21 04 80 	movabs $0x8004218839,%rax
  8004218f0a:	00 00 00 
  8004218f0d:	ff d0                	callq  *%rax
  8004218f0f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218f12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218f16:	89 d6                	mov    %edx,%esi
  8004218f18:	48 89 c7             	mov    %rax,%rdi
  8004218f1b:	48 b8 e4 87 21 04 80 	movabs $0x80042187e4,%rax
  8004218f22:	00 00 00 
  8004218f25:	ff d0                	callq  *%rax
  8004218f27:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004218f2a:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004218f2e:	75 05                	jne    8004218f35 <pci_func_enable+0x9a>
  8004218f30:	e9 83 01 00 00       	jmpq   80042190b8 <pci_func_enable+0x21d>
  8004218f35:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218f38:	83 e8 10             	sub    $0x10,%eax
  8004218f3b:	c1 e8 02             	shr    $0x2,%eax
  8004218f3e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004218f41:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218f44:	83 e0 01             	and    $0x1,%eax
  8004218f47:	85 c0                	test   %eax,%eax
  8004218f49:	75 65                	jne    8004218fb0 <pci_func_enable+0x115>
  8004218f4b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218f4e:	83 e0 06             	and    $0x6,%eax
  8004218f51:	83 f8 04             	cmp    $0x4,%eax
  8004218f54:	75 07                	jne    8004218f5d <pci_func_enable+0xc2>
  8004218f56:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  8004218f5d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218f60:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218f63:	f7 d8                	neg    %eax
  8004218f65:	23 45 e8             	and    -0x18(%rbp),%eax
  8004218f68:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218f6b:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218f6e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218f71:	83 e0 f0             	and    $0xfffffff0,%eax
  8004218f74:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218f77:	48 b8 a0 a5 6d 04 80 	movabs $0x80046da5a0,%rax
  8004218f7e:	00 00 00 
  8004218f81:	8b 00                	mov    (%rax),%eax
  8004218f83:	85 c0                	test   %eax,%eax
  8004218f85:	74 7a                	je     8004219001 <pci_func_enable+0x166>
  8004218f87:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004218f8a:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218f8d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218f90:	89 c6                	mov    %eax,%esi
  8004218f92:	48 bf 90 fc 21 04 80 	movabs $0x800421fc90,%rdi
  8004218f99:	00 00 00 
  8004218f9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218fa1:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  8004218fa8:	00 00 00 
  8004218fab:	41 ff d0             	callq  *%r8
  8004218fae:	eb 51                	jmp    8004219001 <pci_func_enable+0x166>
  8004218fb0:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218fb3:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218fb6:	f7 d8                	neg    %eax
  8004218fb8:	23 45 e8             	and    -0x18(%rbp),%eax
  8004218fbb:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218fbe:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004218fc1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218fc4:	83 e0 fc             	and    $0xfffffffc,%eax
  8004218fc7:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218fca:	48 b8 a0 a5 6d 04 80 	movabs $0x80046da5a0,%rax
  8004218fd1:	00 00 00 
  8004218fd4:	8b 00                	mov    (%rax),%eax
  8004218fd6:	85 c0                	test   %eax,%eax
  8004218fd8:	74 27                	je     8004219001 <pci_func_enable+0x166>
  8004218fda:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004218fdd:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004218fe0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218fe3:	89 c6                	mov    %eax,%esi
  8004218fe5:	48 bf b8 fc 21 04 80 	movabs $0x800421fcb8,%rdi
  8004218fec:	00 00 00 
  8004218fef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218ff4:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  8004218ffb:	00 00 00 
  8004218ffe:	41 ff d0             	callq  *%r8
  8004219001:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219004:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004219007:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421900b:	89 ce                	mov    %ecx,%esi
  800421900d:	48 89 c7             	mov    %rax,%rdi
  8004219010:	48 b8 39 88 21 04 80 	movabs $0x8004218839,%rax
  8004219017:	00 00 00 
  800421901a:	ff d0                	callq  *%rax
  800421901c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219020:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219023:	48 63 d2             	movslq %edx,%rdx
  8004219026:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  800421902a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421902d:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004219031:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219035:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219038:	48 63 d2             	movslq %edx,%rdx
  800421903b:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  800421903f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219042:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  8004219045:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004219049:	74 6d                	je     80042190b8 <pci_func_enable+0x21d>
  800421904b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421904f:	75 67                	jne    80042190b8 <pci_func_enable+0x21d>
  8004219051:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219055:	8b 40 10             	mov    0x10(%rax),%eax
  8004219058:	c1 e8 10             	shr    $0x10,%eax
  800421905b:	41 89 c0             	mov    %eax,%r8d
  800421905e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219062:	8b 40 10             	mov    0x10(%rax),%eax
  8004219065:	0f b7 f8             	movzwl %ax,%edi
  8004219068:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421906c:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421906f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219073:	8b 50 08             	mov    0x8(%rax),%edx
  8004219076:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421907a:	48 8b 00             	mov    (%rax),%rax
  800421907d:	8b 40 08             	mov    0x8(%rax),%eax
  8004219080:	8b 75 f0             	mov    -0x10(%rbp),%esi
  8004219083:	89 74 24 10          	mov    %esi,0x10(%rsp)
  8004219087:	8b 75 f4             	mov    -0xc(%rbp),%esi
  800421908a:	89 74 24 08          	mov    %esi,0x8(%rsp)
  800421908e:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004219091:	89 34 24             	mov    %esi,(%rsp)
  8004219094:	45 89 c1             	mov    %r8d,%r9d
  8004219097:	41 89 f8             	mov    %edi,%r8d
  800421909a:	89 c6                	mov    %eax,%esi
  800421909c:	48 bf e0 fc 21 04 80 	movabs $0x800421fce0,%rdi
  80042190a3:	00 00 00 
  80042190a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042190ab:	49 ba 14 9c 20 04 80 	movabs $0x8004209c14,%r10
  80042190b2:	00 00 00 
  80042190b5:	41 ff d2             	callq  *%r10
  80042190b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042190bb:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042190be:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  80042190c2:	0f 86 08 fe ff ff    	jbe    8004218ed0 <pci_func_enable+0x35>
  80042190c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190cc:	8b 40 10             	mov    0x10(%rax),%eax
  80042190cf:	c1 e8 10             	shr    $0x10,%eax
  80042190d2:	89 c7                	mov    %eax,%edi
  80042190d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042190db:	0f b7 f0             	movzwl %ax,%esi
  80042190de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190e2:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042190e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190e9:	8b 50 08             	mov    0x8(%rax),%edx
  80042190ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190f0:	48 8b 00             	mov    (%rax),%rax
  80042190f3:	8b 40 08             	mov    0x8(%rax),%eax
  80042190f6:	41 89 f9             	mov    %edi,%r9d
  80042190f9:	41 89 f0             	mov    %esi,%r8d
  80042190fc:	89 c6                	mov    %eax,%esi
  80042190fe:	48 bf 40 fd 21 04 80 	movabs $0x800421fd40,%rdi
  8004219105:	00 00 00 
  8004219108:	b8 00 00 00 00       	mov    $0x0,%eax
  800421910d:	49 ba 14 9c 20 04 80 	movabs $0x8004209c14,%r10
  8004219114:	00 00 00 
  8004219117:	41 ff d2             	callq  *%r10
  800421911a:	c9                   	leaveq 
  800421911b:	c3                   	retq   

000000800421911c <pci_init>:
  800421911c:	55                   	push   %rbp
  800421911d:	48 89 e5             	mov    %rsp,%rbp
  8004219120:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219125:	be 00 00 00 00       	mov    $0x0,%esi
  800421912a:	48 bf b0 a5 6d 04 80 	movabs $0x80046da5b0,%rdi
  8004219131:	00 00 00 
  8004219134:	48 b8 33 09 21 04 80 	movabs $0x8004210933,%rax
  800421913b:	00 00 00 
  800421913e:	ff d0                	callq  *%rax
  8004219140:	48 bf b0 a5 6d 04 80 	movabs $0x80046da5b0,%rdi
  8004219147:	00 00 00 
  800421914a:	48 b8 eb 8a 21 04 80 	movabs $0x8004218aeb,%rax
  8004219151:	00 00 00 
  8004219154:	ff d0                	callq  *%rax
  8004219156:	5d                   	pop    %rbp
  8004219157:	c3                   	retq   

0000008004219158 <time_init>:
  8004219158:	55                   	push   %rbp
  8004219159:	48 89 e5             	mov    %rsp,%rbp
  800421915c:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  8004219163:	00 00 00 
  8004219166:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  800421916c:	5d                   	pop    %rbp
  800421916d:	c3                   	retq   

000000800421916e <time_tick>:
  800421916e:	55                   	push   %rbp
  800421916f:	48 89 e5             	mov    %rsp,%rbp
  8004219172:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  8004219179:	00 00 00 
  800421917c:	8b 00                	mov    (%rax),%eax
  800421917e:	8d 50 01             	lea    0x1(%rax),%edx
  8004219181:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  8004219188:	00 00 00 
  800421918b:	89 10                	mov    %edx,(%rax)
  800421918d:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  8004219194:	00 00 00 
  8004219197:	8b 10                	mov    (%rax),%edx
  8004219199:	89 d0                	mov    %edx,%eax
  800421919b:	c1 e0 02             	shl    $0x2,%eax
  800421919e:	01 d0                	add    %edx,%eax
  80042191a0:	01 c0                	add    %eax,%eax
  80042191a2:	89 c2                	mov    %eax,%edx
  80042191a4:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  80042191ab:	00 00 00 
  80042191ae:	8b 00                	mov    (%rax),%eax
  80042191b0:	39 c2                	cmp    %eax,%edx
  80042191b2:	73 2a                	jae    80042191de <time_tick+0x70>
  80042191b4:	48 ba 6f fd 21 04 80 	movabs $0x800421fd6f,%rdx
  80042191bb:	00 00 00 
  80042191be:	be 14 00 00 00       	mov    $0x14,%esi
  80042191c3:	48 bf 8a fd 21 04 80 	movabs $0x800421fd8a,%rdi
  80042191ca:	00 00 00 
  80042191cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042191d2:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042191d9:	00 00 00 
  80042191dc:	ff d1                	callq  *%rcx
  80042191de:	5d                   	pop    %rbp
  80042191df:	c3                   	retq   

00000080042191e0 <time_msec>:
  80042191e0:	55                   	push   %rbp
  80042191e1:	48 89 e5             	mov    %rsp,%rbp
  80042191e4:	48 b8 c0 a5 6d 04 80 	movabs $0x80046da5c0,%rax
  80042191eb:	00 00 00 
  80042191ee:	8b 10                	mov    (%rax),%edx
  80042191f0:	89 d0                	mov    %edx,%eax
  80042191f2:	c1 e0 02             	shl    $0x2,%eax
  80042191f5:	01 d0                	add    %edx,%eax
  80042191f7:	01 c0                	add    %eax,%eax
  80042191f9:	5d                   	pop    %rbp
  80042191fa:	c3                   	retq   

00000080042191fb <page2ppn>:
  80042191fb:	55                   	push   %rbp
  80042191fc:	48 89 e5             	mov    %rsp,%rbp
  80042191ff:	48 83 ec 08          	sub    $0x8,%rsp
  8004219203:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219207:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421920b:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  8004219212:	00 00 00 
  8004219215:	48 8b 00             	mov    (%rax),%rax
  8004219218:	48 29 c2             	sub    %rax,%rdx
  800421921b:	48 89 d0             	mov    %rdx,%rax
  800421921e:	48 c1 f8 04          	sar    $0x4,%rax
  8004219222:	c9                   	leaveq 
  8004219223:	c3                   	retq   

0000008004219224 <page2pa>:
  8004219224:	55                   	push   %rbp
  8004219225:	48 89 e5             	mov    %rsp,%rbp
  8004219228:	48 83 ec 08          	sub    $0x8,%rsp
  800421922c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219230:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219234:	48 89 c7             	mov    %rax,%rdi
  8004219237:	48 b8 fb 91 21 04 80 	movabs $0x80042191fb,%rax
  800421923e:	00 00 00 
  8004219241:	ff d0                	callq  *%rax
  8004219243:	48 c1 e0 0c          	shl    $0xc,%rax
  8004219247:	c9                   	leaveq 
  8004219248:	c3                   	retq   

0000008004219249 <pa2page>:
  8004219249:	55                   	push   %rbp
  800421924a:	48 89 e5             	mov    %rsp,%rbp
  800421924d:	48 83 ec 10          	sub    $0x10,%rsp
  8004219251:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219255:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219259:	48 c1 e8 0c          	shr    $0xc,%rax
  800421925d:	48 89 c2             	mov    %rax,%rdx
  8004219260:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004219267:	00 00 00 
  800421926a:	48 8b 00             	mov    (%rax),%rax
  800421926d:	48 39 c2             	cmp    %rax,%rdx
  8004219270:	72 2a                	jb     800421929c <pa2page+0x53>
  8004219272:	48 ba a0 fd 21 04 80 	movabs $0x800421fda0,%rdx
  8004219279:	00 00 00 
  800421927c:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004219281:	48 bf bf fd 21 04 80 	movabs $0x800421fdbf,%rdi
  8004219288:	00 00 00 
  800421928b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219290:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219297:	00 00 00 
  800421929a:	ff d1                	callq  *%rcx
  800421929c:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042192a3:	00 00 00 
  80042192a6:	48 8b 00             	mov    (%rax),%rax
  80042192a9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042192ad:	48 c1 ea 0c          	shr    $0xc,%rdx
  80042192b1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042192b5:	48 01 d0             	add    %rdx,%rax
  80042192b8:	c9                   	leaveq 
  80042192b9:	c3                   	retq   

00000080042192ba <page2kva>:
  80042192ba:	55                   	push   %rbp
  80042192bb:	48 89 e5             	mov    %rsp,%rbp
  80042192be:	48 83 ec 20          	sub    $0x20,%rsp
  80042192c2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042192c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042192ca:	48 89 c7             	mov    %rax,%rdi
  80042192cd:	48 b8 24 92 21 04 80 	movabs $0x8004219224,%rax
  80042192d4:	00 00 00 
  80042192d7:	ff d0                	callq  *%rax
  80042192d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042192dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042192e1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042192e5:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042192e8:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042192eb:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  80042192f2:	00 00 00 
  80042192f5:	48 8b 00             	mov    (%rax),%rax
  80042192f8:	48 39 c2             	cmp    %rax,%rdx
  80042192fb:	72 32                	jb     800421932f <page2kva+0x75>
  80042192fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219301:	48 89 c1             	mov    %rax,%rcx
  8004219304:	48 ba d0 fd 21 04 80 	movabs $0x800421fdd0,%rdx
  800421930b:	00 00 00 
  800421930e:	be 62 00 00 00       	mov    $0x62,%esi
  8004219313:	48 bf bf fd 21 04 80 	movabs $0x800421fdbf,%rdi
  800421931a:	00 00 00 
  800421931d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219322:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219329:	00 00 00 
  800421932c:	41 ff d0             	callq  *%r8
  800421932f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219336:	00 00 00 
  8004219339:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421933d:	48 01 d0             	add    %rdx,%rax
  8004219340:	c9                   	leaveq 
  8004219341:	c3                   	retq   

0000008004219342 <epte_addr>:
  8004219342:	55                   	push   %rbp
  8004219343:	48 89 e5             	mov    %rsp,%rbp
  8004219346:	48 83 ec 08          	sub    $0x8,%rsp
  800421934a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421934e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219352:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219358:	c9                   	leaveq 
  8004219359:	c3                   	retq   

000000800421935a <epte_present>:
  800421935a:	55                   	push   %rbp
  800421935b:	48 89 e5             	mov    %rsp,%rbp
  800421935e:	48 83 ec 08          	sub    $0x8,%rsp
  8004219362:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219366:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421936a:	83 e0 07             	and    $0x7,%eax
  800421936d:	48 85 c0             	test   %rax,%rax
  8004219370:	0f 95 c0             	setne  %al
  8004219373:	0f b6 c0             	movzbl %al,%eax
  8004219376:	c9                   	leaveq 
  8004219377:	c3                   	retq   

0000008004219378 <ept_lookup_gpa>:
  8004219378:	55                   	push   %rbp
  8004219379:	48 89 e5             	mov    %rsp,%rbp
  800421937c:	48 83 ec 20          	sub    $0x20,%rsp
  8004219380:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219384:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219388:	89 55 ec             	mov    %edx,-0x14(%rbp)
  800421938b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800421938f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219394:	c9                   	leaveq 
  8004219395:	c3                   	retq   

0000008004219396 <ept_gpa2hva>:
  8004219396:	55                   	push   %rbp
  8004219397:	48 89 e5             	mov    %rsp,%rbp
  800421939a:	48 83 ec 40          	sub    $0x40,%rsp
  800421939e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042193a2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042193a6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042193aa:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  80042193ae:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042193b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042193b6:	48 89 d1             	mov    %rdx,%rcx
  80042193b9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042193be:	48 89 c7             	mov    %rax,%rdi
  80042193c1:	48 b8 78 93 21 04 80 	movabs $0x8004219378,%rax
  80042193c8:	00 00 00 
  80042193cb:	ff d0                	callq  *%rax
  80042193cd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042193d0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042193d4:	79 10                	jns    80042193e6 <ept_gpa2hva+0x50>
  80042193d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042193da:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042193e1:	e9 b1 00 00 00       	jmpq   8004219497 <ept_gpa2hva+0x101>
  80042193e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042193ea:	48 8b 00             	mov    (%rax),%rax
  80042193ed:	48 89 c7             	mov    %rax,%rdi
  80042193f0:	48 b8 5a 93 21 04 80 	movabs $0x800421935a,%rax
  80042193f7:	00 00 00 
  80042193fa:	ff d0                	callq  *%rax
  80042193fc:	85 c0                	test   %eax,%eax
  80042193fe:	75 10                	jne    8004219410 <ept_gpa2hva+0x7a>
  8004219400:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219404:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421940b:	e9 87 00 00 00       	jmpq   8004219497 <ept_gpa2hva+0x101>
  8004219410:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219414:	48 8b 00             	mov    (%rax),%rax
  8004219417:	48 89 c7             	mov    %rax,%rdi
  800421941a:	48 b8 42 93 21 04 80 	movabs $0x8004219342,%rax
  8004219421:	00 00 00 
  8004219424:	ff d0                	callq  *%rax
  8004219426:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421942a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421942e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219432:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219435:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219438:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800421943f:	00 00 00 
  8004219442:	48 8b 00             	mov    (%rax),%rax
  8004219445:	48 39 c2             	cmp    %rax,%rdx
  8004219448:	72 32                	jb     800421947c <ept_gpa2hva+0xe6>
  800421944a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421944e:	48 89 c1             	mov    %rax,%rcx
  8004219451:	48 ba d0 fd 21 04 80 	movabs $0x800421fdd0,%rdx
  8004219458:	00 00 00 
  800421945b:	be 40 00 00 00       	mov    $0x40,%esi
  8004219460:	48 bf f3 fd 21 04 80 	movabs $0x800421fdf3,%rdi
  8004219467:	00 00 00 
  800421946a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421946f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219476:	00 00 00 
  8004219479:	41 ff d0             	callq  *%r8
  800421947c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219483:	00 00 00 
  8004219486:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421948a:	48 01 d0             	add    %rdx,%rax
  800421948d:	48 89 c2             	mov    %rax,%rdx
  8004219490:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219494:	48 89 10             	mov    %rdx,(%rax)
  8004219497:	c9                   	leaveq 
  8004219498:	c3                   	retq   

0000008004219499 <free_ept_level>:
  8004219499:	55                   	push   %rbp
  800421949a:	48 89 e5             	mov    %rsp,%rbp
  800421949d:	48 83 ec 40          	sub    $0x40,%rsp
  80042194a1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042194a5:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042194a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042194ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042194b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042194b7:	e9 82 01 00 00       	jmpq   800421963e <free_ept_level+0x1a5>
  80042194bc:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042194c0:	0f 84 fe 00 00 00    	je     80042195c4 <free_ept_level+0x12b>
  80042194c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042194c9:	48 98                	cltq   
  80042194cb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042194d2:	00 
  80042194d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042194d7:	48 01 d0             	add    %rdx,%rax
  80042194da:	48 8b 00             	mov    (%rax),%rax
  80042194dd:	48 89 c7             	mov    %rax,%rdi
  80042194e0:	48 b8 5a 93 21 04 80 	movabs $0x800421935a,%rax
  80042194e7:	00 00 00 
  80042194ea:	ff d0                	callq  *%rax
  80042194ec:	85 c0                	test   %eax,%eax
  80042194ee:	0f 84 46 01 00 00    	je     800421963a <free_ept_level+0x1a1>
  80042194f4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042194f7:	48 98                	cltq   
  80042194f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219500:	00 
  8004219501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219505:	48 01 d0             	add    %rdx,%rax
  8004219508:	48 8b 00             	mov    (%rax),%rax
  800421950b:	48 89 c7             	mov    %rax,%rdi
  800421950e:	48 b8 42 93 21 04 80 	movabs $0x8004219342,%rax
  8004219515:	00 00 00 
  8004219518:	ff d0                	callq  *%rax
  800421951a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421951e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004219521:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004219524:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219528:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421952c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219530:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219534:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219537:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  800421953a:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004219541:	00 00 00 
  8004219544:	48 8b 00             	mov    (%rax),%rax
  8004219547:	48 39 c1             	cmp    %rax,%rcx
  800421954a:	72 32                	jb     800421957e <free_ept_level+0xe5>
  800421954c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219550:	48 89 c1             	mov    %rax,%rcx
  8004219553:	48 ba d0 fd 21 04 80 	movabs $0x800421fdd0,%rdx
  800421955a:	00 00 00 
  800421955d:	be 4d 00 00 00       	mov    $0x4d,%esi
  8004219562:	48 bf f3 fd 21 04 80 	movabs $0x800421fdf3,%rdi
  8004219569:	00 00 00 
  800421956c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219571:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219578:	00 00 00 
  800421957b:	41 ff d0             	callq  *%r8
  800421957e:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  8004219585:	00 00 00 
  8004219588:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421958c:	48 01 c8             	add    %rcx,%rax
  800421958f:	89 d6                	mov    %edx,%esi
  8004219591:	48 89 c7             	mov    %rax,%rdi
  8004219594:	48 b8 99 94 21 04 80 	movabs $0x8004219499,%rax
  800421959b:	00 00 00 
  800421959e:	ff d0                	callq  *%rax
  80042195a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042195a4:	48 89 c7             	mov    %rax,%rdi
  80042195a7:	48 b8 49 92 21 04 80 	movabs $0x8004219249,%rax
  80042195ae:	00 00 00 
  80042195b1:	ff d0                	callq  *%rax
  80042195b3:	48 89 c7             	mov    %rax,%rdi
  80042195b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042195bd:	00 00 00 
  80042195c0:	ff d0                	callq  *%rax
  80042195c2:	eb 76                	jmp    800421963a <free_ept_level+0x1a1>
  80042195c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042195c7:	48 98                	cltq   
  80042195c9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042195d0:	00 
  80042195d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042195d5:	48 01 d0             	add    %rdx,%rax
  80042195d8:	48 8b 00             	mov    (%rax),%rax
  80042195db:	48 89 c7             	mov    %rax,%rdi
  80042195de:	48 b8 5a 93 21 04 80 	movabs $0x800421935a,%rax
  80042195e5:	00 00 00 
  80042195e8:	ff d0                	callq  *%rax
  80042195ea:	85 c0                	test   %eax,%eax
  80042195ec:	74 4c                	je     800421963a <free_ept_level+0x1a1>
  80042195ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042195f1:	48 98                	cltq   
  80042195f3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042195fa:	00 
  80042195fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042195ff:	48 01 d0             	add    %rdx,%rax
  8004219602:	48 8b 00             	mov    (%rax),%rax
  8004219605:	48 89 c7             	mov    %rax,%rdi
  8004219608:	48 b8 42 93 21 04 80 	movabs $0x8004219342,%rax
  800421960f:	00 00 00 
  8004219612:	ff d0                	callq  *%rax
  8004219614:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219618:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421961c:	48 89 c7             	mov    %rax,%rdi
  800421961f:	48 b8 49 92 21 04 80 	movabs $0x8004219249,%rax
  8004219626:	00 00 00 
  8004219629:	ff d0                	callq  *%rax
  800421962b:	48 89 c7             	mov    %rax,%rdi
  800421962e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219635:	00 00 00 
  8004219638:	ff d0                	callq  *%rax
  800421963a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421963e:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  8004219645:	0f 8e 71 fe ff ff    	jle    80042194bc <free_ept_level+0x23>
  800421964b:	90                   	nop
  800421964c:	c9                   	leaveq 
  800421964d:	c3                   	retq   

000000800421964e <free_guest_mem>:
  800421964e:	55                   	push   %rbp
  800421964f:	48 89 e5             	mov    %rsp,%rbp
  8004219652:	48 83 ec 20          	sub    $0x20,%rsp
  8004219656:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421965a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421965e:	be 03 00 00 00       	mov    $0x3,%esi
  8004219663:	48 89 c7             	mov    %rax,%rdi
  8004219666:	48 b8 99 94 21 04 80 	movabs $0x8004219499,%rax
  800421966d:	00 00 00 
  8004219670:	ff d0                	callq  *%rax

static __inline void
tlbflush(void)
{
	uint64_t cr3;
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  8004219672:	0f 20 d8             	mov    %cr3,%rax
  8004219675:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  8004219679:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421967d:	0f 22 d8             	mov    %rax,%cr3
  8004219680:	c9                   	leaveq 
  8004219681:	c3                   	retq   

0000008004219682 <ept_page_insert>:
  8004219682:	55                   	push   %rbp
  8004219683:	48 89 e5             	mov    %rsp,%rbp
  8004219686:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421968a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421968e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219692:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004219696:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004219699:	b8 00 00 00 00       	mov    $0x0,%eax
  800421969e:	c9                   	leaveq 
  800421969f:	c3                   	retq   

00000080042196a0 <ept_map_hva2gpa>:
  80042196a0:	55                   	push   %rbp
  80042196a1:	48 89 e5             	mov    %rsp,%rbp
  80042196a4:	48 83 ec 20          	sub    $0x20,%rsp
  80042196a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042196ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042196b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042196b4:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042196b7:	44 89 45 e0          	mov    %r8d,-0x20(%rbp)
  80042196bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042196c0:	c9                   	leaveq 
  80042196c1:	c3                   	retq   

00000080042196c2 <ept_alloc_static>:
  80042196c2:	55                   	push   %rbp
  80042196c3:	48 89 e5             	mov    %rsp,%rbp
  80042196c6:	53                   	push   %rbx
  80042196c7:	48 83 ec 48          	sub    $0x48,%rsp
  80042196cb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  80042196cf:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  80042196d3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042196da:	00 
  80042196db:	eb 6e                	jmp    800421974b <ept_alloc_static+0x89>
  80042196dd:	bf 00 00 00 00       	mov    $0x0,%edi
  80042196e2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042196e9:	00 00 00 
  80042196ec:	ff d0                	callq  *%rax
  80042196ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042196f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042196f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042196fa:	8d 50 01             	lea    0x1(%rax),%edx
  80042196fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219701:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219705:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  8004219709:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421970d:	48 89 c7             	mov    %rax,%rdi
  8004219710:	48 b8 ba 92 21 04 80 	movabs $0x80042192ba,%rax
  8004219717:	00 00 00 
  800421971a:	ff d0                	callq  *%rax
  800421971c:	48 89 c6             	mov    %rax,%rsi
  800421971f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219723:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219729:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421972e:	48 89 da             	mov    %rbx,%rdx
  8004219731:	48 89 c7             	mov    %rax,%rdi
  8004219734:	48 b8 a0 96 21 04 80 	movabs $0x80042196a0,%rax
  800421973b:	00 00 00 
  800421973e:	ff d0                	callq  *%rax
  8004219740:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219743:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  800421974a:	00 
  800421974b:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  8004219752:	00 
  8004219753:	76 88                	jbe    80042196dd <ept_alloc_static+0x1b>
  8004219755:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  800421975c:	00 
  800421975d:	eb 6e                	jmp    80042197cd <ept_alloc_static+0x10b>
  800421975f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004219764:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421976b:	00 00 00 
  800421976e:	ff d0                	callq  *%rax
  8004219770:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219774:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219778:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421977c:	8d 50 01             	lea    0x1(%rax),%edx
  800421977f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219783:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219787:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  800421978b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421978f:	48 89 c7             	mov    %rax,%rdi
  8004219792:	48 b8 ba 92 21 04 80 	movabs $0x80042192ba,%rax
  8004219799:	00 00 00 
  800421979c:	ff d0                	callq  *%rax
  800421979e:	48 89 c6             	mov    %rax,%rsi
  80042197a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042197a5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042197ab:	b9 07 00 00 00       	mov    $0x7,%ecx
  80042197b0:	48 89 da             	mov    %rbx,%rdx
  80042197b3:	48 89 c7             	mov    %rax,%rdi
  80042197b6:	48 b8 a0 96 21 04 80 	movabs $0x80042196a0,%rax
  80042197bd:	00 00 00 
  80042197c0:	ff d0                	callq  *%rax
  80042197c2:	89 45 cc             	mov    %eax,-0x34(%rbp)
  80042197c5:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  80042197cc:	00 
  80042197cd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042197d1:	48 8b 00             	mov    (%rax),%rax
  80042197d4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042197d8:	77 85                	ja     800421975f <ept_alloc_static+0x9d>
  80042197da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042197df:	48 83 c4 48          	add    $0x48,%rsp
  80042197e3:	5b                   	pop    %rbx
  80042197e4:	5d                   	pop    %rbp
  80042197e5:	c3                   	retq   

00000080042197e6 <vmcs_writel>:
  80042197e6:	55                   	push   %rbp
  80042197e7:	48 89 e5             	mov    %rsp,%rbp
  80042197ea:	48 83 ec 20          	sub    $0x20,%rsp
  80042197ee:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042197f1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042197f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042197f9:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042197fc:	f8                   	clc    
  80042197fd:	0f 79 d0             	vmwrite %rax,%rdx
  8004219800:	0f 96 c0             	setbe  %al
  8004219803:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004219806:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421980a:	c9                   	leaveq 
  800421980b:	c3                   	retq   

000000800421980c <vmcs_readl>:
  800421980c:	55                   	push   %rbp
  800421980d:	48 89 e5             	mov    %rsp,%rbp
  8004219810:	48 83 ec 14          	sub    $0x14,%rsp
  8004219814:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004219817:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421981a:	89 c2                	mov    %eax,%edx
  800421981c:	0f 78 d0             	vmread %rdx,%rax
  800421981f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219823:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219827:	c9                   	leaveq 
  8004219828:	c3                   	retq   

0000008004219829 <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  8004219829:	55                   	push   %rbp
  800421982a:	48 89 e5             	mov    %rsp,%rbp
  800421982d:	53                   	push   %rbx
  800421982e:	48 83 ec 38          	sub    $0x38,%rsp
  8004219832:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  8004219835:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  8004219839:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421983d:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  8004219841:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  8004219845:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219848:	0f a2                	cpuid  
  800421984a:	89 de                	mov    %ebx,%esi
  800421984c:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421984f:	89 75 f0             	mov    %esi,-0x10(%rbp)
  8004219852:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  8004219855:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  8004219858:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421985d:	74 09                	je     8004219868 <cpuid+0x3f>
		*eaxp = eax;
  800421985f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219863:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219866:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  8004219868:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421986d:	74 09                	je     8004219878 <cpuid+0x4f>
		*ebxp = ebx;
  800421986f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219873:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219876:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  8004219878:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421987d:	74 09                	je     8004219888 <cpuid+0x5f>
		*ecxp = ecx;
  800421987f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219883:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219886:	89 10                	mov    %edx,(%rax)
	if (edxp)
  8004219888:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421988d:	74 09                	je     8004219898 <cpuid+0x6f>
		*edxp = edx;
  800421988f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219893:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004219896:	89 10                	mov    %edx,(%rax)
}
  8004219898:	48 83 c4 38          	add    $0x38,%rsp
  800421989c:	5b                   	pop    %rbx
  800421989d:	5d                   	pop    %rbp
  800421989e:	c3                   	retq   

000000800421989f <page2ppn>:
  800421989f:	55                   	push   %rbp
  80042198a0:	48 89 e5             	mov    %rsp,%rbp
  80042198a3:	48 83 ec 08          	sub    $0x8,%rsp
  80042198a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042198ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042198af:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  80042198b6:	00 00 00 
  80042198b9:	48 8b 00             	mov    (%rax),%rax
  80042198bc:	48 29 c2             	sub    %rax,%rdx
  80042198bf:	48 89 d0             	mov    %rdx,%rax
  80042198c2:	48 c1 f8 04          	sar    $0x4,%rax
  80042198c6:	c9                   	leaveq 
  80042198c7:	c3                   	retq   

00000080042198c8 <page2pa>:
  80042198c8:	55                   	push   %rbp
  80042198c9:	48 89 e5             	mov    %rsp,%rbp
  80042198cc:	48 83 ec 08          	sub    $0x8,%rsp
  80042198d0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042198d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042198d8:	48 89 c7             	mov    %rax,%rdi
  80042198db:	48 b8 9f 98 21 04 80 	movabs $0x800421989f,%rax
  80042198e2:	00 00 00 
  80042198e5:	ff d0                	callq  *%rax
  80042198e7:	48 c1 e0 0c          	shl    $0xc,%rax
  80042198eb:	c9                   	leaveq 
  80042198ec:	c3                   	retq   

00000080042198ed <page2kva>:
  80042198ed:	55                   	push   %rbp
  80042198ee:	48 89 e5             	mov    %rsp,%rbp
  80042198f1:	48 83 ec 20          	sub    $0x20,%rsp
  80042198f5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042198f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042198fd:	48 89 c7             	mov    %rax,%rdi
  8004219900:	48 b8 c8 98 21 04 80 	movabs $0x80042198c8,%rax
  8004219907:	00 00 00 
  800421990a:	ff d0                	callq  *%rax
  800421990c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219910:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219914:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219918:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421991b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421991e:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  8004219925:	00 00 00 
  8004219928:	48 8b 00             	mov    (%rax),%rax
  800421992b:	48 39 c2             	cmp    %rax,%rdx
  800421992e:	72 32                	jb     8004219962 <page2kva+0x75>
  8004219930:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219934:	48 89 c1             	mov    %rax,%rcx
  8004219937:	48 ba 00 fe 21 04 80 	movabs $0x800421fe00,%rdx
  800421993e:	00 00 00 
  8004219941:	be 62 00 00 00       	mov    $0x62,%esi
  8004219946:	48 bf 23 fe 21 04 80 	movabs $0x800421fe23,%rdi
  800421994d:	00 00 00 
  8004219950:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219955:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421995c:	00 00 00 
  800421995f:	41 ff d0             	callq  *%r8
  8004219962:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219969:	00 00 00 
  800421996c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219970:	48 01 d0             	add    %rdx,%rax
  8004219973:	c9                   	leaveq 
  8004219974:	c3                   	retq   

0000008004219975 <lock_kernel>:
  8004219975:	55                   	push   %rbp
  8004219976:	48 89 e5             	mov    %rsp,%rbp
  8004219979:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  8004219980:	00 00 00 
  8004219983:	48 b8 bd 7c 21 04 80 	movabs $0x8004217cbd,%rax
  800421998a:	00 00 00 
  800421998d:	ff d0                	callq  *%rax
  800421998f:	5d                   	pop    %rbp
  8004219990:	c3                   	retq   

0000008004219991 <unlock_kernel>:
  8004219991:	55                   	push   %rbp
  8004219992:	48 89 e5             	mov    %rsp,%rbp
  8004219995:	48 bf 60 37 23 04 80 	movabs $0x8004233760,%rdi
  800421999c:	00 00 00 
  800421999f:	48 b8 94 7d 21 04 80 	movabs $0x8004217d94,%rax
  80042199a6:	00 00 00 
  80042199a9:	ff d0                	callq  *%rax
  80042199ab:	f3 90                	pause  
  80042199ad:	5d                   	pop    %rbp
  80042199ae:	c3                   	retq   

00000080042199af <vmx_list_vms>:
  80042199af:	55                   	push   %rbp
  80042199b0:	48 89 e5             	mov    %rsp,%rbp
  80042199b3:	48 83 ec 10          	sub    $0x10,%rsp
  80042199b7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042199be:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042199c5:	e9 96 00 00 00       	jmpq   8004219a60 <vmx_list_vms+0xb1>
  80042199ca:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  80042199d1:	00 00 00 
  80042199d4:	48 8b 10             	mov    (%rax),%rdx
  80042199d7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042199da:	48 98                	cltq   
  80042199dc:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  80042199e3:	48 01 d0             	add    %rdx,%rax
  80042199e6:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  80042199ec:	83 f8 03             	cmp    $0x3,%eax
  80042199ef:	75 6b                	jne    8004219a5c <vmx_list_vms+0xad>
  80042199f1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042199f5:	75 1b                	jne    8004219a12 <vmx_list_vms+0x63>
  80042199f7:	48 bf 32 fe 21 04 80 	movabs $0x800421fe32,%rdi
  80042199fe:	00 00 00 
  8004219a01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219a06:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004219a0d:	00 00 00 
  8004219a10:	ff d2                	callq  *%rdx
  8004219a12:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004219a16:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004219a1d:	00 00 00 
  8004219a20:	48 8b 10             	mov    (%rax),%rdx
  8004219a23:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219a26:	48 98                	cltq   
  8004219a28:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004219a2f:	48 01 d0             	add    %rdx,%rax
  8004219a32:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219a38:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  8004219a3b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219a3e:	89 c6                	mov    %eax,%esi
  8004219a40:	48 bf 40 fe 21 04 80 	movabs $0x800421fe40,%rdi
  8004219a47:	00 00 00 
  8004219a4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219a4f:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  8004219a56:	00 00 00 
  8004219a59:	41 ff d0             	callq  *%r8
  8004219a5c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219a60:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004219a67:	0f 8e 5d ff ff ff    	jle    80042199ca <vmx_list_vms+0x1b>
  8004219a6d:	c9                   	leaveq 
  8004219a6e:	c3                   	retq   

0000008004219a6f <vmx_sel_resume>:
  8004219a6f:	55                   	push   %rbp
  8004219a70:	48 89 e5             	mov    %rsp,%rbp
  8004219a73:	48 83 ec 20          	sub    $0x20,%rsp
  8004219a77:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004219a7a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004219a81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219a88:	e9 84 00 00 00       	jmpq   8004219b11 <vmx_sel_resume+0xa2>
  8004219a8d:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004219a94:	00 00 00 
  8004219a97:	48 8b 10             	mov    (%rax),%rdx
  8004219a9a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219a9d:	48 98                	cltq   
  8004219a9f:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004219aa6:	48 01 d0             	add    %rdx,%rax
  8004219aa9:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004219aaf:	83 f8 03             	cmp    $0x3,%eax
  8004219ab2:	75 59                	jne    8004219b0d <vmx_sel_resume+0x9e>
  8004219ab4:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004219ab8:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219abb:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004219abe:	75 4d                	jne    8004219b0d <vmx_sel_resume+0x9e>
  8004219ac0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219ac3:	89 c6                	mov    %eax,%esi
  8004219ac5:	48 bf 4d fe 21 04 80 	movabs $0x800421fe4d,%rdi
  8004219acc:	00 00 00 
  8004219acf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ad4:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004219adb:	00 00 00 
  8004219ade:	ff d2                	callq  *%rdx
  8004219ae0:	48 b8 58 b2 4d 04 80 	movabs $0x80044db258,%rax
  8004219ae7:	00 00 00 
  8004219aea:	48 8b 10             	mov    (%rax),%rdx
  8004219aed:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219af0:	48 98                	cltq   
  8004219af2:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004219af9:	48 01 d0             	add    %rdx,%rax
  8004219afc:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004219b03:	00 00 00 
  8004219b06:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219b0b:	eb 36                	jmp    8004219b43 <vmx_sel_resume+0xd4>
  8004219b0d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219b11:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004219b18:	0f 8e 6f ff ff ff    	jle    8004219a8d <vmx_sel_resume+0x1e>
  8004219b1e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004219b21:	89 c6                	mov    %eax,%esi
  8004219b23:	48 bf 60 fe 21 04 80 	movabs $0x800421fe60,%rdi
  8004219b2a:	00 00 00 
  8004219b2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b32:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  8004219b39:	00 00 00 
  8004219b3c:	ff d2                	callq  *%rdx
  8004219b3e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b43:	c9                   	leaveq 
  8004219b44:	c3                   	retq   

0000008004219b45 <vmx_check_support>:
  8004219b45:	55                   	push   %rbp
  8004219b46:	48 89 e5             	mov    %rsp,%rbp
  8004219b49:	48 83 ec 10          	sub    $0x10,%rsp
  8004219b4d:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004219b51:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
  8004219b55:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  8004219b59:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004219b5d:	49 89 f0             	mov    %rsi,%r8
  8004219b60:	48 89 c6             	mov    %rax,%rsi
  8004219b63:	bf 00 00 00 00       	mov    $0x0,%edi
  8004219b68:	48 b8 29 98 21 04 80 	movabs $0x8004219829,%rax
  8004219b6f:	00 00 00 
  8004219b72:	ff d0                	callq  *%rax
  8004219b74:	48 ba 88 fe 21 04 80 	movabs $0x800421fe88,%rdx
  8004219b7b:	00 00 00 
  8004219b7e:	be 41 00 00 00       	mov    $0x41,%esi
  8004219b83:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  8004219b8a:	00 00 00 
  8004219b8d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b92:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219b99:	00 00 00 
  8004219b9c:	ff d1                	callq  *%rcx

0000008004219b9e <vmx_check_ept>:
  8004219b9e:	55                   	push   %rbp
  8004219b9f:	48 89 e5             	mov    %rsp,%rbp
  8004219ba2:	48 ba b8 fe 21 04 80 	movabs $0x800421feb8,%rdx
  8004219ba9:	00 00 00 
  8004219bac:	be 55 00 00 00       	mov    $0x55,%esi
  8004219bb1:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  8004219bb8:	00 00 00 
  8004219bbb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219bc0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219bc7:	00 00 00 
  8004219bca:	ff d1                	callq  *%rcx

0000008004219bcc <check_fixed_bits>:
  8004219bcc:	55                   	push   %rbp
  8004219bcd:	48 89 e5             	mov    %rsp,%rbp
  8004219bd0:	48 83 ec 30          	sub    $0x30,%rsp
  8004219bd4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004219bd8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004219bdc:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004219be0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219be7:	e9 96 00 00 00       	jmpq   8004219c82 <check_fixed_bits+0xb6>
  8004219bec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219bef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004219bf3:	89 c1                	mov    %eax,%ecx
  8004219bf5:	48 d3 ea             	shr    %cl,%rdx
  8004219bf8:	48 89 d0             	mov    %rdx,%rax
  8004219bfb:	83 e0 01             	and    $0x1,%eax
  8004219bfe:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004219c01:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  8004219c05:	75 1e                	jne    8004219c25 <check_fixed_bits+0x59>
  8004219c07:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219c0a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004219c0e:	89 c1                	mov    %eax,%ecx
  8004219c10:	48 d3 ea             	shr    %cl,%rdx
  8004219c13:	48 89 d0             	mov    %rdx,%rax
  8004219c16:	83 e0 01             	and    $0x1,%eax
  8004219c19:	48 85 c0             	test   %rax,%rax
  8004219c1c:	75 60                	jne    8004219c7e <check_fixed_bits+0xb2>
  8004219c1e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c23:	eb 6e                	jmp    8004219c93 <check_fixed_bits+0xc7>
  8004219c25:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004219c29:	75 1e                	jne    8004219c49 <check_fixed_bits+0x7d>
  8004219c2b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219c2e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004219c32:	89 c1                	mov    %eax,%ecx
  8004219c34:	48 d3 ea             	shr    %cl,%rdx
  8004219c37:	48 89 d0             	mov    %rdx,%rax
  8004219c3a:	83 e0 01             	and    $0x1,%eax
  8004219c3d:	48 85 c0             	test   %rax,%rax
  8004219c40:	74 3c                	je     8004219c7e <check_fixed_bits+0xb2>
  8004219c42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c47:	eb 4a                	jmp    8004219c93 <check_fixed_bits+0xc7>
  8004219c49:	48 b9 d7 fe 21 04 80 	movabs $0x800421fed7,%rcx
  8004219c50:	00 00 00 
  8004219c53:	48 ba dd fe 21 04 80 	movabs $0x800421fedd,%rdx
  8004219c5a:	00 00 00 
  8004219c5d:	be 6e 00 00 00       	mov    $0x6e,%esi
  8004219c62:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  8004219c69:	00 00 00 
  8004219c6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c71:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219c78:	00 00 00 
  8004219c7b:	41 ff d0             	callq  *%r8
  8004219c7e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004219c82:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219c85:	83 f8 3f             	cmp    $0x3f,%eax
  8004219c88:	0f 86 5e ff ff ff    	jbe    8004219bec <check_fixed_bits+0x20>
  8004219c8e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219c93:	c9                   	leaveq 
  8004219c94:	c3                   	retq   

0000008004219c95 <vmx_init_vmcs>:
  8004219c95:	55                   	push   %rbp
  8004219c96:	48 89 e5             	mov    %rsp,%rbp
  8004219c99:	48 83 ec 40          	sub    $0x40,%rsp
  8004219c9d:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219ca4:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219ca7:	89 c1                	mov    %eax,%ecx
  8004219ca9:	0f 32                	rdmsr  
  8004219cab:	89 55 d8             	mov    %edx,-0x28(%rbp)
  8004219cae:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219cb1:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004219cb8:	00 
	ret = edx;
  8004219cb9:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004219cbc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  8004219cc0:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  8004219cc5:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004219cc8:	48 09 45 c8          	or     %rax,-0x38(%rbp)

	return ret;
  8004219ccc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219cd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219cd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219cd8:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004219cdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219cdf:	48 c1 e8 20          	shr    $0x20,%rax
  8004219ce3:	25 ff 0f 00 00       	and    $0xfff,%eax
  8004219ce8:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219ceb:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  8004219cf2:	76 35                	jbe    8004219d29 <vmx_init_vmcs+0x94>
  8004219cf4:	48 b9 f2 fe 21 04 80 	movabs $0x800421fef2,%rcx
  8004219cfb:	00 00 00 
  8004219cfe:	48 ba dd fe 21 04 80 	movabs $0x800421fedd,%rdx
  8004219d05:	00 00 00 
  8004219d08:	be 7e 00 00 00       	mov    $0x7e,%esi
  8004219d0d:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  8004219d14:	00 00 00 
  8004219d17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d1c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219d23:	00 00 00 
  8004219d26:	41 ff d0             	callq  *%r8
  8004219d29:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219d2e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219d35:	00 00 00 
  8004219d38:	ff d0                	callq  *%rax
  8004219d3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004219d3e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004219d43:	75 07                	jne    8004219d4c <vmx_init_vmcs+0xb7>
  8004219d45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d4a:	eb 4d                	jmp    8004219d99 <vmx_init_vmcs+0x104>
  8004219d4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219d50:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219d54:	8d 50 01             	lea    0x1(%rax),%edx
  8004219d57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219d5b:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219d63:	48 89 c7             	mov    %rax,%rdi
  8004219d66:	48 b8 ed 98 21 04 80 	movabs $0x80042198ed,%rax
  8004219d6d:	00 00 00 
  8004219d70:	ff d0                	callq  *%rax
  8004219d72:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219d76:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  8004219d7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219d7e:	ba 04 00 00 00       	mov    $0x4,%edx
  8004219d83:	48 89 ce             	mov    %rcx,%rsi
  8004219d86:	48 89 c7             	mov    %rax,%rdi
  8004219d89:	48 b8 d5 0a 21 04 80 	movabs $0x8004210ad5,%rax
  8004219d90:	00 00 00 
  8004219d93:	ff d0                	callq  *%rax
  8004219d95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219d99:	c9                   	leaveq 
  8004219d9a:	c3                   	retq   

0000008004219d9b <vmx_init_vmxon>:
  8004219d9b:	55                   	push   %rbp
  8004219d9c:	48 89 e5             	mov    %rsp,%rbp
  8004219d9f:	53                   	push   %rbx
  8004219da0:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  8004219da7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219dac:	48 ba 95 9c 21 04 80 	movabs $0x8004219c95,%rdx
  8004219db3:	00 00 00 
  8004219db6:	ff d2                	callq  *%rdx
  8004219db8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219dbc:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004219dc1:	75 0a                	jne    8004219dcd <vmx_init_vmxon+0x32>
  8004219dc3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004219dc8:	e9 75 04 00 00       	jmpq   800421a242 <vmx_init_vmxon+0x4a7>

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  8004219dcd:	0f 20 c0             	mov    %cr0,%rax
  8004219dd0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  8004219dd4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219dd8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  8004219ddc:	0f 20 e0             	mov    %cr4,%rax
  8004219ddf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  8004219de3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219de7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219deb:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  8004219df0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219df4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
}

static __inline void
lcr0(uint64_t val)
{
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  8004219df8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219dfc:	0f 22 c0             	mov    %rax,%cr0
  8004219dff:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219e06:	8b 45 ac             	mov    -0x54(%rbp),%eax
  8004219e09:	89 c1                	mov    %eax,%ecx
  8004219e0b:	0f 32                	rdmsr  
  8004219e0d:	89 55 a8             	mov    %edx,-0x58(%rbp)
  8004219e10:	89 45 a4             	mov    %eax,-0x5c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219e13:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004219e1a:	00 
	ret = edx;
  8004219e1b:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004219e1e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  8004219e22:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  8004219e27:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004219e2a:	48 09 45 98          	or     %rax,-0x68(%rbp)

	return ret;
  8004219e2e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004219e32:	48 89 c6             	mov    %rax,%rsi
  8004219e35:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219e3c:	8b 45 94             	mov    -0x6c(%rbp),%eax
  8004219e3f:	89 c1                	mov    %eax,%ecx
  8004219e41:	0f 32                	rdmsr  
  8004219e43:	89 55 90             	mov    %edx,-0x70(%rbp)
  8004219e46:	89 45 8c             	mov    %eax,-0x74(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219e49:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  8004219e50:	00 
	ret = edx;
  8004219e51:	8b 45 90             	mov    -0x70(%rbp),%eax
  8004219e54:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  8004219e58:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  8004219e5d:	8b 45 8c             	mov    -0x74(%rbp),%eax
  8004219e60:	48 09 45 80          	or     %rax,-0x80(%rbp)

	return ret;
  8004219e64:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004219e68:	48 89 c1             	mov    %rax,%rcx
  8004219e6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219e6f:	48 89 f2             	mov    %rsi,%rdx
  8004219e72:	48 89 ce             	mov    %rcx,%rsi
  8004219e75:	48 89 c7             	mov    %rax,%rdi
  8004219e78:	48 b8 cc 9b 21 04 80 	movabs $0x8004219bcc,%rax
  8004219e7f:	00 00 00 
  8004219e82:	ff d0                	callq  *%rax
  8004219e84:	88 45 cf             	mov    %al,-0x31(%rbp)
  8004219e87:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  8004219e8b:	83 f0 01             	xor    $0x1,%eax
  8004219e8e:	84 c0                	test   %al,%al
  8004219e90:	74 1d                	je     8004219eaf <vmx_init_vmxon+0x114>
  8004219e92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219e96:	48 89 c7             	mov    %rax,%rdi
  8004219e99:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219ea0:	00 00 00 
  8004219ea3:	ff d0                	callq  *%rax
  8004219ea5:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  8004219eaa:	e9 93 03 00 00       	jmpq   800421a242 <vmx_init_vmxon+0x4a7>
  8004219eaf:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  8004219eb6:	00 
  8004219eb7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219ebb:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static __inline void
lcr4(uint64_t val)
{
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  8004219ec2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004219ec9:	0f 22 e0             	mov    %rax,%cr4
  8004219ecc:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  8004219ed3:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219ed6:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  8004219edc:	89 c1                	mov    %eax,%ecx
  8004219ede:	0f 32                	rdmsr  
  8004219ee0:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  8004219ee6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219eec:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  8004219ef3:	00 00 00 00 
	ret = edx;
  8004219ef7:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  8004219efd:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  8004219f04:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  8004219f0b:	20 
	ret |= eax;
  8004219f0c:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  8004219f12:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)

	return ret;
  8004219f19:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004219f20:	48 89 c6             	mov    %rax,%rsi
  8004219f23:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  8004219f2a:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219f2d:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  8004219f33:	89 c1                	mov    %eax,%ecx
  8004219f35:	0f 32                	rdmsr  
  8004219f37:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  8004219f3d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219f43:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  8004219f4a:	00 00 00 00 
	ret = edx;
  8004219f4e:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  8004219f54:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  8004219f5b:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  8004219f62:	20 
	ret |= eax;
  8004219f63:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  8004219f69:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)

	return ret;
  8004219f70:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004219f77:	48 89 c1             	mov    %rax,%rcx
  8004219f7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219f7e:	48 89 f2             	mov    %rsi,%rdx
  8004219f81:	48 89 ce             	mov    %rcx,%rsi
  8004219f84:	48 89 c7             	mov    %rax,%rdi
  8004219f87:	48 b8 cc 9b 21 04 80 	movabs $0x8004219bcc,%rax
  8004219f8e:	00 00 00 
  8004219f91:	ff d0                	callq  *%rax
  8004219f93:	88 45 cf             	mov    %al,-0x31(%rbp)
  8004219f96:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  8004219f9a:	83 f0 01             	xor    $0x1,%eax
  8004219f9d:	84 c0                	test   %al,%al
  8004219f9f:	74 1d                	je     8004219fbe <vmx_init_vmxon+0x223>
  8004219fa1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219fa5:	48 89 c7             	mov    %rax,%rdi
  8004219fa8:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219faf:	00 00 00 
  8004219fb2:	ff d0                	callq  *%rax
  8004219fb4:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  8004219fb9:	e9 84 02 00 00       	jmpq   800421a242 <vmx_init_vmxon+0x4a7>
  8004219fbe:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  8004219fc5:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  8004219fc8:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  8004219fce:	89 c1                	mov    %eax,%ecx
  8004219fd0:	0f 32                	rdmsr  
  8004219fd2:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  8004219fd8:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  8004219fde:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  8004219fe5:	00 00 00 00 
	ret = edx;
  8004219fe9:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  8004219fef:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  8004219ff6:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  8004219ffd:	20 
	ret |= eax;
  8004219ffe:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421a004:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)

	return ret;
  800421a00b:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421a012:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a016:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a01a:	83 e0 04             	and    $0x4,%eax
  800421a01d:	48 85 c0             	test   %rax,%rax
  800421a020:	0f 85 e8 00 00 00    	jne    800421a10e <vmx_init_vmxon+0x373>
  800421a026:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421a02b:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421a032:	00 00 00 
  800421a035:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a039:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421a040:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421a047:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421a04d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421a054:	48 c1 e8 20          	shr    $0x20,%rax
  800421a058:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421a05e:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421a064:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421a06a:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421a070:	0f 30                	wrmsr  
  800421a072:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421a079:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421a07c:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421a082:	89 c1                	mov    %eax,%ecx
  800421a084:	0f 32                	rdmsr  
  800421a086:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421a08c:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421a092:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421a099:	00 00 00 00 
	ret = edx;
  800421a09d:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421a0a3:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421a0aa:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421a0b1:	20 
	ret |= eax;
  800421a0b2:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421a0b8:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)

	return ret;
  800421a0bf:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421a0c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421a0ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a0ce:	83 e0 04             	and    $0x4,%eax
  800421a0d1:	48 85 c0             	test   %rax,%rax
  800421a0d4:	75 38                	jne    800421a10e <vmx_init_vmxon+0x373>
  800421a0d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a0da:	48 89 c7             	mov    %rax,%rdi
  800421a0dd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a0e4:	00 00 00 
  800421a0e7:	ff d0                	callq  *%rax
  800421a0e9:	48 bf 10 ff 21 04 80 	movabs $0x800421ff10,%rdi
  800421a0f0:	00 00 00 
  800421a0f3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a0f8:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421a0ff:	00 00 00 
  800421a102:	ff d2                	callq  *%rdx
  800421a104:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421a109:	e9 34 01 00 00       	jmpq   800421a242 <vmx_init_vmxon+0x4a7>
  800421a10e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a112:	83 e0 01             	and    $0x1,%eax
  800421a115:	48 85 c0             	test   %rax,%rax
  800421a118:	75 4c                	jne    800421a166 <vmx_init_vmxon+0x3cb>
  800421a11a:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421a11f:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421a126:	00 00 00 
  800421a129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a12d:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421a134:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a13b:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421a141:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a148:	48 c1 e8 20          	shr    $0x20,%rax
  800421a14c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421a152:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421a158:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421a15e:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421a164:	0f 30                	wrmsr  
  800421a166:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a16a:	48 89 c7             	mov    %rax,%rdi
  800421a16d:	48 b8 c8 98 21 04 80 	movabs $0x80042198c8,%rax
  800421a174:	00 00 00 
  800421a177:	ff d0                	callq  *%rax
  800421a179:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421a180:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421a187:	f8                   	clc    
  800421a188:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421a18f:	ff 
  800421a190:	0f 96 c0             	setbe  %al
  800421a193:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421a199:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421a1a0:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421a1a3:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421a1a7:	74 1a                	je     800421a1c3 <vmx_init_vmxon+0x428>
  800421a1a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a1ad:	48 89 c7             	mov    %rax,%rdi
  800421a1b0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421a1b7:	00 00 00 
  800421a1ba:	ff d0                	callq  *%rax
  800421a1bc:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421a1c1:	eb 7f                	jmp    800421a242 <vmx_init_vmxon+0x4a7>
  800421a1c3:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421a1ca:	00 00 00 
  800421a1cd:	ff d0                	callq  *%rax
  800421a1cf:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421a1d6:	00 00 00 
  800421a1d9:	48 98                	cltq   
  800421a1db:	48 c1 e0 03          	shl    $0x3,%rax
  800421a1df:	48 89 c1             	mov    %rax,%rcx
  800421a1e2:	48 c1 e1 04          	shl    $0x4,%rcx
  800421a1e6:	48 01 c8             	add    %rcx,%rax
  800421a1e9:	48 01 d0             	add    %rdx,%rax
  800421a1ec:	48 83 c0 70          	add    $0x70,%rax
  800421a1f0:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421a1f4:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421a1fb:	00 00 00 
  800421a1fe:	ff d0                	callq  *%rax
  800421a200:	89 c3                	mov    %eax,%ebx
  800421a202:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a206:	48 89 c7             	mov    %rax,%rdi
  800421a209:	48 b8 ed 98 21 04 80 	movabs $0x80042198ed,%rax
  800421a210:	00 00 00 
  800421a213:	ff d0                	callq  *%rax
  800421a215:	48 89 c2             	mov    %rax,%rdx
  800421a218:	48 b9 20 c0 6d 04 80 	movabs $0x80046dc020,%rcx
  800421a21f:	00 00 00 
  800421a222:	48 63 c3             	movslq %ebx,%rax
  800421a225:	48 c1 e0 03          	shl    $0x3,%rax
  800421a229:	48 89 c6             	mov    %rax,%rsi
  800421a22c:	48 c1 e6 04          	shl    $0x4,%rsi
  800421a230:	48 01 f0             	add    %rsi,%rax
  800421a233:	48 01 c8             	add    %rcx,%rax
  800421a236:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421a23a:	48 89 10             	mov    %rdx,(%rax)
  800421a23d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a242:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421a249:	5b                   	pop    %rbx
  800421a24a:	5d                   	pop    %rbp
  800421a24b:	c3                   	retq   

000000800421a24c <vmcs_host_init>:
  800421a24c:	55                   	push   %rbp
  800421a24d:	48 89 e5             	mov    %rsp,%rbp
  800421a250:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421a257:	0f 20 c0             	mov    %cr0,%rax
  800421a25a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421a25e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a262:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421a269:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421a26d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421a271:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421a274:	48 89 d6             	mov    %rdx,%rsi
  800421a277:	89 c7                	mov    %eax,%edi
  800421a279:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a280:	00 00 00 
  800421a283:	ff d0                	callq  *%rax

static __inline uint64_t
rcr3(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421a285:	0f 20 d8             	mov    %cr3,%rax
  800421a288:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421a28c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a290:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421a297:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421a29b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421a29f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421a2a2:	48 89 d6             	mov    %rdx,%rsi
  800421a2a5:	89 c7                	mov    %eax,%edi
  800421a2a7:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a2ae:	00 00 00 
  800421a2b1:	ff d0                	callq  *%rax

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421a2b3:	0f 20 e0             	mov    %cr4,%rax
  800421a2b6:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421a2ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a2be:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421a2c5:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421a2c9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421a2cd:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421a2d0:	48 89 d6             	mov    %rdx,%rsi
  800421a2d3:	89 c7                	mov    %eax,%edi
  800421a2d5:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a2dc:	00 00 00 
  800421a2df:	ff d0                	callq  *%rax
  800421a2e1:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421a2e8:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421a2ee:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421a2f2:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421a2f5:	48 89 d6             	mov    %rdx,%rsi
  800421a2f8:	89 c7                	mov    %eax,%edi
  800421a2fa:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a301:	00 00 00 
  800421a304:	ff d0                	callq  *%rax
  800421a306:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421a30d:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421a313:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421a317:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421a31a:	48 89 d6             	mov    %rdx,%rsi
  800421a31d:	89 c7                	mov    %eax,%edi
  800421a31f:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a326:	00 00 00 
  800421a329:	ff d0                	callq  *%rax
  800421a32b:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421a332:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421a338:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421a33c:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421a33f:	48 89 d6             	mov    %rdx,%rsi
  800421a342:	89 c7                	mov    %eax,%edi
  800421a344:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a34b:	00 00 00 
  800421a34e:	ff d0                	callq  *%rax
  800421a350:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421a357:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421a35d:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421a361:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421a364:	48 89 d6             	mov    %rdx,%rsi
  800421a367:	89 c7                	mov    %eax,%edi
  800421a369:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a370:	00 00 00 
  800421a373:	ff d0                	callq  *%rax
  800421a375:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421a37c:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421a382:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421a386:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421a389:	48 89 d6             	mov    %rdx,%rsi
  800421a38c:	89 c7                	mov    %eax,%edi
  800421a38e:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a395:	00 00 00 
  800421a398:	ff d0                	callq  *%rax
  800421a39a:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421a3a1:	0c 00 00 
  800421a3a4:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421a3ab:	08 00 
  800421a3ad:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421a3b4:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421a3ba:	48 89 d6             	mov    %rdx,%rsi
  800421a3bd:	89 c7                	mov    %eax,%edi
  800421a3bf:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a3c6:	00 00 00 
  800421a3c9:	ff d0                	callq  *%rax
  800421a3cb:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421a3d2:	00 00 00 
  800421a3d5:	ff d0                	callq  *%rax
  800421a3d7:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421a3de:	00 00 00 
  800421a3e1:	48 98                	cltq   
  800421a3e3:	48 c1 e0 03          	shl    $0x3,%rax
  800421a3e7:	48 89 c1             	mov    %rax,%rcx
  800421a3ea:	48 c1 e1 04          	shl    $0x4,%rcx
  800421a3ee:	48 01 c8             	add    %rcx,%rax
  800421a3f1:	48 01 d0             	add    %rdx,%rax
  800421a3f4:	0f b6 00             	movzbl (%rax),%eax
  800421a3f7:	0f b6 c0             	movzbl %al,%eax
  800421a3fa:	01 c0                	add    %eax,%eax
  800421a3fc:	83 c0 05             	add    $0x5,%eax
  800421a3ff:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421a402:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a405:	c1 e0 03             	shl    $0x3,%eax
  800421a408:	0f b7 c0             	movzwl %ax,%eax
  800421a40b:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421a412:	0c 00 00 
  800421a415:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421a41c:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421a423:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421a429:	48 89 d6             	mov    %rdx,%rsi
  800421a42c:	89 c7                	mov    %eax,%edi
  800421a42e:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a435:	00 00 00 
  800421a438:	ff d0                	callq  *%rax
  800421a43a:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421a441:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421a448:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421a44f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421a456:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421a45d:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421a464:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421a46b:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421a46e:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421a475:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421a47c:	66 89 10             	mov    %dx,(%rax)
  800421a47f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a486:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421a48d:	6c 00 00 
  800421a490:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421a497:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421a49e:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421a4a4:	48 89 d6             	mov    %rdx,%rsi
  800421a4a7:	89 c7                	mov    %eax,%edi
  800421a4a9:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a4b0:	00 00 00 
  800421a4b3:	ff d0                	callq  *%rax
  800421a4b5:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421a4bc:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421a4c3:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421a4ca:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421a4d1:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421a4d8:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421a4df:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421a4e6:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421a4e9:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421a4f0:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421a4f7:	66 89 10             	mov    %dx,(%rax)
  800421a4fa:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421a501:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421a508:	6c 00 00 
  800421a50b:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421a512:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421a519:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421a51f:	48 89 d6             	mov    %rdx,%rsi
  800421a522:	89 c7                	mov    %eax,%edi
  800421a524:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a52b:	00 00 00 
  800421a52e:	ff d0                	callq  *%rax
  800421a530:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421a537:	6c 00 00 
  800421a53a:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421a541:	00 00 00 00 
  800421a545:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421a54c:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421a552:	48 89 d6             	mov    %rdx,%rsi
  800421a555:	89 c7                	mov    %eax,%edi
  800421a557:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a55e:	00 00 00 
  800421a561:	ff d0                	callq  *%rax
  800421a563:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421a56a:	6c 00 00 
  800421a56d:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421a574:	00 00 00 00 
  800421a578:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421a57f:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421a585:	48 89 d6             	mov    %rdx,%rsi
  800421a588:	89 c7                	mov    %eax,%edi
  800421a58a:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a591:	00 00 00 
  800421a594:	ff d0                	callq  *%rax
  800421a596:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421a59d:	00 00 00 
  800421a5a0:	ff d0                	callq  *%rax
  800421a5a2:	48 98                	cltq   
  800421a5a4:	48 c1 e0 03          	shl    $0x3,%rax
  800421a5a8:	48 89 c2             	mov    %rax,%rdx
  800421a5ab:	48 c1 e2 04          	shl    $0x4,%rdx
  800421a5af:	48 01 d0             	add    %rdx,%rax
  800421a5b2:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421a5b6:	48 b8 20 c0 6d 04 80 	movabs $0x80046dc020,%rax
  800421a5bd:	00 00 00 
  800421a5c0:	48 01 d0             	add    %rdx,%rax
  800421a5c3:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421a5ca:	6c 00 00 
  800421a5cd:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421a5d4:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421a5db:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421a5e1:	48 89 d6             	mov    %rdx,%rsi
  800421a5e4:	89 c7                	mov    %eax,%edi
  800421a5e6:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a5ed:	00 00 00 
  800421a5f0:	ff d0                	callq  *%rax
  800421a5f2:	48 b8 69 bc 21 04 80 	movabs $0x800421bc69,%rax
  800421a5f9:	00 00 00 
  800421a5fc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421a600:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421a604:	48 89 c6             	mov    %rax,%rsi
  800421a607:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421a60c:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a613:	00 00 00 
  800421a616:	ff d0                	callq  *%rax
  800421a618:	c9                   	leaveq 
  800421a619:	c3                   	retq   

000000800421a61a <vmcs_guest_init>:
  800421a61a:	55                   	push   %rbp
  800421a61b:	48 89 e5             	mov    %rsp,%rbp
  800421a61e:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421a625:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421a62c:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421a632:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421a636:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a639:	48 89 d6             	mov    %rdx,%rsi
  800421a63c:	89 c7                	mov    %eax,%edi
  800421a63e:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a645:	00 00 00 
  800421a648:	ff d0                	callq  *%rax
  800421a64a:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421a651:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421a657:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421a65b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421a65e:	48 89 d6             	mov    %rdx,%rsi
  800421a661:	89 c7                	mov    %eax,%edi
  800421a663:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a66a:	00 00 00 
  800421a66d:	ff d0                	callq  *%rax
  800421a66f:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421a676:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421a67c:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421a680:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a683:	48 89 d6             	mov    %rdx,%rsi
  800421a686:	89 c7                	mov    %eax,%edi
  800421a688:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a68f:	00 00 00 
  800421a692:	ff d0                	callq  *%rax
  800421a694:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421a69b:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421a6a1:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421a6a5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421a6a8:	48 89 d6             	mov    %rdx,%rsi
  800421a6ab:	89 c7                	mov    %eax,%edi
  800421a6ad:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a6b4:	00 00 00 
  800421a6b7:	ff d0                	callq  *%rax
  800421a6b9:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421a6c0:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421a6c6:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421a6ca:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a6cd:	48 89 d6             	mov    %rdx,%rsi
  800421a6d0:	89 c7                	mov    %eax,%edi
  800421a6d2:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a6d9:	00 00 00 
  800421a6dc:	ff d0                	callq  *%rax
  800421a6de:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421a6e5:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421a6eb:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421a6ef:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421a6f2:	48 89 d6             	mov    %rdx,%rsi
  800421a6f5:	89 c7                	mov    %eax,%edi
  800421a6f7:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a6fe:	00 00 00 
  800421a701:	ff d0                	callq  *%rax
  800421a703:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421a70a:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421a710:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421a714:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421a717:	48 89 d6             	mov    %rdx,%rsi
  800421a71a:	89 c7                	mov    %eax,%edi
  800421a71c:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a723:	00 00 00 
  800421a726:	ff d0                	callq  *%rax
  800421a728:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421a72f:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421a735:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421a739:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421a73c:	48 89 d6             	mov    %rdx,%rsi
  800421a73f:	89 c7                	mov    %eax,%edi
  800421a741:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a748:	00 00 00 
  800421a74b:	ff d0                	callq  *%rax
  800421a74d:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421a754:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421a75b:	00 
  800421a75c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421a760:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421a763:	48 89 d6             	mov    %rdx,%rsi
  800421a766:	89 c7                	mov    %eax,%edi
  800421a768:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a76f:	00 00 00 
  800421a772:	ff d0                	callq  *%rax
  800421a774:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421a77b:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421a782:	00 
  800421a783:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421a787:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421a78a:	48 89 d6             	mov    %rdx,%rsi
  800421a78d:	89 c7                	mov    %eax,%edi
  800421a78f:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a796:	00 00 00 
  800421a799:	ff d0                	callq  *%rax
  800421a79b:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421a7a2:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421a7a9:	00 
  800421a7aa:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421a7ae:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421a7b1:	48 89 d6             	mov    %rdx,%rsi
  800421a7b4:	89 c7                	mov    %eax,%edi
  800421a7b6:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a7bd:	00 00 00 
  800421a7c0:	ff d0                	callq  *%rax
  800421a7c2:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421a7c9:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421a7d0:	00 
  800421a7d1:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421a7d5:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421a7d8:	48 89 d6             	mov    %rdx,%rsi
  800421a7db:	89 c7                	mov    %eax,%edi
  800421a7dd:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a7e4:	00 00 00 
  800421a7e7:	ff d0                	callq  *%rax
  800421a7e9:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421a7f0:	68 00 00 
  800421a7f3:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421a7fa:	00 00 00 00 
  800421a7fe:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421a805:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421a80b:	48 89 d6             	mov    %rdx,%rsi
  800421a80e:	89 c7                	mov    %eax,%edi
  800421a810:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a817:	00 00 00 
  800421a81a:	ff d0                	callq  *%rax
  800421a81c:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421a823:	68 00 00 
  800421a826:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421a82d:	00 00 00 00 
  800421a831:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421a838:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421a83e:	48 89 d6             	mov    %rdx,%rsi
  800421a841:	89 c7                	mov    %eax,%edi
  800421a843:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a84a:	00 00 00 
  800421a84d:	ff d0                	callq  *%rax
  800421a84f:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421a856:	68 00 00 
  800421a859:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421a860:	00 00 00 00 
  800421a864:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421a86b:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421a871:	48 89 d6             	mov    %rdx,%rsi
  800421a874:	89 c7                	mov    %eax,%edi
  800421a876:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a87d:	00 00 00 
  800421a880:	ff d0                	callq  *%rax
  800421a882:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421a889:	68 00 00 
  800421a88c:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421a893:	00 00 00 00 
  800421a897:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421a89e:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421a8a4:	48 89 d6             	mov    %rdx,%rsi
  800421a8a7:	89 c7                	mov    %eax,%edi
  800421a8a9:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a8b0:	00 00 00 
  800421a8b3:	ff d0                	callq  *%rax
  800421a8b5:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421a8bc:	68 00 00 
  800421a8bf:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421a8c6:	00 00 00 00 
  800421a8ca:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421a8d1:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421a8d7:	48 89 d6             	mov    %rdx,%rsi
  800421a8da:	89 c7                	mov    %eax,%edi
  800421a8dc:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a8e3:	00 00 00 
  800421a8e6:	ff d0                	callq  *%rax
  800421a8e8:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421a8ef:	68 00 00 
  800421a8f2:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421a8f9:	00 00 00 00 
  800421a8fd:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421a904:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421a90a:	48 89 d6             	mov    %rdx,%rsi
  800421a90d:	89 c7                	mov    %eax,%edi
  800421a90f:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a916:	00 00 00 
  800421a919:	ff d0                	callq  *%rax
  800421a91b:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421a922:	48 00 00 
  800421a925:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421a92c:	ff 00 00 
  800421a92f:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421a935:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421a93b:	48 89 d6             	mov    %rdx,%rsi
  800421a93e:	89 c7                	mov    %eax,%edi
  800421a940:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a947:	00 00 00 
  800421a94a:	ff d0                	callq  *%rax
  800421a94c:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421a953:	48 00 00 
  800421a956:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421a95d:	ff 00 00 
  800421a960:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421a966:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421a96c:	48 89 d6             	mov    %rdx,%rsi
  800421a96f:	89 c7                	mov    %eax,%edi
  800421a971:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a978:	00 00 00 
  800421a97b:	ff d0                	callq  *%rax
  800421a97d:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421a984:	48 00 00 
  800421a987:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421a98e:	ff 00 00 
  800421a991:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421a997:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421a99d:	48 89 d6             	mov    %rdx,%rsi
  800421a9a0:	89 c7                	mov    %eax,%edi
  800421a9a2:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a9a9:	00 00 00 
  800421a9ac:	ff d0                	callq  *%rax
  800421a9ae:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421a9b5:	48 00 00 
  800421a9b8:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421a9bf:	ff 00 00 
  800421a9c2:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421a9c8:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421a9ce:	48 89 d6             	mov    %rdx,%rsi
  800421a9d1:	89 c7                	mov    %eax,%edi
  800421a9d3:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421a9da:	00 00 00 
  800421a9dd:	ff d0                	callq  *%rax
  800421a9df:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421a9e6:	48 00 00 
  800421a9e9:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421a9f0:	ff 00 00 
  800421a9f3:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421a9f9:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421a9ff:	48 89 d6             	mov    %rdx,%rsi
  800421aa02:	89 c7                	mov    %eax,%edi
  800421aa04:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421aa0b:	00 00 00 
  800421aa0e:	ff d0                	callq  *%rax
  800421aa10:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421aa17:	48 00 00 
  800421aa1a:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421aa21:	ff 00 00 
  800421aa24:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421aa2a:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421aa30:	48 89 d6             	mov    %rdx,%rsi
  800421aa33:	89 c7                	mov    %eax,%edi
  800421aa35:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421aa3c:	00 00 00 
  800421aa3f:	ff d0                	callq  *%rax
  800421aa41:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421aa48:	48 00 00 
  800421aa4b:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421aa52:	ff 00 00 
  800421aa55:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421aa5b:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421aa61:	48 89 d6             	mov    %rdx,%rsi
  800421aa64:	89 c7                	mov    %eax,%edi
  800421aa66:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421aa6d:	00 00 00 
  800421aa70:	ff d0                	callq  *%rax
  800421aa72:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421aa79:	48 00 00 
  800421aa7c:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421aa83:	ff 0f 00 
  800421aa86:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421aa8c:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421aa92:	48 89 d6             	mov    %rdx,%rsi
  800421aa95:	89 c7                	mov    %eax,%edi
  800421aa97:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421aa9e:	00 00 00 
  800421aaa1:	ff d0                	callq  *%rax
  800421aaa3:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421aaaa:	48 00 00 
  800421aaad:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421aab4:	00 00 00 
  800421aab7:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421aabd:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421aac3:	48 89 d6             	mov    %rdx,%rsi
  800421aac6:	89 c7                	mov    %eax,%edi
  800421aac8:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421aacf:	00 00 00 
  800421aad2:	ff d0                	callq  *%rax
  800421aad4:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421aadb:	48 00 00 
  800421aade:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421aae5:	03 00 00 
  800421aae8:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421aaee:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421aaf4:	48 89 d6             	mov    %rdx,%rsi
  800421aaf7:	89 c7                	mov    %eax,%edi
  800421aaf9:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ab00:	00 00 00 
  800421ab03:	ff d0                	callq  *%rax
  800421ab05:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421ab0c:	48 00 00 
  800421ab0f:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421ab16:	00 00 00 
  800421ab19:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421ab1f:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421ab25:	48 89 d6             	mov    %rdx,%rsi
  800421ab28:	89 c7                	mov    %eax,%edi
  800421ab2a:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ab31:	00 00 00 
  800421ab34:	ff d0                	callq  *%rax
  800421ab36:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421ab3d:	48 00 00 
  800421ab40:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421ab47:	00 00 00 
  800421ab4a:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421ab50:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421ab56:	48 89 d6             	mov    %rdx,%rsi
  800421ab59:	89 c7                	mov    %eax,%edi
  800421ab5b:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ab62:	00 00 00 
  800421ab65:	ff d0                	callq  *%rax
  800421ab67:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421ab6e:	48 00 00 
  800421ab71:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421ab78:	00 00 00 
  800421ab7b:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421ab81:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421ab87:	48 89 d6             	mov    %rdx,%rsi
  800421ab8a:	89 c7                	mov    %eax,%edi
  800421ab8c:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ab93:	00 00 00 
  800421ab96:	ff d0                	callq  *%rax
  800421ab98:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421ab9f:	48 00 00 
  800421aba2:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421aba9:	00 00 00 
  800421abac:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421abb2:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421abb8:	48 89 d6             	mov    %rdx,%rsi
  800421abbb:	89 c7                	mov    %eax,%edi
  800421abbd:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421abc4:	00 00 00 
  800421abc7:	ff d0                	callq  *%rax
  800421abc9:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421abd0:	48 00 00 
  800421abd3:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421abda:	00 00 00 
  800421abdd:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421abe3:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421abe9:	48 89 d6             	mov    %rdx,%rsi
  800421abec:	89 c7                	mov    %eax,%edi
  800421abee:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421abf5:	00 00 00 
  800421abf8:	ff d0                	callq  *%rax
  800421abfa:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421ac01:	48 00 00 
  800421ac04:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421ac0b:	00 00 00 
  800421ac0e:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421ac14:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421ac1a:	48 89 d6             	mov    %rdx,%rsi
  800421ac1d:	89 c7                	mov    %eax,%edi
  800421ac1f:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ac26:	00 00 00 
  800421ac29:	ff d0                	callq  *%rax
  800421ac2b:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421ac32:	48 00 00 
  800421ac35:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421ac3c:	00 00 00 
  800421ac3f:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421ac45:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421ac4b:	48 89 d6             	mov    %rdx,%rsi
  800421ac4e:	89 c7                	mov    %eax,%edi
  800421ac50:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ac57:	00 00 00 
  800421ac5a:	ff d0                	callq  *%rax
  800421ac5c:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421ac63:	48 00 00 
  800421ac66:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421ac6d:	00 00 00 
  800421ac70:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421ac76:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421ac7c:	48 89 d6             	mov    %rdx,%rsi
  800421ac7f:	89 c7                	mov    %eax,%edi
  800421ac81:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ac88:	00 00 00 
  800421ac8b:	ff d0                	callq  *%rax
  800421ac8d:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421ac94:	48 00 00 
  800421ac97:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421ac9e:	00 00 00 
  800421aca1:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421aca7:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421acad:	48 89 d6             	mov    %rdx,%rsi
  800421acb0:	89 c7                	mov    %eax,%edi
  800421acb2:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421acb9:	00 00 00 
  800421acbc:	ff d0                	callq  *%rax
  800421acbe:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421acc5:	48 00 00 
  800421acc8:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421accf:	00 00 00 
  800421acd2:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421acd8:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421acde:	48 89 d6             	mov    %rdx,%rsi
  800421ace1:	89 c7                	mov    %eax,%edi
  800421ace3:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421acea:	00 00 00 
  800421aced:	ff d0                	callq  *%rax
  800421acef:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421acf6:	68 00 00 
  800421acf9:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421ad00:	00 00 00 00 
  800421ad04:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421ad0b:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421ad11:	48 89 d6             	mov    %rdx,%rsi
  800421ad14:	89 c7                	mov    %eax,%edi
  800421ad16:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ad1d:	00 00 00 
  800421ad20:	ff d0                	callq  *%rax
  800421ad22:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421ad29:	68 00 00 
  800421ad2c:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421ad33:	20 00 00 00 
  800421ad37:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421ad3e:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421ad44:	48 89 d6             	mov    %rdx,%rsi
  800421ad47:	89 c7                	mov    %eax,%edi
  800421ad49:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ad50:	00 00 00 
  800421ad53:	ff d0                	callq  *%rax
  800421ad55:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421ad5c:	68 00 00 
  800421ad5f:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421ad66:	00 20 00 00 
  800421ad6a:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421ad71:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421ad77:	48 89 d6             	mov    %rdx,%rsi
  800421ad7a:	89 c7                	mov    %eax,%edi
  800421ad7c:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ad83:	00 00 00 
  800421ad86:	ff d0                	callq  *%rax
  800421ad88:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421ad8f:	28 00 00 
  800421ad92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421ad97:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421ad9e:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421ada5:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421adab:	48 89 d6             	mov    %rdx,%rsi
  800421adae:	89 c7                	mov    %eax,%edi
  800421adb0:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421adb7:	00 00 00 
  800421adba:	ff d0                	callq  *%rax
  800421adbc:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421adc3:	28 00 00 
  800421adc6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421adcb:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421add2:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421add9:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421addf:	48 89 d6             	mov    %rdx,%rsi
  800421ade2:	89 c7                	mov    %eax,%edi
  800421ade4:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421adeb:	00 00 00 
  800421adee:	ff d0                	callq  *%rax
  800421adf0:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421adf7:	68 00 00 
  800421adfa:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421ae01:	00 00 00 00 
  800421ae05:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421ae0c:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421ae12:	48 89 d6             	mov    %rdx,%rsi
  800421ae15:	89 c7                	mov    %eax,%edi
  800421ae17:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ae1e:	00 00 00 
  800421ae21:	ff d0                	callq  *%rax
  800421ae23:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421ae2a:	68 00 00 
  800421ae2d:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421ae34:	02 00 00 00 
  800421ae38:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421ae3f:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421ae45:	48 89 d6             	mov    %rdx,%rsi
  800421ae48:	89 c7                	mov    %eax,%edi
  800421ae4a:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421ae51:	00 00 00 
  800421ae54:	ff d0                	callq  *%rax
  800421ae56:	c9                   	leaveq 
  800421ae57:	c3                   	retq   

000000800421ae58 <vmx_read_capability_msr>:
  800421ae58:	55                   	push   %rbp
  800421ae59:	48 89 e5             	mov    %rsp,%rbp
  800421ae5c:	48 83 ec 38          	sub    $0x38,%rsp
  800421ae60:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421ae63:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421ae67:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421ae6b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ae6e:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ae71:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421ae74:	89 c1                	mov    %eax,%ecx
  800421ae76:	0f 32                	rdmsr  
  800421ae78:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421ae7b:	89 45 ec             	mov    %eax,-0x14(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ae7e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421ae85:	00 
	ret = edx;
  800421ae86:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421ae89:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421ae8d:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421ae92:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421ae95:	48 09 45 e0          	or     %rax,-0x20(%rbp)

	return ret;
  800421ae99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ae9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421aea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421aea5:	48 c1 e8 20          	shr    $0x20,%rax
  800421aea9:	89 c2                	mov    %eax,%edx
  800421aeab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421aeaf:	89 10                	mov    %edx,(%rax)
  800421aeb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421aeb5:	89 c2                	mov    %eax,%edx
  800421aeb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421aebb:	89 10                	mov    %edx,(%rax)
  800421aebd:	c9                   	leaveq 
  800421aebe:	c3                   	retq   

000000800421aebf <vmcs_ctls_init>:
  800421aebf:	55                   	push   %rbp
  800421aec0:	48 89 e5             	mov    %rsp,%rbp
  800421aec3:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421aeca:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421aed1:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421aed8:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421aedf:	48 89 c6             	mov    %rax,%rsi
  800421aee2:	bf 81 04 00 00       	mov    $0x481,%edi
  800421aee7:	48 b8 58 ae 21 04 80 	movabs $0x800421ae58,%rax
  800421aeee:	00 00 00 
  800421aef1:	ff d0                	callq  *%rax
  800421aef3:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421aef9:	83 c8 01             	or     $0x1,%eax
  800421aefc:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421af02:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421af08:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421af0e:	21 d0                	and    %edx,%eax
  800421af10:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421af17:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421af1a:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421af1d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421af20:	48 89 d6             	mov    %rdx,%rsi
  800421af23:	89 c7                	mov    %eax,%edi
  800421af25:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421af2c:	00 00 00 
  800421af2f:	ff d0                	callq  *%rax
  800421af31:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421af38:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421af3f:	48 89 c6             	mov    %rax,%rsi
  800421af42:	bf 82 04 00 00       	mov    $0x482,%edi
  800421af47:	48 b8 58 ae 21 04 80 	movabs $0x800421ae58,%rax
  800421af4e:	00 00 00 
  800421af51:	ff d0                	callq  *%rax
  800421af53:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421af59:	c1 e8 1f             	shr    $0x1f,%eax
  800421af5c:	83 f8 01             	cmp    $0x1,%eax
  800421af5f:	74 35                	je     800421af96 <vmcs_ctls_init+0xd7>
  800421af61:	48 b9 40 ff 21 04 80 	movabs $0x800421ff40,%rcx
  800421af68:	00 00 00 
  800421af6b:	48 ba dd fe 21 04 80 	movabs $0x800421fedd,%rdx
  800421af72:	00 00 00 
  800421af75:	be 5e 01 00 00       	mov    $0x15e,%esi
  800421af7a:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421af81:	00 00 00 
  800421af84:	b8 00 00 00 00       	mov    $0x0,%eax
  800421af89:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421af90:	00 00 00 
  800421af93:	41 ff d0             	callq  *%r8
  800421af96:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421af9c:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421afa1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421afa7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421afad:	0c 80                	or     $0x80,%al
  800421afaf:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421afb5:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421afbb:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421afc0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421afc6:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421afcc:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421afd1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421afd7:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421afdd:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421afe3:	21 d0                	and    %edx,%eax
  800421afe5:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421afec:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421afef:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421aff2:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421aff5:	48 89 d6             	mov    %rdx,%rsi
  800421aff8:	89 c7                	mov    %eax,%edi
  800421affa:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b001:	00 00 00 
  800421b004:	ff d0                	callq  *%rax
  800421b006:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421b00d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421b014:	48 89 c6             	mov    %rax,%rsi
  800421b017:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421b01c:	48 b8 58 ae 21 04 80 	movabs $0x800421ae58,%rax
  800421b023:	00 00 00 
  800421b026:	ff d0                	callq  *%rax
  800421b028:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b02e:	83 c8 02             	or     $0x2,%eax
  800421b031:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421b037:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b03d:	0c 80                	or     $0x80,%al
  800421b03f:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421b045:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421b04b:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421b051:	21 d0                	and    %edx,%eax
  800421b053:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421b05a:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421b05d:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421b060:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421b063:	48 89 d6             	mov    %rdx,%rsi
  800421b066:	89 c7                	mov    %eax,%edi
  800421b068:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b06f:	00 00 00 
  800421b072:	ff d0                	callq  *%rax
  800421b074:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421b07b:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421b082:	48 89 c6             	mov    %rax,%rsi
  800421b085:	bf 83 04 00 00       	mov    $0x483,%edi
  800421b08a:	48 b8 58 ae 21 04 80 	movabs $0x800421ae58,%rax
  800421b091:	00 00 00 
  800421b094:	ff d0                	callq  *%rax
  800421b096:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b09c:	80 cc 02             	or     $0x2,%ah
  800421b09f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421b0a5:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b0ab:	80 cc 80             	or     $0x80,%ah
  800421b0ae:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421b0b4:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421b0ba:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421b0c0:	21 d0                	and    %edx,%eax
  800421b0c2:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421b0c9:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421b0cc:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421b0cf:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421b0d2:	48 89 d6             	mov    %rdx,%rsi
  800421b0d5:	89 c7                	mov    %eax,%edi
  800421b0d7:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b0de:	00 00 00 
  800421b0e1:	ff d0                	callq  *%rax
  800421b0e3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b0ea:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421b0f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421b0f5:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b0fc:	00 00 00 
  800421b0ff:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421b103:	77 32                	ja     800421b137 <vmcs_ctls_init+0x278>
  800421b105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b109:	48 89 c1             	mov    %rax,%rcx
  800421b10c:	48 ba 68 ff 21 04 80 	movabs $0x800421ff68,%rdx
  800421b113:	00 00 00 
  800421b116:	be 82 01 00 00       	mov    $0x182,%esi
  800421b11b:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421b122:	00 00 00 
  800421b125:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b12a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b131:	00 00 00 
  800421b134:	41 ff d0             	callq  *%r8
  800421b137:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b13e:	ff ff ff 
  800421b141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421b145:	48 01 d0             	add    %rdx,%rax
  800421b148:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421b14f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421b153:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421b157:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b15a:	48 89 d6             	mov    %rdx,%rsi
  800421b15d:	89 c7                	mov    %eax,%edi
  800421b15f:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b166:	00 00 00 
  800421b169:	ff d0                	callq  *%rax
  800421b16b:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b172:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421b178:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421b17f:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421b182:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421b185:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b188:	48 89 d6             	mov    %rdx,%rsi
  800421b18b:	89 c7                	mov    %eax,%edi
  800421b18d:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b194:	00 00 00 
  800421b197:	ff d0                	callq  *%rax
  800421b199:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b1a0:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421b1a7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421b1ab:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b1b2:	00 00 00 
  800421b1b5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421b1b9:	77 32                	ja     800421b1ed <vmcs_ctls_init+0x32e>
  800421b1bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421b1bf:	48 89 c1             	mov    %rax,%rcx
  800421b1c2:	48 ba 68 ff 21 04 80 	movabs $0x800421ff68,%rdx
  800421b1c9:	00 00 00 
  800421b1cc:	be 86 01 00 00       	mov    $0x186,%esi
  800421b1d1:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421b1d8:	00 00 00 
  800421b1db:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b1e0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b1e7:	00 00 00 
  800421b1ea:	41 ff d0             	callq  *%r8
  800421b1ed:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b1f4:	ff ff ff 
  800421b1f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421b1fb:	48 01 d0             	add    %rdx,%rax
  800421b1fe:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421b205:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421b209:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421b20d:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b210:	48 89 d6             	mov    %rdx,%rsi
  800421b213:	89 c7                	mov    %eax,%edi
  800421b215:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b21c:	00 00 00 
  800421b21f:	ff d0                	callq  *%rax
  800421b221:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b228:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421b22e:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421b235:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421b238:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421b23b:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421b23e:	48 89 d6             	mov    %rdx,%rsi
  800421b241:	89 c7                	mov    %eax,%edi
  800421b243:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b24a:	00 00 00 
  800421b24d:	ff d0                	callq  *%rax
  800421b24f:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421b256:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421b25d:	48 89 c6             	mov    %rax,%rsi
  800421b260:	bf 84 04 00 00       	mov    $0x484,%edi
  800421b265:	48 b8 58 ae 21 04 80 	movabs $0x800421ae58,%rax
  800421b26c:	00 00 00 
  800421b26f:	ff d0                	callq  *%rax
  800421b271:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b278:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421b27f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b283:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b28a:	00 00 00 
  800421b28d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421b291:	77 32                	ja     800421b2c5 <vmcs_ctls_init+0x406>
  800421b293:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b297:	48 89 c1             	mov    %rax,%rcx
  800421b29a:	48 ba 68 ff 21 04 80 	movabs $0x800421ff68,%rdx
  800421b2a1:	00 00 00 
  800421b2a4:	be 90 01 00 00       	mov    $0x190,%esi
  800421b2a9:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421b2b0:	00 00 00 
  800421b2b3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b2b8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b2bf:	00 00 00 
  800421b2c2:	41 ff d0             	callq  *%r8
  800421b2c5:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b2cc:	ff ff ff 
  800421b2cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b2d3:	48 01 d0             	add    %rdx,%rax
  800421b2d6:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421b2dd:	20 00 00 
  800421b2e0:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421b2e7:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421b2ee:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b2f4:	48 89 d6             	mov    %rdx,%rsi
  800421b2f7:	89 c7                	mov    %eax,%edi
  800421b2f9:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b300:	00 00 00 
  800421b303:	ff d0                	callq  *%rax
  800421b305:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b30c:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421b312:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421b319:	40 00 00 
  800421b31c:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421b322:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421b328:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421b32e:	48 89 d6             	mov    %rdx,%rsi
  800421b331:	89 c7                	mov    %eax,%edi
  800421b333:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b33a:	00 00 00 
  800421b33d:	ff d0                	callq  *%rax
  800421b33f:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421b345:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421b34b:	21 d0                	and    %edx,%eax
  800421b34d:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421b354:	40 00 00 
  800421b357:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421b35d:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421b363:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421b369:	48 89 d6             	mov    %rdx,%rsi
  800421b36c:	89 c7                	mov    %eax,%edi
  800421b36e:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b375:	00 00 00 
  800421b378:	ff d0                	callq  *%rax
  800421b37a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b381:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421b388:	48 83 c8 18          	or     $0x18,%rax
  800421b38c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421b390:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421b397:	20 00 00 
  800421b39a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b39e:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421b3a5:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b3ac:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b3b2:	48 89 d6             	mov    %rdx,%rsi
  800421b3b5:	89 c7                	mov    %eax,%edi
  800421b3b7:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b3be:	00 00 00 
  800421b3c1:	ff d0                	callq  *%rax
  800421b3c3:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b3ca:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421b3d0:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421b3d7:	40 00 00 
  800421b3da:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421b3e0:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421b3e6:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421b3ec:	48 89 d6             	mov    %rdx,%rsi
  800421b3ef:	89 c7                	mov    %eax,%edi
  800421b3f1:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b3f8:	00 00 00 
  800421b3fb:	ff d0                	callq  *%rax
  800421b3fd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b404:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421b40b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421b40f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b416:	00 00 00 
  800421b419:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421b41d:	77 32                	ja     800421b451 <vmcs_ctls_init+0x592>
  800421b41f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b423:	48 89 c1             	mov    %rax,%rcx
  800421b426:	48 ba 68 ff 21 04 80 	movabs $0x800421ff68,%rdx
  800421b42d:	00 00 00 
  800421b430:	be 9d 01 00 00       	mov    $0x19d,%esi
  800421b435:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421b43c:	00 00 00 
  800421b43f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b444:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b44b:	00 00 00 
  800421b44e:	41 ff d0             	callq  *%r8
  800421b451:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b458:	ff ff ff 
  800421b45b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421b45f:	48 01 d0             	add    %rdx,%rax
  800421b462:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421b469:	20 00 00 
  800421b46c:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421b473:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421b47a:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421b480:	48 89 d6             	mov    %rdx,%rsi
  800421b483:	89 c7                	mov    %eax,%edi
  800421b485:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b48c:	00 00 00 
  800421b48f:	ff d0                	callq  *%rax
  800421b491:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421b498:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421b49f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421b4a3:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421b4aa:	00 00 00 
  800421b4ad:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421b4b1:	77 32                	ja     800421b4e5 <vmcs_ctls_init+0x626>
  800421b4b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b4b7:	48 89 c1             	mov    %rax,%rcx
  800421b4ba:	48 ba 68 ff 21 04 80 	movabs $0x800421ff68,%rdx
  800421b4c1:	00 00 00 
  800421b4c4:	be 9f 01 00 00       	mov    $0x19f,%esi
  800421b4c9:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421b4d0:	00 00 00 
  800421b4d3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b4d8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421b4df:	00 00 00 
  800421b4e2:	41 ff d0             	callq  *%r8
  800421b4e5:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421b4ec:	ff ff ff 
  800421b4ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b4f3:	48 01 d0             	add    %rdx,%rax
  800421b4f6:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421b4fd:	20 00 00 
  800421b500:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421b507:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421b50e:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421b514:	48 89 d6             	mov    %rdx,%rsi
  800421b517:	89 c7                	mov    %eax,%edi
  800421b519:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421b520:	00 00 00 
  800421b523:	ff d0                	callq  *%rax
  800421b525:	c9                   	leaveq 
  800421b526:	c3                   	retq   

000000800421b527 <vmcs_dump_cpu>:
  800421b527:	55                   	push   %rbp
  800421b528:	48 89 e5             	mov    %rsp,%rbp
  800421b52b:	53                   	push   %rbx
  800421b52c:	48 83 ec 28          	sub    $0x28,%rsp
  800421b530:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421b535:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421b53c:	00 00 00 
  800421b53f:	ff d0                	callq  *%rax
  800421b541:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b545:	48 bf 8c ff 21 04 80 	movabs $0x800421ff8c,%rdi
  800421b54c:	00 00 00 
  800421b54f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b554:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421b55b:	00 00 00 
  800421b55e:	ff d2                	callq  *%rdx
  800421b560:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421b567:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b56a:	89 c7                	mov    %eax,%edi
  800421b56c:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421b573:	00 00 00 
  800421b576:	ff d0                	callq  *%rax
  800421b578:	48 89 c3             	mov    %rax,%rbx
  800421b57b:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421b582:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421b585:	89 c7                	mov    %eax,%edi
  800421b587:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421b58e:	00 00 00 
  800421b591:	ff d0                	callq  *%rax
  800421b593:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421b597:	48 89 d1             	mov    %rdx,%rcx
  800421b59a:	48 89 da             	mov    %rbx,%rdx
  800421b59d:	48 89 c6             	mov    %rax,%rsi
  800421b5a0:	48 bf b0 ff 21 04 80 	movabs $0x800421ffb0,%rdi
  800421b5a7:	00 00 00 
  800421b5aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b5af:	49 b8 14 9c 20 04 80 	movabs $0x8004209c14,%r8
  800421b5b6:	00 00 00 
  800421b5b9:	41 ff d0             	callq  *%r8
  800421b5bc:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421b5c3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b5c6:	89 c7                	mov    %eax,%edi
  800421b5c8:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421b5cf:	00 00 00 
  800421b5d2:	ff d0                	callq  *%rax
  800421b5d4:	48 89 c3             	mov    %rax,%rbx
  800421b5d7:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421b5de:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421b5e1:	89 c7                	mov    %eax,%edi
  800421b5e3:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421b5ea:	00 00 00 
  800421b5ed:	ff d0                	callq  *%rax
  800421b5ef:	48 89 da             	mov    %rbx,%rdx
  800421b5f2:	48 89 c6             	mov    %rax,%rsi
  800421b5f5:	48 bf e8 ff 21 04 80 	movabs $0x800421ffe8,%rdi
  800421b5fc:	00 00 00 
  800421b5ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b604:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800421b60b:	00 00 00 
  800421b60e:	ff d1                	callq  *%rcx
  800421b610:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421b617:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b61a:	89 c7                	mov    %eax,%edi
  800421b61c:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421b623:	00 00 00 
  800421b626:	ff d0                	callq  *%rax
  800421b628:	48 89 c6             	mov    %rax,%rsi
  800421b62b:	48 bf 0a 00 22 04 80 	movabs $0x800422000a,%rdi
  800421b632:	00 00 00 
  800421b635:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b63a:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421b641:	00 00 00 
  800421b644:	ff d2                	callq  *%rdx
  800421b646:	48 bf 1f 00 22 04 80 	movabs $0x800422001f,%rdi
  800421b64d:	00 00 00 
  800421b650:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b655:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421b65c:	00 00 00 
  800421b65f:	ff d2                	callq  *%rdx
  800421b661:	48 83 c4 28          	add    $0x28,%rsp
  800421b665:	5b                   	pop    %rbx
  800421b666:	5d                   	pop    %rbp
  800421b667:	c3                   	retq   

000000800421b668 <vmexit>:
  800421b668:	55                   	push   %rbp
  800421b669:	48 89 e5             	mov    %rsp,%rbp
  800421b66c:	41 54                	push   %r12
  800421b66e:	53                   	push   %rbx
  800421b66f:	48 83 ec 10          	sub    $0x10,%rsp
  800421b673:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421b67a:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421b67e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421b681:	0f b7 c0             	movzwl %ax,%eax
  800421b684:	83 f8 30             	cmp    $0x30,%eax
  800421b687:	0f 87 03 05 00 00    	ja     800421bb90 <vmexit+0x528>
  800421b68d:	89 c0                	mov    %eax,%eax
  800421b68f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421b696:	00 
  800421b697:	48 b8 88 00 22 04 80 	movabs $0x8004220088,%rax
  800421b69e:	00 00 00 
  800421b6a1:	48 01 d0             	add    %rdx,%rax
  800421b6a4:	48 8b 00             	mov    (%rax),%rax
  800421b6a7:	ff e0                	jmpq   *%rax
  800421b6a9:	c7 45 e4 04 44 00 00 	movl   $0x4404,-0x1c(%rbp)
  800421b6b0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b6b3:	89 c7                	mov    %eax,%edi
  800421b6b5:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421b6bc:	00 00 00 
  800421b6bf:	ff d0                	callq  *%rax
  800421b6c1:	89 c2                	mov    %eax,%edx
  800421b6c3:	48 b8 c4 a5 6d 04 80 	movabs $0x80046da5c4,%rax
  800421b6ca:	00 00 00 
  800421b6cd:	89 10                	mov    %edx,(%rax)
  800421b6cf:	48 b8 c4 a5 6d 04 80 	movabs $0x80046da5c4,%rax
  800421b6d6:	00 00 00 
  800421b6d9:	8b 18                	mov    (%rax),%ebx
  800421b6db:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b6e2:	00 00 00 
  800421b6e5:	ff d0                	callq  *%rax
  800421b6e7:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b6ee:	00 00 00 
  800421b6f1:	48 98                	cltq   
  800421b6f3:	48 c1 e0 03          	shl    $0x3,%rax
  800421b6f7:	48 89 c1             	mov    %rax,%rcx
  800421b6fa:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b6fe:	48 01 c8             	add    %rcx,%rax
  800421b701:	48 01 d0             	add    %rdx,%rax
  800421b704:	48 83 c0 08          	add    $0x8,%rax
  800421b708:	48 8b 00             	mov    (%rax),%rax
  800421b70b:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421b712:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b719:	00 00 00 
  800421b71c:	ff d0                	callq  *%rax
  800421b71e:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b725:	00 00 00 
  800421b728:	48 98                	cltq   
  800421b72a:	48 c1 e0 03          	shl    $0x3,%rax
  800421b72e:	48 89 c1             	mov    %rax,%rcx
  800421b731:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b735:	48 01 c8             	add    %rcx,%rax
  800421b738:	48 01 d0             	add    %rdx,%rax
  800421b73b:	48 83 c0 08          	add    $0x8,%rax
  800421b73f:	48 8b 00             	mov    (%rax),%rax
  800421b742:	89 da                	mov    %ebx,%edx
  800421b744:	4c 89 e6             	mov    %r12,%rsi
  800421b747:	48 89 c7             	mov    %rax,%rdi
  800421b74a:	48 b8 de c4 21 04 80 	movabs $0x800421c4de,%rax
  800421b751:	00 00 00 
  800421b754:	ff d0                	callq  *%rax
  800421b756:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b759:	e9 32 04 00 00       	jmpq   800421bb90 <vmexit+0x528>
  800421b75e:	48 b8 c4 a5 6d 04 80 	movabs $0x80046da5c4,%rax
  800421b765:	00 00 00 
  800421b768:	8b 18                	mov    (%rax),%ebx
  800421b76a:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b771:	00 00 00 
  800421b774:	ff d0                	callq  *%rax
  800421b776:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b77d:	00 00 00 
  800421b780:	48 98                	cltq   
  800421b782:	48 c1 e0 03          	shl    $0x3,%rax
  800421b786:	48 89 c1             	mov    %rax,%rcx
  800421b789:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b78d:	48 01 c8             	add    %rcx,%rax
  800421b790:	48 01 d0             	add    %rdx,%rax
  800421b793:	48 83 c0 08          	add    $0x8,%rax
  800421b797:	48 8b 00             	mov    (%rax),%rax
  800421b79a:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421b7a1:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b7a8:	00 00 00 
  800421b7ab:	ff d0                	callq  *%rax
  800421b7ad:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b7b4:	00 00 00 
  800421b7b7:	48 98                	cltq   
  800421b7b9:	48 c1 e0 03          	shl    $0x3,%rax
  800421b7bd:	48 89 c1             	mov    %rax,%rcx
  800421b7c0:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b7c4:	48 01 c8             	add    %rcx,%rax
  800421b7c7:	48 01 d0             	add    %rdx,%rax
  800421b7ca:	48 83 c0 08          	add    $0x8,%rax
  800421b7ce:	48 8b 00             	mov    (%rax),%rax
  800421b7d1:	89 da                	mov    %ebx,%edx
  800421b7d3:	4c 89 e6             	mov    %r12,%rsi
  800421b7d6:	48 89 c7             	mov    %rax,%rdi
  800421b7d9:	48 b8 5d c4 21 04 80 	movabs $0x800421c45d,%rax
  800421b7e0:	00 00 00 
  800421b7e3:	ff d0                	callq  *%rax
  800421b7e5:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b7e8:	e9 a3 03 00 00       	jmpq   800421bb90 <vmexit+0x528>
  800421b7ed:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b7f4:	00 00 00 
  800421b7f7:	ff d0                	callq  *%rax
  800421b7f9:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b800:	00 00 00 
  800421b803:	48 98                	cltq   
  800421b805:	48 c1 e0 03          	shl    $0x3,%rax
  800421b809:	48 89 c1             	mov    %rax,%rcx
  800421b80c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b810:	48 01 c8             	add    %rcx,%rax
  800421b813:	48 01 d0             	add    %rdx,%rax
  800421b816:	48 83 c0 08          	add    $0x8,%rax
  800421b81a:	48 8b 00             	mov    (%rax),%rax
  800421b81d:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421b824:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b82b:	00 00 00 
  800421b82e:	ff d0                	callq  *%rax
  800421b830:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b837:	00 00 00 
  800421b83a:	48 98                	cltq   
  800421b83c:	48 c1 e0 03          	shl    $0x3,%rax
  800421b840:	48 89 c1             	mov    %rax,%rcx
  800421b843:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b847:	48 01 c8             	add    %rcx,%rax
  800421b84a:	48 01 d0             	add    %rdx,%rax
  800421b84d:	48 83 c0 08          	add    $0x8,%rax
  800421b851:	48 8b 00             	mov    (%rax),%rax
  800421b854:	48 89 de             	mov    %rbx,%rsi
  800421b857:	48 89 c7             	mov    %rax,%rdi
  800421b85a:	48 b8 8b c5 21 04 80 	movabs $0x800421c58b,%rax
  800421b861:	00 00 00 
  800421b864:	ff d0                	callq  *%rax
  800421b866:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b869:	e9 22 03 00 00       	jmpq   800421bb90 <vmexit+0x528>
  800421b86e:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b875:	00 00 00 
  800421b878:	ff d0                	callq  *%rax
  800421b87a:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b881:	00 00 00 
  800421b884:	48 98                	cltq   
  800421b886:	48 c1 e0 03          	shl    $0x3,%rax
  800421b88a:	48 89 c1             	mov    %rax,%rcx
  800421b88d:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b891:	48 01 c8             	add    %rcx,%rax
  800421b894:	48 01 d0             	add    %rdx,%rax
  800421b897:	48 83 c0 08          	add    $0x8,%rax
  800421b89b:	48 8b 00             	mov    (%rax),%rax
  800421b89e:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421b8a5:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b8ac:	00 00 00 
  800421b8af:	ff d0                	callq  *%rax
  800421b8b1:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b8b8:	00 00 00 
  800421b8bb:	48 98                	cltq   
  800421b8bd:	48 c1 e0 03          	shl    $0x3,%rax
  800421b8c1:	48 89 c1             	mov    %rax,%rcx
  800421b8c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b8c8:	48 01 c8             	add    %rcx,%rax
  800421b8cb:	48 01 d0             	add    %rdx,%rax
  800421b8ce:	48 83 c0 08          	add    $0x8,%rax
  800421b8d2:	48 8b 00             	mov    (%rax),%rax
  800421b8d5:	48 89 de             	mov    %rbx,%rsi
  800421b8d8:	48 89 c7             	mov    %rax,%rdi
  800421b8db:	48 b8 93 c6 21 04 80 	movabs $0x800421c693,%rax
  800421b8e2:	00 00 00 
  800421b8e5:	ff d0                	callq  *%rax
  800421b8e7:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b8ea:	e9 a1 02 00 00       	jmpq   800421bb90 <vmexit+0x528>
  800421b8ef:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b8f6:	00 00 00 
  800421b8f9:	ff d0                	callq  *%rax
  800421b8fb:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b902:	00 00 00 
  800421b905:	48 98                	cltq   
  800421b907:	48 c1 e0 03          	shl    $0x3,%rax
  800421b90b:	48 89 c1             	mov    %rax,%rcx
  800421b90e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b912:	48 01 c8             	add    %rcx,%rax
  800421b915:	48 01 d0             	add    %rdx,%rax
  800421b918:	48 83 c0 08          	add    $0x8,%rax
  800421b91c:	48 8b 00             	mov    (%rax),%rax
  800421b91f:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421b926:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b92d:	00 00 00 
  800421b930:	ff d0                	callq  *%rax
  800421b932:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b939:	00 00 00 
  800421b93c:	48 98                	cltq   
  800421b93e:	48 c1 e0 03          	shl    $0x3,%rax
  800421b942:	48 89 c1             	mov    %rax,%rcx
  800421b945:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b949:	48 01 c8             	add    %rcx,%rax
  800421b94c:	48 01 d0             	add    %rdx,%rax
  800421b94f:	48 83 c0 08          	add    $0x8,%rax
  800421b953:	48 8b 00             	mov    (%rax),%rax
  800421b956:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421b95d:	48 89 de             	mov    %rbx,%rsi
  800421b960:	48 89 c7             	mov    %rax,%rdi
  800421b963:	48 b8 ff c7 21 04 80 	movabs $0x800421c7ff,%rax
  800421b96a:	00 00 00 
  800421b96d:	ff d0                	callq  *%rax
  800421b96f:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b972:	e9 19 02 00 00       	jmpq   800421bb90 <vmexit+0x528>
  800421b977:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b97e:	00 00 00 
  800421b981:	ff d0                	callq  *%rax
  800421b983:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b98a:	00 00 00 
  800421b98d:	48 98                	cltq   
  800421b98f:	48 c1 e0 03          	shl    $0x3,%rax
  800421b993:	48 89 c1             	mov    %rax,%rcx
  800421b996:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b99a:	48 01 c8             	add    %rcx,%rax
  800421b99d:	48 01 d0             	add    %rdx,%rax
  800421b9a0:	48 83 c0 08          	add    $0x8,%rax
  800421b9a4:	48 8b 00             	mov    (%rax),%rax
  800421b9a7:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421b9ae:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b9b5:	00 00 00 
  800421b9b8:	ff d0                	callq  *%rax
  800421b9ba:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421b9c1:	00 00 00 
  800421b9c4:	48 98                	cltq   
  800421b9c6:	48 c1 e0 03          	shl    $0x3,%rax
  800421b9ca:	48 89 c1             	mov    %rax,%rcx
  800421b9cd:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b9d1:	48 01 c8             	add    %rcx,%rax
  800421b9d4:	48 01 d0             	add    %rdx,%rax
  800421b9d7:	48 83 c0 08          	add    $0x8,%rax
  800421b9db:	48 8b 00             	mov    (%rax),%rax
  800421b9de:	48 89 de             	mov    %rbx,%rsi
  800421b9e1:	48 89 c7             	mov    %rax,%rdi
  800421b9e4:	48 b8 f1 c9 21 04 80 	movabs $0x800421c9f1,%rax
  800421b9eb:	00 00 00 
  800421b9ee:	ff d0                	callq  *%rax
  800421b9f0:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421b9f3:	e9 98 01 00 00       	jmpq   800421bb90 <vmexit+0x528>
  800421b9f8:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421b9ff:	00 00 00 
  800421ba02:	ff d0                	callq  *%rax
  800421ba04:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421ba0b:	00 00 00 
  800421ba0e:	48 98                	cltq   
  800421ba10:	48 c1 e0 03          	shl    $0x3,%rax
  800421ba14:	48 89 c1             	mov    %rax,%rcx
  800421ba17:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ba1b:	48 01 c8             	add    %rcx,%rax
  800421ba1e:	48 01 d0             	add    %rdx,%rax
  800421ba21:	48 83 c0 08          	add    $0x8,%rax
  800421ba25:	48 8b 00             	mov    (%rax),%rax
  800421ba28:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421ba2f:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421ba36:	00 00 00 
  800421ba39:	ff d0                	callq  *%rax
  800421ba3b:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421ba42:	00 00 00 
  800421ba45:	48 98                	cltq   
  800421ba47:	48 c1 e0 03          	shl    $0x3,%rax
  800421ba4b:	48 89 c1             	mov    %rax,%rcx
  800421ba4e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ba52:	48 01 c8             	add    %rcx,%rax
  800421ba55:	48 01 d0             	add    %rdx,%rax
  800421ba58:	48 83 c0 08          	add    $0x8,%rax
  800421ba5c:	48 8b 00             	mov    (%rax),%rax
  800421ba5f:	48 89 de             	mov    %rbx,%rsi
  800421ba62:	48 89 c7             	mov    %rax,%rdi
  800421ba65:	48 b8 d0 cb 21 04 80 	movabs $0x800421cbd0,%rax
  800421ba6c:	00 00 00 
  800421ba6f:	ff d0                	callq  *%rax
  800421ba71:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ba74:	e9 17 01 00 00       	jmpq   800421bb90 <vmexit+0x528>
  800421ba79:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421ba80:	00 00 00 
  800421ba83:	ff d0                	callq  *%rax
  800421ba85:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421ba8c:	00 00 00 
  800421ba8f:	48 98                	cltq   
  800421ba91:	48 c1 e0 03          	shl    $0x3,%rax
  800421ba95:	48 89 c1             	mov    %rax,%rcx
  800421ba98:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ba9c:	48 01 c8             	add    %rcx,%rax
  800421ba9f:	48 01 d0             	add    %rdx,%rax
  800421baa2:	48 83 c0 08          	add    $0x8,%rax
  800421baa6:	48 8b 00             	mov    (%rax),%rax
  800421baa9:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421bab0:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421bab7:	00 00 00 
  800421baba:	ff d0                	callq  *%rax
  800421babc:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bac3:	00 00 00 
  800421bac6:	48 98                	cltq   
  800421bac8:	48 c1 e0 03          	shl    $0x3,%rax
  800421bacc:	48 89 c1             	mov    %rax,%rcx
  800421bacf:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bad3:	48 01 c8             	add    %rcx,%rax
  800421bad6:	48 01 d0             	add    %rdx,%rax
  800421bad9:	48 83 c0 08          	add    $0x8,%rax
  800421badd:	48 8b 00             	mov    (%rax),%rax
  800421bae0:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421bae7:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421baee:	00 00 00 
  800421baf1:	ff d0                	callq  *%rax
  800421baf3:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bafa:	00 00 00 
  800421bafd:	48 98                	cltq   
  800421baff:	48 c1 e0 03          	shl    $0x3,%rax
  800421bb03:	48 89 c1             	mov    %rax,%rcx
  800421bb06:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bb0a:	48 01 c8             	add    %rcx,%rax
  800421bb0d:	48 01 d0             	add    %rdx,%rax
  800421bb10:	48 83 c0 08          	add    $0x8,%rax
  800421bb14:	48 8b 00             	mov    (%rax),%rax
  800421bb17:	48 89 da             	mov    %rbx,%rdx
  800421bb1a:	4c 89 e6             	mov    %r12,%rsi
  800421bb1d:	48 89 c7             	mov    %rax,%rdi
  800421bb20:	48 b8 0a cc 21 04 80 	movabs $0x800421cc0a,%rax
  800421bb27:	00 00 00 
  800421bb2a:	ff d0                	callq  *%rax
  800421bb2c:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421bb2f:	eb 5f                	jmp    800421bb90 <vmexit+0x528>
  800421bb31:	48 bf 40 00 22 04 80 	movabs $0x8004220040,%rdi
  800421bb38:	00 00 00 
  800421bb3b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bb40:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421bb47:	00 00 00 
  800421bb4a:	ff d2                	callq  *%rdx
  800421bb4c:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421bb53:	00 00 00 
  800421bb56:	ff d0                	callq  *%rax
  800421bb58:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bb5f:	00 00 00 
  800421bb62:	48 98                	cltq   
  800421bb64:	48 c1 e0 03          	shl    $0x3,%rax
  800421bb68:	48 89 c1             	mov    %rax,%rcx
  800421bb6b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bb6f:	48 01 c8             	add    %rcx,%rax
  800421bb72:	48 01 d0             	add    %rdx,%rax
  800421bb75:	48 83 c0 08          	add    $0x8,%rax
  800421bb79:	48 8b 00             	mov    (%rax),%rax
  800421bb7c:	48 89 c7             	mov    %rax,%rdi
  800421bb7f:	48 b8 c7 94 20 04 80 	movabs $0x80042094c7,%rax
  800421bb86:	00 00 00 
  800421bb89:	ff d0                	callq  *%rax
  800421bb8b:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421bb8f:	90                   	nop
  800421bb90:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421bb94:	83 f0 01             	xor    $0x1,%eax
  800421bb97:	84 c0                	test   %al,%al
  800421bb99:	74 6b                	je     800421bc06 <vmexit+0x59e>
  800421bb9b:	48 bf 60 00 22 04 80 	movabs $0x8004220060,%rdi
  800421bba2:	00 00 00 
  800421bba5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bbaa:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421bbb1:	00 00 00 
  800421bbb4:	ff d2                	callq  *%rdx
  800421bbb6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bbbb:	48 ba 27 b5 21 04 80 	movabs $0x800421b527,%rdx
  800421bbc2:	00 00 00 
  800421bbc5:	ff d2                	callq  *%rdx
  800421bbc7:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421bbce:	00 00 00 
  800421bbd1:	ff d0                	callq  *%rax
  800421bbd3:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bbda:	00 00 00 
  800421bbdd:	48 98                	cltq   
  800421bbdf:	48 c1 e0 03          	shl    $0x3,%rax
  800421bbe3:	48 89 c1             	mov    %rax,%rcx
  800421bbe6:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bbea:	48 01 c8             	add    %rcx,%rax
  800421bbed:	48 01 d0             	add    %rdx,%rax
  800421bbf0:	48 83 c0 08          	add    $0x8,%rax
  800421bbf4:	48 8b 00             	mov    (%rax),%rax
  800421bbf7:	48 89 c7             	mov    %rax,%rdi
  800421bbfa:	48 b8 c7 94 20 04 80 	movabs $0x80042094c7,%rax
  800421bc01:	00 00 00 
  800421bc04:	ff d0                	callq  *%rax
  800421bc06:	48 b8 b6 d9 20 04 80 	movabs $0x800420d9b6,%rax
  800421bc0d:	00 00 00 
  800421bc10:	ff d0                	callq  *%rax

000000800421bc12 <asm_vmrun>:
  800421bc12:	55                   	push   %rbp
  800421bc13:	48 89 e5             	mov    %rsp,%rbp
  800421bc16:	41 57                	push   %r15
  800421bc18:	41 56                	push   %r14
  800421bc1a:	41 55                	push   %r13
  800421bc1c:	41 54                	push   %r12
  800421bc1e:	53                   	push   %rbx
  800421bc1f:	48 83 ec 28          	sub    $0x28,%rsp
  800421bc23:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421bc27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421bc2b:	66 c7 80 80 00 00 00 	movw   $0x1,0x80(%rax)
  800421bc32:	01 00 
  800421bc34:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421bc38:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421bc3e:	48 b8 91 99 21 04 80 	movabs $0x8004219991,%rax
  800421bc45:	00 00 00 
  800421bc48:	ff d0                	callq  *%rax
  800421bc4a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421bc4e:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421bc53:	52                   	push   %rdx
  800421bc54:	55                   	push   %rbp
  800421bc55:	51                   	push   %rcx
  800421bc56:	51                   	push   %rcx
  800421bc57:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421bc5e:	0f 20 d2             	mov    %cr2,%rdx
  800421bc61:	48 39 c2             	cmp    %rax,%rdx
  800421bc64:	74 03                	je     800421bc69 <asm_vmrun+0x57>
  800421bc66:	0f 22 d0             	mov    %rax,%cr2
  800421bc69:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421bc6e:	59                   	pop    %rcx
  800421bc6f:	5d                   	pop    %rbp
  800421bc70:	5a                   	pop    %rdx
  800421bc71:	0f 96 41 78          	setbe  0x78(%rcx)
  800421bc75:	48 b8 75 99 21 04 80 	movabs $0x8004219975,%rax
  800421bc7c:	00 00 00 
  800421bc7f:	ff d0                	callq  *%rax
  800421bc81:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421bc85:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421bc89:	66 85 c0             	test   %ax,%ax
  800421bc8c:	74 20                	je     800421bcae <asm_vmrun+0x9c>
  800421bc8e:	48 bf 10 02 22 04 80 	movabs $0x8004220210,%rdi
  800421bc95:	00 00 00 
  800421bc98:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bc9d:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421bca4:	00 00 00 
  800421bca7:	ff d2                	callq  *%rdx
  800421bca9:	e9 af 00 00 00       	jmpq   800421bd5d <asm_vmrun+0x14b>
  800421bcae:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421bcb5:	00 00 00 
  800421bcb8:	ff d0                	callq  *%rax
  800421bcba:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bcc1:	00 00 00 
  800421bcc4:	48 98                	cltq   
  800421bcc6:	48 c1 e0 03          	shl    $0x3,%rax
  800421bcca:	48 89 c1             	mov    %rax,%rcx
  800421bccd:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bcd1:	48 01 c8             	add    %rcx,%rax
  800421bcd4:	48 01 d0             	add    %rdx,%rax
  800421bcd7:	48 83 c0 08          	add    $0x8,%rax
  800421bcdb:	48 8b 18             	mov    (%rax),%rbx
  800421bcde:	c7 45 cc 1c 68 00 00 	movl   $0x681c,-0x34(%rbp)
  800421bce5:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bce8:	89 c7                	mov    %eax,%edi
  800421bcea:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421bcf1:	00 00 00 
  800421bcf4:	ff d0                	callq  *%rax
  800421bcf6:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421bcfd:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421bd04:	00 00 00 
  800421bd07:	ff d0                	callq  *%rax
  800421bd09:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bd10:	00 00 00 
  800421bd13:	48 98                	cltq   
  800421bd15:	48 c1 e0 03          	shl    $0x3,%rax
  800421bd19:	48 89 c1             	mov    %rax,%rcx
  800421bd1c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421bd20:	48 01 c8             	add    %rcx,%rax
  800421bd23:	48 01 d0             	add    %rdx,%rax
  800421bd26:	48 83 c0 08          	add    $0x8,%rax
  800421bd2a:	48 8b 18             	mov    (%rax),%rbx
  800421bd2d:	c7 45 c8 1e 68 00 00 	movl   $0x681e,-0x38(%rbp)
  800421bd34:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421bd37:	89 c7                	mov    %eax,%edi
  800421bd39:	48 b8 0c 98 21 04 80 	movabs $0x800421980c,%rax
  800421bd40:	00 00 00 
  800421bd43:	ff d0                	callq  *%rax
  800421bd45:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421bd4c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bd51:	48 ba 68 b6 21 04 80 	movabs $0x800421b668,%rdx
  800421bd58:	00 00 00 
  800421bd5b:	ff d2                	callq  *%rdx
  800421bd5d:	48 83 c4 28          	add    $0x28,%rsp
  800421bd61:	5b                   	pop    %rbx
  800421bd62:	41 5c                	pop    %r12
  800421bd64:	41 5d                	pop    %r13
  800421bd66:	41 5e                	pop    %r14
  800421bd68:	41 5f                	pop    %r15
  800421bd6a:	5d                   	pop    %rbp
  800421bd6b:	c3                   	retq   

000000800421bd6c <msr_setup>:
  800421bd6c:	55                   	push   %rbp
  800421bd6d:	48 89 e5             	mov    %rsp,%rbp
  800421bd70:	48 83 ec 40          	sub    $0x40,%rsp
  800421bd74:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421bd78:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421bd7f:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421bd86:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421bd8d:	7e 35                	jle    800421bdc4 <msr_setup+0x58>
  800421bd8f:	48 b9 30 02 22 04 80 	movabs $0x8004220230,%rcx
  800421bd96:	00 00 00 
  800421bd99:	48 ba dd fe 21 04 80 	movabs $0x800421fedd,%rdx
  800421bda0:	00 00 00 
  800421bda3:	be 4f 02 00 00       	mov    $0x24f,%esi
  800421bda8:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421bdaf:	00 00 00 
  800421bdb2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bdb7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421bdbe:	00 00 00 
  800421bdc1:	41 ff d0             	callq  *%r8
  800421bdc4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421bdc8:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421bdcb:	89 50 28             	mov    %edx,0x28(%rax)
  800421bdce:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421bdd5:	e9 97 00 00 00       	jmpq   800421be71 <msr_setup+0x105>
  800421bdda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421bdde:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421bde2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421bde5:	48 63 d2             	movslq %edx,%rdx
  800421bde8:	48 c1 e2 04          	shl    $0x4,%rdx
  800421bdec:	48 01 d0             	add    %rdx,%rax
  800421bdef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421bdf3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bdf6:	48 98                	cltq   
  800421bdf8:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421bdfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421be00:	89 10                	mov    %edx,(%rax)
  800421be02:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421be05:	48 98                	cltq   
  800421be07:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421be0b:	89 45 ec             	mov    %eax,-0x14(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421be0e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421be11:	89 c1                	mov    %eax,%ecx
  800421be13:	0f 32                	rdmsr  
  800421be15:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421be18:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421be1b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421be22:	00 
	ret = edx;
  800421be23:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421be26:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421be2a:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421be2f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421be32:	48 09 45 d8          	or     %rax,-0x28(%rbp)

	return ret;
  800421be36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421be3a:	48 89 c2             	mov    %rax,%rdx
  800421be3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421be41:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421be45:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421be49:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421be4d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421be50:	48 63 d2             	movslq %edx,%rdx
  800421be53:	48 c1 e2 04          	shl    $0x4,%rdx
  800421be57:	48 01 d0             	add    %rdx,%rax
  800421be5a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421be5e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421be61:	48 98                	cltq   
  800421be63:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421be67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421be6b:	89 10                	mov    %edx,(%rax)
  800421be6d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421be71:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421be74:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421be77:	0f 8c 5d ff ff ff    	jl     800421bdda <msr_setup+0x6e>
  800421be7d:	c9                   	leaveq 
  800421be7e:	c3                   	retq   

000000800421be7f <bitmap_setup>:
  800421be7f:	55                   	push   %rbp
  800421be80:	48 89 e5             	mov    %rsp,%rbp
  800421be83:	48 83 ec 30          	sub    $0x30,%rsp
  800421be87:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421be8b:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421be92:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421be99:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421bea0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421bea7:	e9 07 01 00 00       	jmpq   800421bfb3 <bitmap_setup+0x134>
  800421beac:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421beaf:	48 98                	cltq   
  800421beb1:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421beb5:	c1 e8 06             	shr    $0x6,%eax
  800421beb8:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421bebb:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bebe:	48 98                	cltq   
  800421bec0:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421bec4:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421bec9:	77 51                	ja     800421bf1c <bitmap_setup+0x9d>
  800421becb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421becf:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421bed3:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421bed6:	48 63 d2             	movslq %edx,%rdx
  800421bed9:	48 c1 e2 03          	shl    $0x3,%rdx
  800421bedd:	48 01 c2             	add    %rax,%rdx
  800421bee0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421bee4:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421bee8:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421beeb:	48 63 c9             	movslq %ecx,%rcx
  800421beee:	48 c1 e1 03          	shl    $0x3,%rcx
  800421bef2:	48 01 c8             	add    %rcx,%rax
  800421bef5:	48 8b 30             	mov    (%rax),%rsi
  800421bef8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421befb:	48 98                	cltq   
  800421befd:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421bf01:	83 e0 3f             	and    $0x3f,%eax
  800421bf04:	bf 01 00 00 00       	mov    $0x1,%edi
  800421bf09:	89 c1                	mov    %eax,%ecx
  800421bf0b:	48 d3 e7             	shl    %cl,%rdi
  800421bf0e:	48 89 f8             	mov    %rdi,%rax
  800421bf11:	48 09 f0             	or     %rsi,%rax
  800421bf14:	48 89 02             	mov    %rax,(%rdx)
  800421bf17:	e9 93 00 00 00       	jmpq   800421bfaf <bitmap_setup+0x130>
  800421bf1c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bf1f:	48 98                	cltq   
  800421bf21:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421bf25:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421bf2a:	77 4e                	ja     800421bf7a <bitmap_setup+0xfb>
  800421bf2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421bf30:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421bf34:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421bf37:	48 63 d2             	movslq %edx,%rdx
  800421bf3a:	48 c1 e2 03          	shl    $0x3,%rdx
  800421bf3e:	48 01 c2             	add    %rax,%rdx
  800421bf41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421bf45:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421bf49:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421bf4c:	48 63 c9             	movslq %ecx,%rcx
  800421bf4f:	48 c1 e1 03          	shl    $0x3,%rcx
  800421bf53:	48 01 c8             	add    %rcx,%rax
  800421bf56:	48 8b 30             	mov    (%rax),%rsi
  800421bf59:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bf5c:	48 98                	cltq   
  800421bf5e:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421bf62:	83 e0 3f             	and    $0x3f,%eax
  800421bf65:	bf 01 00 00 00       	mov    $0x1,%edi
  800421bf6a:	89 c1                	mov    %eax,%ecx
  800421bf6c:	48 d3 e7             	shl    %cl,%rdi
  800421bf6f:	48 89 f8             	mov    %rdi,%rax
  800421bf72:	48 09 f0             	or     %rsi,%rax
  800421bf75:	48 89 02             	mov    %rax,(%rdx)
  800421bf78:	eb 35                	jmp    800421bfaf <bitmap_setup+0x130>
  800421bf7a:	48 b9 d7 fe 21 04 80 	movabs $0x800421fed7,%rcx
  800421bf81:	00 00 00 
  800421bf84:	48 ba dd fe 21 04 80 	movabs $0x800421fedd,%rdx
  800421bf8b:	00 00 00 
  800421bf8e:	be 68 02 00 00       	mov    $0x268,%esi
  800421bf93:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421bf9a:	00 00 00 
  800421bf9d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bfa2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421bfa9:	00 00 00 
  800421bfac:	41 ff d0             	callq  *%r8
  800421bfaf:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421bfb3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421bfb6:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421bfb9:	0f 8c ed fe ff ff    	jl     800421beac <bitmap_setup+0x2d>
  800421bfbf:	c9                   	leaveq 
  800421bfc0:	c3                   	retq   

000000800421bfc1 <vmx_vmrun>:
  800421bfc1:	55                   	push   %rbp
  800421bfc2:	48 89 e5             	mov    %rsp,%rbp
  800421bfc5:	48 83 ec 70          	sub    $0x70,%rsp
  800421bfc9:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421bfcd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421bfd1:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421bfd7:	83 f8 03             	cmp    $0x3,%eax
  800421bfda:	74 0a                	je     800421bfe6 <vmx_vmrun+0x25>
  800421bfdc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421bfe1:	e9 d2 02 00 00       	jmpq   800421c2b8 <vmx_vmrun+0x2f7>
  800421bfe6:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421bfed:	00 00 00 
  800421bff0:	ff d0                	callq  *%rax
  800421bff2:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421bff9:	00 00 00 
  800421bffc:	48 98                	cltq   
  800421bffe:	48 c1 e0 03          	shl    $0x3,%rax
  800421c002:	48 89 c1             	mov    %rax,%rcx
  800421c005:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c009:	48 01 c8             	add    %rcx,%rax
  800421c00c:	48 01 d0             	add    %rdx,%rax
  800421c00f:	48 83 c0 08          	add    $0x8,%rax
  800421c013:	48 8b 00             	mov    (%rax),%rax
  800421c016:	48 85 c0             	test   %rax,%rax
  800421c019:	0f 85 2f 01 00 00    	jne    800421c14e <vmx_vmrun+0x18d>
  800421c01f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c023:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421c02a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c02e:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c035:	00 00 00 
  800421c038:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421c03c:	77 32                	ja     800421c070 <vmx_vmrun+0xaf>
  800421c03e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c042:	48 89 c1             	mov    %rax,%rcx
  800421c045:	48 ba 68 ff 21 04 80 	movabs $0x800421ff68,%rdx
  800421c04c:	00 00 00 
  800421c04f:	be 7a 02 00 00       	mov    $0x27a,%esi
  800421c054:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421c05b:	00 00 00 
  800421c05e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c063:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c06a:	00 00 00 
  800421c06d:	41 ff d0             	callq  *%r8
  800421c070:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c077:	ff ff ff 
  800421c07a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c07e:	48 01 d0             	add    %rdx,%rax
  800421c081:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c085:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c089:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421c08d:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421c091:	f8                   	clc    
  800421c092:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421c097:	0f 96 c0             	setbe  %al
  800421c09a:	88 45 df             	mov    %al,-0x21(%rbp)
  800421c09d:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421c0a1:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c0a4:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421c0a8:	74 0a                	je     800421c0b4 <vmx_vmrun+0xf3>
  800421c0aa:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421c0af:	e9 04 02 00 00       	jmpq   800421c2b8 <vmx_vmrun+0x2f7>
  800421c0b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c0b8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421c0bc:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421c0c0:	f8                   	clc    
  800421c0c1:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421c0c5:	0f 96 c0             	setbe  %al
  800421c0c8:	88 45 de             	mov    %al,-0x22(%rbp)
  800421c0cb:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421c0cf:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c0d2:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421c0d6:	74 0a                	je     800421c0e2 <vmx_vmrun+0x121>
  800421c0d8:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421c0dd:	e9 d6 01 00 00       	jmpq   800421c2b8 <vmx_vmrun+0x2f7>
  800421c0e2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c0e7:	48 ba 4c a2 21 04 80 	movabs $0x800421a24c,%rdx
  800421c0ee:	00 00 00 
  800421c0f1:	ff d2                	callq  *%rdx
  800421c0f3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c0f8:	48 ba 1a a6 21 04 80 	movabs $0x800421a61a,%rdx
  800421c0ff:	00 00 00 
  800421c102:	ff d2                	callq  *%rdx
  800421c104:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c108:	48 05 20 01 00 00    	add    $0x120,%rax
  800421c10e:	48 89 c7             	mov    %rax,%rdi
  800421c111:	48 b8 7f be 21 04 80 	movabs $0x800421be7f,%rax
  800421c118:	00 00 00 
  800421c11b:	ff d0                	callq  *%rax
  800421c11d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c121:	48 05 20 01 00 00    	add    $0x120,%rax
  800421c127:	48 89 c7             	mov    %rax,%rdi
  800421c12a:	48 b8 6c bd 21 04 80 	movabs $0x800421bd6c,%rax
  800421c131:	00 00 00 
  800421c134:	ff d0                	callq  *%rax
  800421c136:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c13a:	48 89 c7             	mov    %rax,%rdi
  800421c13d:	48 b8 bf ae 21 04 80 	movabs $0x800421aebf,%rax
  800421c144:	00 00 00 
  800421c147:	ff d0                	callq  *%rax
  800421c149:	e9 8c 00 00 00       	jmpq   800421c1da <vmx_vmrun+0x219>
  800421c14e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421c152:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421c159:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421c15d:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c164:	00 00 00 
  800421c167:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421c16b:	77 32                	ja     800421c19f <vmx_vmrun+0x1de>
  800421c16d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c171:	48 89 c1             	mov    %rax,%rcx
  800421c174:	48 ba 68 ff 21 04 80 	movabs $0x800421ff68,%rdx
  800421c17b:	00 00 00 
  800421c17e:	be 93 02 00 00       	mov    $0x293,%esi
  800421c183:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421c18a:	00 00 00 
  800421c18d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c192:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c199:	00 00 00 
  800421c19c:	41 ff d0             	callq  *%r8
  800421c19f:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c1a6:	ff ff ff 
  800421c1a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c1ad:	48 01 d0             	add    %rdx,%rax
  800421c1b0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421c1b4:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421c1b8:	f8                   	clc    
  800421c1b9:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421c1bd:	0f 96 c0             	setbe  %al
  800421c1c0:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421c1c3:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421c1c7:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c1ca:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421c1ce:	74 0a                	je     800421c1da <vmx_vmrun+0x219>
  800421c1d0:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421c1d5:	e9 de 00 00 00       	jmpq   800421c2b8 <vmx_vmrun+0x2f7>
  800421c1da:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421c1e1:	00 00 00 
  800421c1e4:	ff d0                	callq  *%rax
  800421c1e6:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421c1ed:	00 00 00 
  800421c1f0:	48 98                	cltq   
  800421c1f2:	48 c1 e0 03          	shl    $0x3,%rax
  800421c1f6:	48 89 c1             	mov    %rax,%rcx
  800421c1f9:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c1fd:	48 01 c8             	add    %rcx,%rax
  800421c200:	48 01 d0             	add    %rdx,%rax
  800421c203:	48 83 c0 08          	add    $0x8,%rax
  800421c207:	48 8b 00             	mov    (%rax),%rax
  800421c20a:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421c211:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421c218:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421c21c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421c220:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421c223:	48 89 d6             	mov    %rdx,%rsi
  800421c226:	89 c7                	mov    %eax,%edi
  800421c228:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421c22f:	00 00 00 
  800421c232:	ff d0                	callq  *%rax
  800421c234:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421c23b:	00 00 00 
  800421c23e:	ff d0                	callq  *%rax
  800421c240:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421c247:	00 00 00 
  800421c24a:	48 98                	cltq   
  800421c24c:	48 c1 e0 03          	shl    $0x3,%rax
  800421c250:	48 89 c1             	mov    %rax,%rcx
  800421c253:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c257:	48 01 c8             	add    %rcx,%rax
  800421c25a:	48 01 d0             	add    %rdx,%rax
  800421c25d:	48 83 c0 08          	add    $0x8,%rax
  800421c261:	48 8b 00             	mov    (%rax),%rax
  800421c264:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421c26b:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421c272:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421c276:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421c27a:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c27d:	48 89 d6             	mov    %rdx,%rsi
  800421c280:	89 c7                	mov    %eax,%edi
  800421c282:	48 b8 e6 97 21 04 80 	movabs $0x80042197e6,%rax
  800421c289:	00 00 00 
  800421c28c:	ff d0                	callq  *%rax
  800421c28e:	48 ba 47 02 22 04 80 	movabs $0x8004220247,%rdx
  800421c295:	00 00 00 
  800421c298:	be 9b 02 00 00       	mov    $0x29b,%esi
  800421c29d:	48 bf ab fe 21 04 80 	movabs $0x800421feab,%rdi
  800421c2a4:	00 00 00 
  800421c2a7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c2ac:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421c2b3:	00 00 00 
  800421c2b6:	ff d1                	callq  *%rcx
  800421c2b8:	c9                   	leaveq 
  800421c2b9:	c3                   	retq   

000000800421c2ba <vmcs_writel>:
  800421c2ba:	55                   	push   %rbp
  800421c2bb:	48 89 e5             	mov    %rsp,%rbp
  800421c2be:	48 83 ec 20          	sub    $0x20,%rsp
  800421c2c2:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421c2c5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421c2c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c2cd:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421c2d0:	f8                   	clc    
  800421c2d1:	0f 79 d0             	vmwrite %rax,%rdx
  800421c2d4:	0f 96 c0             	setbe  %al
  800421c2d7:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421c2da:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421c2de:	c9                   	leaveq 
  800421c2df:	c3                   	retq   

000000800421c2e0 <vmcs_readl>:
  800421c2e0:	55                   	push   %rbp
  800421c2e1:	48 89 e5             	mov    %rsp,%rbp
  800421c2e4:	48 83 ec 14          	sub    $0x14,%rsp
  800421c2e8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421c2eb:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c2ee:	89 c2                	mov    %eax,%edx
  800421c2f0:	0f 78 d0             	vmread %rdx,%rax
  800421c2f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c2f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c2fb:	c9                   	leaveq 
  800421c2fc:	c3                   	retq   

000000800421c2fd <page2ppn>:
  800421c2fd:	55                   	push   %rbp
  800421c2fe:	48 89 e5             	mov    %rsp,%rbp
  800421c301:	48 83 ec 08          	sub    $0x8,%rsp
  800421c305:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421c309:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421c30d:	48 b8 00 a6 6d 04 80 	movabs $0x80046da600,%rax
  800421c314:	00 00 00 
  800421c317:	48 8b 00             	mov    (%rax),%rax
  800421c31a:	48 29 c2             	sub    %rax,%rdx
  800421c31d:	48 89 d0             	mov    %rdx,%rax
  800421c320:	48 c1 f8 04          	sar    $0x4,%rax
  800421c324:	c9                   	leaveq 
  800421c325:	c3                   	retq   

000000800421c326 <page2pa>:
  800421c326:	55                   	push   %rbp
  800421c327:	48 89 e5             	mov    %rsp,%rbp
  800421c32a:	48 83 ec 08          	sub    $0x8,%rsp
  800421c32e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421c332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c336:	48 89 c7             	mov    %rax,%rdi
  800421c339:	48 b8 fd c2 21 04 80 	movabs $0x800421c2fd,%rax
  800421c340:	00 00 00 
  800421c343:	ff d0                	callq  *%rax
  800421c345:	48 c1 e0 0c          	shl    $0xc,%rax
  800421c349:	c9                   	leaveq 
  800421c34a:	c3                   	retq   

000000800421c34b <page2kva>:
  800421c34b:	55                   	push   %rbp
  800421c34c:	48 89 e5             	mov    %rsp,%rbp
  800421c34f:	48 83 ec 20          	sub    $0x20,%rsp
  800421c353:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421c357:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c35b:	48 89 c7             	mov    %rax,%rdi
  800421c35e:	48 b8 26 c3 21 04 80 	movabs $0x800421c326,%rax
  800421c365:	00 00 00 
  800421c368:	ff d0                	callq  *%rax
  800421c36a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c36e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c372:	48 c1 e8 0c          	shr    $0xc,%rax
  800421c376:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421c379:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421c37c:	48 b8 f8 a5 6d 04 80 	movabs $0x80046da5f8,%rax
  800421c383:	00 00 00 
  800421c386:	48 8b 00             	mov    (%rax),%rax
  800421c389:	48 39 c2             	cmp    %rax,%rdx
  800421c38c:	72 32                	jb     800421c3c0 <page2kva+0x75>
  800421c38e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c392:	48 89 c1             	mov    %rax,%rcx
  800421c395:	48 ba 60 02 22 04 80 	movabs $0x8004220260,%rdx
  800421c39c:	00 00 00 
  800421c39f:	be 62 00 00 00       	mov    $0x62,%esi
  800421c3a4:	48 bf 83 02 22 04 80 	movabs $0x8004220283,%rdi
  800421c3ab:	00 00 00 
  800421c3ae:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c3b3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c3ba:	00 00 00 
  800421c3bd:	41 ff d0             	callq  *%r8
  800421c3c0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421c3c7:	00 00 00 
  800421c3ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c3ce:	48 01 d0             	add    %rdx,%rax
  800421c3d1:	c9                   	leaveq 
  800421c3d2:	c3                   	retq   

000000800421c3d3 <vmx_get_vmdisk_number>:
#include <kern/env.h>
#include <kern/cpu.h>

static int vmdisk_number = 0;	//this number assign to the vm
int 
vmx_get_vmdisk_number() {
  800421c3d3:	55                   	push   %rbp
  800421c3d4:	48 89 e5             	mov    %rsp,%rbp
	return vmdisk_number;
  800421c3d7:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421c3de:	00 00 00 
  800421c3e1:	8b 00                	mov    (%rax),%eax
}
  800421c3e3:	5d                   	pop    %rbp
  800421c3e4:	c3                   	retq   

000000800421c3e5 <vmx_incr_vmdisk_number>:

void
vmx_incr_vmdisk_number() {
  800421c3e5:	55                   	push   %rbp
  800421c3e6:	48 89 e5             	mov    %rsp,%rbp
	vmdisk_number++;
  800421c3e9:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421c3f0:	00 00 00 
  800421c3f3:	8b 00                	mov    (%rax),%eax
  800421c3f5:	8d 50 01             	lea    0x1(%rax),%edx
  800421c3f8:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421c3ff:	00 00 00 
  800421c402:	89 10                	mov    %edx,(%rax)
}
  800421c404:	5d                   	pop    %rbp
  800421c405:	c3                   	retq   

000000800421c406 <find_msr_in_region>:
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
  800421c406:	55                   	push   %rbp
  800421c407:	48 89 e5             	mov    %rsp,%rbp
  800421c40a:	48 83 ec 28          	sub    $0x28,%rsp
  800421c40e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421c411:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421c415:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421c418:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
  800421c41c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c420:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int i;
	for(i=0; i<area_sz; ++i) {
  800421c424:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421c42b:	eb 21                	jmp    800421c44e <find_msr_in_region+0x48>
		if(entry->msr_index == msr_idx) {
  800421c42d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c431:	8b 00                	mov    (%rax),%eax
  800421c433:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421c436:	75 12                	jne    800421c44a <find_msr_in_region+0x44>
			*msr_entry = entry;
  800421c438:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c43c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421c440:	48 89 10             	mov    %rdx,(%rax)
			return true;
  800421c443:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c448:	eb 11                	jmp    800421c45b <find_msr_in_region+0x55>
}
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
	int i;
	for(i=0; i<area_sz; ++i) {
  800421c44a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421c44e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c451:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421c454:	7c d7                	jl     800421c42d <find_msr_in_region+0x27>
		if(entry->msr_index == msr_idx) {
			*msr_entry = entry;
			return true;
		}
	}
	return false;
  800421c456:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421c45b:	c9                   	leaveq 
  800421c45c:	c3                   	retq   

000000800421c45d <handle_interrupt_window>:

bool
handle_interrupt_window(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421c45d:	55                   	push   %rbp
  800421c45e:	48 89 e5             	mov    %rsp,%rbp
  800421c461:	48 83 ec 38          	sub    $0x38,%rsp
  800421c465:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421c469:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421c46d:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421c470:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421c477:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421c47a:	89 c7                	mov    %eax,%edi
  800421c47c:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421c483:	00 00 00 
  800421c486:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;

	procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS );
  800421c488:	89 45 fc             	mov    %eax,-0x4(%rbp)

        //disable the interrupt window exiting
        procbased_ctls_or &= ~(VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT); 
  800421c48b:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421c48f:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421c496:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421c499:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421c49c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421c49f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c4a2:	48 89 d6             	mov    %rdx,%rsi
  800421c4a5:	89 c7                	mov    %eax,%edi
  800421c4a7:	48 b8 ba c2 21 04 80 	movabs $0x800421c2ba,%rax
  800421c4ae:	00 00 00 
  800421c4b1:	ff d0                	callq  *%rax
  800421c4b3:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421c4ba:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c4bd:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421c4c0:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421c4c3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c4c6:	48 89 d6             	mov    %rdx,%rsi
  800421c4c9:	89 c7                	mov    %eax,%edi
  800421c4cb:	48 b8 ba c2 21 04 80 	movabs $0x800421c2ba,%rax
  800421c4d2:	00 00 00 
  800421c4d5:	ff d0                	callq  *%rax

        vmcs_write32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS, 
		      procbased_ctls_or);
        //write back the host_vector, which can insert a virtual interrupt
	vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	return true;
  800421c4d7:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421c4dc:	c9                   	leaveq 
  800421c4dd:	c3                   	retq   

000000800421c4de <handle_interrupts>:
bool
handle_interrupts(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421c4de:	55                   	push   %rbp
  800421c4df:	48 89 e5             	mov    %rsp,%rbp
  800421c4e2:	48 83 ec 48          	sub    $0x48,%rsp
  800421c4e6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421c4ea:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421c4ee:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421c4f1:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421c4f8:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421c4fb:	89 c7                	mov    %eax,%edi
  800421c4fd:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421c504:	00 00 00 
  800421c507:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;
	rflags = vmcs_read64(VMCS_GUEST_RFLAGS);
  800421c509:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if ( !(rflags & (0x1 << 9)) ) {	//we have to wait the interrupt window open
  800421c50d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c511:	25 00 02 00 00       	and    $0x200,%eax
  800421c516:	48 85 c0             	test   %rax,%rax
  800421c519:	75 45                	jne    800421c560 <handle_interrupts+0x82>
  800421c51b:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421c522:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421c525:	89 c7                	mov    %eax,%edi
  800421c527:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421c52e:	00 00 00 
  800421c531:	ff d0                	callq  *%rax
		//get the interrupt info

		procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS);
  800421c533:	89 45 f4             	mov    %eax,-0xc(%rbp)

		//disable the interrupt window exiting
		procbased_ctls_or |= VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT; 
  800421c536:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421c53a:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421c541:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421c544:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421c547:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421c54a:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421c54d:	48 89 d6             	mov    %rdx,%rsi
  800421c550:	89 c7                	mov    %eax,%edi
  800421c552:	48 b8 ba c2 21 04 80 	movabs $0x800421c2ba,%rax
  800421c559:	00 00 00 
  800421c55c:	ff d0                	callq  *%rax
  800421c55e:	eb 24                	jmp    800421c584 <handle_interrupts+0xa6>
  800421c560:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421c567:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c56a:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421c56d:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421c570:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421c573:	48 89 d6             	mov    %rdx,%rsi
  800421c576:	89 c7                	mov    %eax,%edi
  800421c578:	48 b8 ba c2 21 04 80 	movabs $0x800421c2ba,%rax
  800421c57f:	00 00 00 
  800421c582:	ff d0                	callq  *%rax
	}
	else {	//revector the host vector to the guest vector

		vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	}
	return true;
  800421c584:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421c589:	c9                   	leaveq 
  800421c58a:	c3                   	retq   

000000800421c58b <handle_rdmsr>:

bool
handle_rdmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421c58b:	55                   	push   %rbp
  800421c58c:	48 89 e5             	mov    %rsp,%rbp
  800421c58f:	53                   	push   %rbx
  800421c590:	48 83 ec 48          	sub    $0x48,%rsp
  800421c594:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421c598:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421c59c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c5a0:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421c5a4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421c5a8:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421c5ad:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c5b1:	0f 85 d0 00 00 00    	jne    800421c687 <handle_rdmsr+0xfc>
		// TODO: setup msr_bitmap to ignore EFER_MSR
		uint64_t val;
		struct vmx_msr_entry *entry;
		bool r = find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421c5b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c5bb:	8b 50 28             	mov    0x28(%rax),%edx
  800421c5be:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c5c2:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421c5c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c5ca:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421c5ce:	89 c7                	mov    %eax,%edi
  800421c5d0:	48 b8 06 c4 21 04 80 	movabs $0x800421c406,%rax
  800421c5d7:	00 00 00 
  800421c5da:	ff d0                	callq  *%rax
  800421c5dc:	88 45 e7             	mov    %al,-0x19(%rbp)
		assert(r);
  800421c5df:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421c5e3:	83 f0 01             	xor    $0x1,%eax
  800421c5e6:	84 c0                	test   %al,%al
  800421c5e8:	74 35                	je     800421c61f <handle_rdmsr+0x94>
  800421c5ea:	48 b9 92 02 22 04 80 	movabs $0x8004220292,%rcx
  800421c5f1:	00 00 00 
  800421c5f4:	48 ba 94 02 22 04 80 	movabs $0x8004220294,%rdx
  800421c5fb:	00 00 00 
  800421c5fe:	be 59 00 00 00       	mov    $0x59,%esi
  800421c603:	48 bf a9 02 22 04 80 	movabs $0x80042202a9,%rdi
  800421c60a:	00 00 00 
  800421c60d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c612:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c619:	00 00 00 
  800421c61c:	41 ff d0             	callq  *%r8
		val = entry->msr_value;
  800421c61f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421c623:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421c627:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tf->tf_regs.reg_rdx = val << 32;
  800421c62b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c62f:	48 c1 e0 20          	shl    $0x20,%rax
  800421c633:	48 89 c2             	mov    %rax,%rdx
  800421c636:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c63a:	48 89 50 58          	mov    %rdx,0x58(%rax)
		tf->tf_regs.reg_rax = val & 0xFFFFFFFF;
  800421c63e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c642:	89 c2                	mov    %eax,%edx
  800421c644:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c648:	48 89 50 70          	mov    %rdx,0x70(%rax)

		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421c64c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c650:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421c657:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421c65e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421c661:	89 c7                	mov    %eax,%edi
  800421c663:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421c66a:	00 00 00 
  800421c66d:	ff d0                	callq  *%rax
  800421c66f:	89 c0                	mov    %eax,%eax
  800421c671:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421c675:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c679:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421c680:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c685:	eb 05                	jmp    800421c68c <handle_rdmsr+0x101>
	}

	return false;
  800421c687:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421c68c:	48 83 c4 48          	add    $0x48,%rsp
  800421c690:	5b                   	pop    %rbx
  800421c691:	5d                   	pop    %rbp
  800421c692:	c3                   	retq   

000000800421c693 <handle_wrmsr>:

bool 
handle_wrmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421c693:	55                   	push   %rbp
  800421c694:	48 89 e5             	mov    %rsp,%rbp
  800421c697:	53                   	push   %rbx
  800421c698:	48 83 ec 58          	sub    $0x58,%rsp
  800421c69c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421c6a0:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421c6a4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c6a8:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421c6ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421c6b0:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421c6b5:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c6b9:	0f 85 34 01 00 00    	jne    800421c7f3 <handle_wrmsr+0x160>

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421c6bf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421c6c3:	8b 50 28             	mov    0x28(%rax),%edx
  800421c6c6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421c6ca:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421c6ce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	uint64_t msr = tf->tf_regs.reg_rcx;
	if(msr == EFER_MSR) {

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
  800421c6d2:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421c6d6:	89 c7                	mov    %eax,%edi
  800421c6d8:	48 b8 06 c4 21 04 80 	movabs $0x800421c406,%rax
  800421c6df:	00 00 00 
  800421c6e2:	ff d0                	callq  *%rax
  800421c6e4:	88 45 e7             	mov    %al,-0x19(%rbp)
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
		assert(r);
  800421c6e7:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421c6eb:	83 f0 01             	xor    $0x1,%eax
  800421c6ee:	84 c0                	test   %al,%al
  800421c6f0:	74 35                	je     800421c727 <handle_wrmsr+0x94>
  800421c6f2:	48 b9 92 02 22 04 80 	movabs $0x8004220292,%rcx
  800421c6f9:	00 00 00 
  800421c6fc:	48 ba 94 02 22 04 80 	movabs $0x8004220294,%rdx
  800421c703:	00 00 00 
  800421c706:	be 6f 00 00 00       	mov    $0x6f,%esi
  800421c70b:	48 bf a9 02 22 04 80 	movabs $0x80042202a9,%rdi
  800421c712:	00 00 00 
  800421c715:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c71a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c721:	00 00 00 
  800421c724:	41 ff d0             	callq  *%r8
		cur_val = entry->msr_value;
  800421c727:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c72b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421c72f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		new_val = (tf->tf_regs.reg_rdx << 32)|tf->tf_regs.reg_rax;
  800421c733:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c737:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421c73b:	48 c1 e0 20          	shl    $0x20,%rax
  800421c73f:	48 89 c2             	mov    %rax,%rdx
  800421c742:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c746:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421c74a:	48 09 d0             	or     %rdx,%rax
  800421c74d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(BIT(cur_val, EFER_LME) == 0 && BIT(new_val, EFER_LME) == 1) {
  800421c751:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c755:	25 00 01 00 00       	and    $0x100,%eax
  800421c75a:	48 85 c0             	test   %rax,%rax
  800421c75d:	75 4d                	jne    800421c7ac <handle_wrmsr+0x119>
  800421c75f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c763:	25 00 01 00 00       	and    $0x100,%eax
  800421c768:	48 85 c0             	test   %rax,%rax
  800421c76b:	74 3f                	je     800421c7ac <handle_wrmsr+0x119>
  800421c76d:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421c774:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421c777:	89 c7                	mov    %eax,%edi
  800421c779:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421c780:	00 00 00 
  800421c783:	ff d0                	callq  *%rax
			// Long mode enable.
			uint32_t entry_ctls = vmcs_read32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS );
  800421c785:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421c788:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421c78f:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c792:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421c795:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421c798:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c79b:	48 89 d6             	mov    %rdx,%rsi
  800421c79e:	89 c7                	mov    %eax,%edi
  800421c7a0:	48 b8 ba c2 21 04 80 	movabs $0x800421c2ba,%rax
  800421c7a7:	00 00 00 
  800421c7aa:	ff d0                	callq  *%rax
			vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS, 
				      entry_ctls );

		}

		entry->msr_value = new_val;
  800421c7ac:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c7b0:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421c7b4:	48 89 50 08          	mov    %rdx,0x8(%rax)
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421c7b8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c7bc:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421c7c3:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421c7ca:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c7cd:	89 c7                	mov    %eax,%edi
  800421c7cf:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421c7d6:	00 00 00 
  800421c7d9:	ff d0                	callq  *%rax
  800421c7db:	89 c0                	mov    %eax,%eax
  800421c7dd:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421c7e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421c7e5:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421c7ec:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c7f1:	eb 05                	jmp    800421c7f8 <handle_wrmsr+0x165>
	}

	return false;
  800421c7f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421c7f8:	48 83 c4 58          	add    $0x58,%rsp
  800421c7fc:	5b                   	pop    %rbx
  800421c7fd:	5d                   	pop    %rbp
  800421c7fe:	c3                   	retq   

000000800421c7ff <handle_eptviolation>:

bool
handle_eptviolation(uint64_t *eptrt, struct VmxGuestInfo *ginfo) {
  800421c7ff:	55                   	push   %rbp
  800421c800:	48 89 e5             	mov    %rsp,%rbp
  800421c803:	53                   	push   %rbx
  800421c804:	48 83 ec 48          	sub    $0x48,%rsp
  800421c808:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421c80c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421c810:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421c817:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421c81a:	89 c7                	mov    %eax,%edi
  800421c81c:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421c823:	00 00 00 
  800421c826:	ff d0                	callq  *%rax
	uint64_t gpa = vmcs_read64(VMCS_64BIT_GUEST_PHYSICAL_ADDR);
  800421c828:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int r;
	if(gpa < 0xA0000 || (gpa >= 0x100000 && gpa < ginfo->phys_sz)) 
  800421c82c:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421c833:	00 
  800421c834:	76 1f                	jbe    800421c855 <handle_eptviolation+0x56>
  800421c836:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421c83d:	00 
  800421c83e:	0f 86 f9 00 00 00    	jbe    800421c93d <handle_eptviolation+0x13e>
  800421c844:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421c848:	48 8b 00             	mov    (%rax),%rax
  800421c84b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421c84f:	0f 86 e8 00 00 00    	jbe    800421c93d <handle_eptviolation+0x13e>
	{
		// Allocate a new page to the guest.
		struct PageInfo *p = page_alloc(0);
  800421c855:	bf 00 00 00 00       	mov    $0x0,%edi
  800421c85a:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421c861:	00 00 00 
  800421c864:	ff d0                	callq  *%rax
  800421c866:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(!p) {
  800421c86a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421c86f:	75 25                	jne    800421c896 <handle_eptviolation+0x97>
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
  800421c871:	48 bf b8 02 22 04 80 	movabs $0x80042202b8,%rdi
  800421c878:	00 00 00 
  800421c87b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c880:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421c887:	00 00 00 
  800421c88a:	ff d2                	callq  *%rdx
			return false;
  800421c88c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c891:	e9 54 01 00 00       	jmpq   800421c9ea <handle_eptviolation+0x1eb>
		}
		p->pp_ref += 1;
  800421c896:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c89a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421c89e:	8d 50 01             	lea    0x1(%rax),%edx
  800421c8a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c8a5:	66 89 50 08          	mov    %dx,0x8(%rax)
		r = ept_map_hva2gpa(eptrt, 
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
  800421c8a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c8ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421c8b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c8b5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
		if(!p) {
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
			return false;
		}
		p->pp_ref += 1;
		r = ept_map_hva2gpa(eptrt, 
  800421c8bb:	48 89 c3             	mov    %rax,%rbx
  800421c8be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c8c2:	48 89 c7             	mov    %rax,%rdi
  800421c8c5:	48 b8 4b c3 21 04 80 	movabs $0x800421c34b,%rax
  800421c8cc:	00 00 00 
  800421c8cf:	ff d0                	callq  *%rax
  800421c8d1:	48 89 c6             	mov    %rax,%rsi
  800421c8d4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c8d8:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421c8de:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421c8e3:	48 89 da             	mov    %rbx,%rdx
  800421c8e6:	48 89 c7             	mov    %rax,%rdi
  800421c8e9:	48 b8 a0 96 21 04 80 	movabs $0x80042196a0,%rax
  800421c8f0:	00 00 00 
  800421c8f3:	ff d0                	callq  *%rax
  800421c8f5:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
		assert(r >= 0);
  800421c8f8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421c8fc:	79 35                	jns    800421c933 <handle_eptviolation+0x134>
  800421c8fe:	48 b9 08 03 22 04 80 	movabs $0x8004220308,%rcx
  800421c905:	00 00 00 
  800421c908:	48 ba 94 02 22 04 80 	movabs $0x8004220294,%rdx
  800421c90f:	00 00 00 
  800421c912:	be 93 00 00 00       	mov    $0x93,%esi
  800421c917:	48 bf a9 02 22 04 80 	movabs $0x80042202a9,%rdi
  800421c91e:	00 00 00 
  800421c921:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c926:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c92d:	00 00 00 
  800421c930:	41 ff d0             	callq  *%r8
		/* cprintf("EPT violation for gpa:%x mapped KVA:%x\n", gpa, page2kva(p)); */
		return true;
  800421c933:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c938:	e9 ad 00 00 00       	jmpq   800421c9ea <handle_eptviolation+0x1eb>
	} else if (gpa >= CGA_BUF && gpa < CGA_BUF + PGSIZE) {
  800421c93d:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421c944:	00 
  800421c945:	76 7c                	jbe    800421c9c3 <handle_eptviolation+0x1c4>
  800421c947:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421c94e:	00 
  800421c94f:	77 72                	ja     800421c9c3 <handle_eptviolation+0x1c4>
		// FIXME: This give direct access to VGA MMIO region.
		r = ept_map_hva2gpa(eptrt, 
  800421c951:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421c955:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421c95b:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421c960:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421c965:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421c96c:	00 00 00 
  800421c96f:	48 89 c7             	mov    %rax,%rdi
  800421c972:	48 b8 a0 96 21 04 80 	movabs $0x80042196a0,%rax
  800421c979:	00 00 00 
  800421c97c:	ff d0                	callq  *%rax
  800421c97e:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    (void *)(KERNBASE + CGA_BUF), (void *)CGA_BUF, __EPTE_FULL, 0);
		assert(r >= 0);
  800421c981:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421c985:	79 35                	jns    800421c9bc <handle_eptviolation+0x1bd>
  800421c987:	48 b9 08 03 22 04 80 	movabs $0x8004220308,%rcx
  800421c98e:	00 00 00 
  800421c991:	48 ba 94 02 22 04 80 	movabs $0x8004220294,%rdx
  800421c998:	00 00 00 
  800421c99b:	be 9a 00 00 00       	mov    $0x9a,%esi
  800421c9a0:	48 bf a9 02 22 04 80 	movabs $0x80042202a9,%rdi
  800421c9a7:	00 00 00 
  800421c9aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c9af:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c9b6:	00 00 00 
  800421c9b9:	41 ff d0             	callq  *%r8
		return true;
  800421c9bc:	b8 01 00 00 00       	mov    $0x1,%eax
  800421c9c1:	eb 27                	jmp    800421c9ea <handle_eptviolation+0x1eb>
	}
	cprintf("vmm: handle_eptviolation: Case 2, gpa %x\n", gpa);
  800421c9c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c9c7:	48 89 c6             	mov    %rax,%rsi
  800421c9ca:	48 bf 10 03 22 04 80 	movabs $0x8004220310,%rdi
  800421c9d1:	00 00 00 
  800421c9d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c9d9:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421c9e0:	00 00 00 
  800421c9e3:	ff d2                	callq  *%rdx
	return false;
  800421c9e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421c9ea:	48 83 c4 48          	add    $0x48,%rsp
  800421c9ee:	5b                   	pop    %rbx
  800421c9ef:	5d                   	pop    %rbp
  800421c9f0:	c3                   	retq   

000000800421c9f1 <handle_ioinstr>:

bool
handle_ioinstr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421c9f1:	55                   	push   %rbp
  800421c9f2:	48 89 e5             	mov    %rsp,%rbp
  800421c9f5:	53                   	push   %rbx
  800421c9f6:	48 83 ec 38          	sub    $0x38,%rsp
  800421c9fa:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421c9fe:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421ca02:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421ca09:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421ca0c:	89 c7                	mov    %eax,%edi
  800421ca0e:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421ca15:	00 00 00 
  800421ca18:	ff d0                	callq  *%rax
	static int port_iortc;

	uint64_t qualification = vmcs_read64(VMCS_VMEXIT_QUALIFICATION);
  800421ca1a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int port_number = (qualification >> 16) & 0xFFFF;
  800421ca1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ca22:	48 c1 e8 10          	shr    $0x10,%rax
  800421ca26:	25 ff ff 00 00       	and    $0xffff,%eax
  800421ca2b:	89 45 dc             	mov    %eax,-0x24(%rbp)
	bool is_in = BIT(qualification, 3);
  800421ca2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ca32:	48 c1 e8 03          	shr    $0x3,%rax
  800421ca36:	83 e0 01             	and    $0x1,%eax
  800421ca39:	48 85 c0             	test   %rax,%rax
  800421ca3c:	0f 95 c0             	setne  %al
  800421ca3f:	88 45 db             	mov    %al,-0x25(%rbp)
	bool handled = false;
  800421ca42:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

	// handle reading physical memory from the CMOS.
	if(port_number == IO_RTC) {
  800421ca46:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421ca4a:	75 2e                	jne    800421ca7a <handle_ioinstr+0x89>
		if(!is_in) {
  800421ca4c:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421ca50:	83 f0 01             	xor    $0x1,%eax
  800421ca53:	84 c0                	test   %al,%al
  800421ca55:	0f 84 fa 00 00 00    	je     800421cb55 <handle_ioinstr+0x164>
			port_iortc = tf->tf_regs.reg_rax;
  800421ca5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ca5f:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421ca63:	89 c2                	mov    %eax,%edx
  800421ca65:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421ca6c:	00 00 00 
  800421ca6f:	89 10                	mov    %edx,(%rax)
			handled = true;
  800421ca71:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421ca75:	e9 db 00 00 00       	jmpq   800421cb55 <handle_ioinstr+0x164>
		}
	} else if (port_number == IO_RTC + 1) {
  800421ca7a:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421ca7e:	0f 85 d1 00 00 00    	jne    800421cb55 <handle_ioinstr+0x164>
		if(is_in) {
  800421ca84:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421ca88:	0f 84 c7 00 00 00    	je     800421cb55 <handle_ioinstr+0x164>
			if(port_iortc == NVRAM_BASELO) {
  800421ca8e:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421ca95:	00 00 00 
  800421ca98:	8b 00                	mov    (%rax),%eax
  800421ca9a:	83 f8 15             	cmp    $0x15,%eax
  800421ca9d:	75 15                	jne    800421cab4 <handle_ioinstr+0xc3>
				tf->tf_regs.reg_rax = 640 & 0xFF;
  800421ca9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421caa3:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421caaa:	00 
				handled = true;
  800421caab:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421caaf:	e9 a1 00 00 00       	jmpq   800421cb55 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_BASEHI) {
  800421cab4:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cabb:	00 00 00 
  800421cabe:	8b 00                	mov    (%rax),%eax
  800421cac0:	83 f8 16             	cmp    $0x16,%eax
  800421cac3:	75 12                	jne    800421cad7 <handle_ioinstr+0xe6>
				tf->tf_regs.reg_rax = (640 >> 8) & 0xFF;
  800421cac5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cac9:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421cad0:	00 
				handled = true;
  800421cad1:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cad5:	eb 7e                	jmp    800421cb55 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTLO) {
  800421cad7:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cade:	00 00 00 
  800421cae1:	8b 00                	mov    (%rax),%eax
  800421cae3:	83 f8 17             	cmp    $0x17,%eax
  800421cae6:	75 2a                	jne    800421cb12 <handle_ioinstr+0x121>
				tf->tf_regs.reg_rax = ((ginfo->phys_sz / 1024) - 1024) & 0xFF;
  800421cae8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421caec:	48 8b 00             	mov    (%rax),%rax
  800421caef:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421caf6:	48 85 c0             	test   %rax,%rax
  800421caf9:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421cafd:	48 c1 f8 0a          	sar    $0xa,%rax
  800421cb01:	0f b6 d0             	movzbl %al,%edx
  800421cb04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cb08:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421cb0c:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cb10:	eb 43                	jmp    800421cb55 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTHI) {
  800421cb12:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cb19:	00 00 00 
  800421cb1c:	8b 00                	mov    (%rax),%eax
  800421cb1e:	83 f8 18             	cmp    $0x18,%eax
  800421cb21:	75 32                	jne    800421cb55 <handle_ioinstr+0x164>
				tf->tf_regs.reg_rax = (((ginfo->phys_sz / 1024) - 1024) >> 8) & 0xFF;
  800421cb23:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421cb27:	48 8b 00             	mov    (%rax),%rax
  800421cb2a:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421cb31:	48 85 c0             	test   %rax,%rax
  800421cb34:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421cb38:	48 c1 f8 0a          	sar    $0xa,%rax
  800421cb3c:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421cb42:	48 c1 f8 08          	sar    $0x8,%rax
  800421cb46:	0f b6 d0             	movzbl %al,%edx
  800421cb49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cb4d:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421cb51:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
			}
		}

	} 
	if(handled) {
  800421cb55:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421cb59:	74 3b                	je     800421cb96 <handle_ioinstr+0x1a5>
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421cb5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cb5f:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421cb66:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421cb6d:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421cb70:	89 c7                	mov    %eax,%edi
  800421cb72:	48 b8 e0 c2 21 04 80 	movabs $0x800421c2e0,%rax
  800421cb79:	00 00 00 
  800421cb7c:	ff d0                	callq  *%rax
  800421cb7e:	89 c0                	mov    %eax,%eax
  800421cb80:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421cb84:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cb88:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421cb8f:	b8 01 00 00 00       	mov    $0x1,%eax
  800421cb94:	eb 33                	jmp    800421cbc9 <handle_ioinstr+0x1d8>
	} else {
		cprintf("%x %x\n", qualification, port_iortc);
  800421cb96:	48 b8 cc a5 6d 04 80 	movabs $0x80046da5cc,%rax
  800421cb9d:	00 00 00 
  800421cba0:	8b 10                	mov    (%rax),%edx
  800421cba2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421cba6:	48 89 c6             	mov    %rax,%rsi
  800421cba9:	48 bf 3a 03 22 04 80 	movabs $0x800422033a,%rdi
  800421cbb0:	00 00 00 
  800421cbb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbb8:	48 b9 14 9c 20 04 80 	movabs $0x8004209c14,%rcx
  800421cbbf:	00 00 00 
  800421cbc2:	ff d1                	callq  *%rcx
		return false;
  800421cbc4:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
  800421cbc9:	48 83 c4 38          	add    $0x38,%rsp
  800421cbcd:	5b                   	pop    %rbx
  800421cbce:	5d                   	pop    %rbp
  800421cbcf:	c3                   	retq   

000000800421cbd0 <handle_cpuid>:
// Finally, you need to increment the program counter in the trap frame.
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.
bool
handle_cpuid(struct Trapframe *tf, struct VmxGuestInfo *ginfo)
{
  800421cbd0:	55                   	push   %rbp
  800421cbd1:	48 89 e5             	mov    %rsp,%rbp
  800421cbd4:	48 83 ec 10          	sub    $0x10,%rsp
  800421cbd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421cbdc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	/* Your code here  */
    panic("handle_cpuid is not impemented\n");
  800421cbe0:	48 ba 48 03 22 04 80 	movabs $0x8004220348,%rdx
  800421cbe7:	00 00 00 
  800421cbea:	be d9 00 00 00       	mov    $0xd9,%esi
  800421cbef:	48 bf a9 02 22 04 80 	movabs $0x80042202a9,%rdi
  800421cbf6:	00 00 00 
  800421cbf9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbfe:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421cc05:	00 00 00 
  800421cc08:	ff d1                	callq  *%rcx

000000800421cc0a <handle_vmcall>:
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.//

bool
handle_vmcall(struct Trapframe *tf, struct VmxGuestInfo *gInfo, uint64_t *eptrt)
{
  800421cc0a:	55                   	push   %rbp
  800421cc0b:	48 89 e5             	mov    %rsp,%rbp
  800421cc0e:	48 83 ec 70          	sub    $0x70,%rsp
  800421cc12:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421cc16:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421cc1a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	bool handled = false;
  800421cc1e:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
	int perm, r;
	void *gpa_pg, *hva_pg;
	envid_t to_env;
	uint32_t val;
	// phys address of the multiboot map in the guest.
	uint64_t multiboot_map_addr = 0x6000;
  800421cc22:	48 c7 45 f0 00 60 00 	movq   $0x6000,-0x10(%rbp)
  800421cc29:	00 
	switch(tf->tf_regs.reg_rax) {
  800421cc2a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421cc2e:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421cc32:	48 83 f8 06          	cmp    $0x6,%rax
  800421cc36:	0f 87 c1 00 00 00    	ja     800421ccfd <handle_vmcall+0xf3>
  800421cc3c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421cc43:	00 
  800421cc44:	48 b8 c0 03 22 04 80 	movabs $0x80042203c0,%rax
  800421cc4b:	00 00 00 
  800421cc4e:	48 01 d0             	add    %rdx,%rax
  800421cc51:	48 8b 00             	mov    (%rax),%rax
  800421cc54:	ff e0                	jmpq   *%rax
		// NB: because recv can call schedule, clobbering the VMCS, 
		// you should go ahead and increment rip before this call.
		/* Your code here */
		break;
	case VMX_VMCALL_LAPICEOI:
		lapic_eoi();
  800421cc56:	48 b8 67 79 21 04 80 	movabs $0x8004217967,%rax
  800421cc5d:	00 00 00 
  800421cc60:	ff d0                	callq  *%rax
		handled = true;
  800421cc62:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421cc66:	e9 92 00 00 00       	jmpq   800421ccfd <handle_vmcall+0xf3>
	case VMX_VMCALL_BACKTOHOST:
		cprintf("Now back to the host, VM halt in the background, run vmmanager to resume the VM.\n");
  800421cc6b:	48 bf 68 03 22 04 80 	movabs $0x8004220368,%rdi
  800421cc72:	00 00 00 
  800421cc75:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cc7a:	48 ba 14 9c 20 04 80 	movabs $0x8004209c14,%rdx
  800421cc81:	00 00 00 
  800421cc84:	ff d2                	callq  *%rdx
		curenv->env_status = ENV_NOT_RUNNABLE;	//mark the guest not runable
  800421cc86:	48 b8 32 79 21 04 80 	movabs $0x8004217932,%rax
  800421cc8d:	00 00 00 
  800421cc90:	ff d0                	callq  *%rax
  800421cc92:	48 ba 20 c0 6d 04 80 	movabs $0x80046dc020,%rdx
  800421cc99:	00 00 00 
  800421cc9c:	48 98                	cltq   
  800421cc9e:	48 c1 e0 03          	shl    $0x3,%rax
  800421cca2:	48 89 c1             	mov    %rax,%rcx
  800421cca5:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cca9:	48 01 c8             	add    %rcx,%rax
  800421ccac:	48 01 d0             	add    %rdx,%rax
  800421ccaf:	48 83 c0 08          	add    $0x8,%rax
  800421ccb3:	48 8b 00             	mov    (%rax),%rax
  800421ccb6:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421ccbd:	00 00 00 
		ENV_CREATE(user_sh, ENV_TYPE_USER);	//create a new host shell
  800421ccc0:	be 00 00 00 00       	mov    $0x0,%esi
  800421ccc5:	48 bf 10 c1 4b 04 80 	movabs $0x80044bc110,%rdi
  800421cccc:	00 00 00 
  800421cccf:	48 b8 66 8f 20 04 80 	movabs $0x8004208f66,%rax
  800421ccd6:	00 00 00 
  800421ccd9:	ff d0                	callq  *%rax
		handled = true;
  800421ccdb:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;	
  800421ccdf:	eb 1c                	jmp    800421ccfd <handle_vmcall+0xf3>
	case VMX_VMCALL_GETDISKIMGNUM:	//alloc a number to guest
		tf->tf_regs.reg_rax = vmdisk_number;
  800421cce1:	48 b8 c8 a5 6d 04 80 	movabs $0x80046da5c8,%rax
  800421cce8:	00 00 00 
  800421cceb:	8b 00                	mov    (%rax),%eax
  800421cced:	48 63 d0             	movslq %eax,%rdx
  800421ccf0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421ccf4:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421ccf8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421ccfc:	90                   	nop
		 * 
		 * Hint: The solution does not hard-code the length of the vmcall instruction.
		 */
		/* Your code here */
	}
	return handled;
  800421ccfd:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
  800421cd01:	c9                   	leaveq 
  800421cd02:	c3                   	retq   
